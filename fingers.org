* Fingers

  Load magit.

  #+begin_src emacs-lisp
    (use-package magit
      :ensure magit
      :config (setq git-commit-summary-max-length 72))

    (setq magit-display-buffer-function
          (lambda (b)
            (display-buffer b '(display-buffer-same-window))))
  #+end_src

  Load multiple-cursors for light-weight macros.

  #+begin_src emacs-lisp
    (use-package multiple-cursors
      :ensure multiple-cursors
      :commands mc/edit-lines)
  #+end_src

  Load avy for fine-grained in-buffer jumping.

  #+begin_src emacs-lisp
    (use-package avy
      :ensure avy
      :commands (avy-goto-word-or-subword-1)
      :config (setq avy-all-windows nil
                    avy-keys '(?a ?s ?h ?t)))
  #+end_src

  Helper to visualize fingers-mode's state and make mode-line visible.

  #+begin_src emacs-lisp
    (defun fingers-mode-visual-toggle ()
      (interactive)
      (let ((faces-to-toggle '(mode-line mode-line-inactive)))
        (cond (fingers-mode
               (mapcar (lambda (face)
                         (set-face-foreground face "white")
                         (set-face-background face "white")
                         (set-face-attribute face nil :height (face-attribute 'default :height)))
                       faces-to-toggle))
              (t
               (mapcar (lambda (face)
                         (set-face-foreground face "black")
                         (set-face-background face "white")
                         (set-face-attribute face nil :height (face-attribute 'default :height)))
                       faces-to-toggle)))))

    (add-hook 'fingers-mode-hook 'fingers-mode-visual-toggle)
  #+end_src

  Quick helper to trigger offlineimap.

  #+begin_src emacs-lisp
    (defun offlineimap ()
      "Helper to (re)start offlineimap via compile"
      (interactive)
      (let ((buf "*offline-imap*"))
        (if (get-buffer buf)
            (with-current-buffer buf (recompile))
          (compile "offlineimap")
          (with-current-buffer "*compilation*"
            (rename-buffer "*offline-imap*")))))
  #+end_src

  #+begin_src emacs-lisp
    (defun toggle-show-trailing-whitespace ()
      (interactive)
      (setq show-trailing-whitespace (not show-trailing-whitespace)))
  #+end_src

  My custom bindings for fingers-mode.

  #+begin_src emacs-lisp
    (defun fingers-mode-custom-bindings ()
      (interactive)
      (define-key dired-mode-map (kbd "C-o") nil)
      (define-key wdired-mode-map (kbd "C-o") nil)
      (define-key global-map (kbd "C-o") 'global-fingers-mode)

      (define-key fingers-mode-map (kbd "H") 'counsel-yank-pop)
      (define-key fingers-mode-map (kbd "j") 'ivy-apropos)
      (define-key fingers-mode-map (kbd "K") 'ag-project)
      (define-key fingers-mode-map (kbd "k") 'ivy-ag-with-thing-at-point)
      (define-key fingers-mode-map (kbd "l") 'avy-goto-word-or-subword-1)
      (define-key fingers-mode-map (kbd "L") 'avy-goto-char)
      (define-key fingers-mode-map (kbd ".") 'ivy-jump)
      (define-key fingers-mode-map (kbd ">") 'ivy-resume)
      (define-key fingers-mode-map (kbd "|") 'mc/edit-lines)
      (define-key fingers-mode-map (kbd "[") 'ivy-local-mark-ring)
      (define-key fingers-mode-map (kbd "{") 'ivy-global-mark-ring)

      (define-key fingers-mode-c-map (kbd "RET") 'browse-url-at-point)

      (define-key fingers-mode-x-map (kbd "f") 'counsel-find-file)
      (define-key fingers-mode-x-map (kbd "x") 'counsel-M-x)
      (define-key fingers-mode-x-map (kbd "vs") 'show-eshell-git-status)

      (define-key fingers-mode-launch-map (kbd "e") 'last-eshell)
      (define-key fingers-mode-launch-map (kbd "s") 'shell)
      (define-key fingers-mode-launch-map (kbd "m") 'magit-status)
      (define-key fingers-mode-launch-map (kbd "n") 'notmuch)
      (define-key fingers-mode-launch-map (kbd "oo") 'offlineimap)

      (define-key fingers-mode-toggle-map (kbd "f") 'font-lock-mode)
      (define-key fingers-mode-toggle-map (kbd "w") 'leerzeichen-mode)
      (define-key fingers-mode-toggle-map (kbd "W") 'toggle-show-trailing-whitespace)
      (define-key fingers-mode-toggle-map (kbd "n") 'nlinum-mode)

      (define-key fingers-mode-map (kbd "A-<up>") 'increase-font-height)
      (define-key fingers-mode-map (kbd "s-<up>") 'increase-font-height)
      (define-key fingers-mode-map (kbd "A-<down>") 'decrease-font-height)
      (define-key fingers-mode-map (kbd "s-<down>") 'decrease-font-height)

      (define-key fingers-mode-map (kbd "S-<up>") 'enlarge-window)
      (define-key fingers-mode-map (kbd "S-<down>") 'shrink-window)
      (define-key fingers-mode-map (kbd "S-<left>") 'shrink-window-horizontally)
      (define-key fingers-mode-map (kbd "S-<right>") 'enlarge-window-horizontally)

      (let* ((my-fingers-map (fingers-mode-clean-map)))
        (define-key my-fingers-map (kbd "pp") 'ivy-jump-to-project)
        (define-key my-fingers-map (kbd "p.") 'ivy-git-ls-files-project)
        (define-key my-fingers-map (kbd "ti") 'scala-ignore-all-tests)
        (define-key my-fingers-map (kbd "te") 'scala-enable-all-tests)
        (define-key my-fingers-map (kbd "tn") 'scala-next-test-forward)
        (define-key my-fingers-map (kbd "tp") 'scala-next-test-whitespace)
        (define-key my-fingers-map (kbd "br") 'revert-buffer)
        (define-key my-fingers-map (kbd "bn") 'rename-buffer)
        (define-key my-fingers-map (kbd "bw") 'delete-trailing-whitespace)
        (define-key my-fingers-map (kbd "k") 'ivy-ag-with-thing-at-point-in-main)
        (define-key fingers-mode-map (kbd "q") my-fingers-map))
      )
  #+end_src

  #+begin_src emacs-lisp
    (eval-after-load 'fingers
      'nil)
  #+end_src

  Load and activate it!

  #+begin_src emacs-lisp
    (use-package fingers
      :commands global-fingers-mode
      :init
      (add-hook 'fingers-after-reset-hook 'fingers-mode-custom-bindings)
      (global-fingers-mode 1))
  #+end_src

  Helper to save macro to =*scratch*= buffer.

  #+begin_src emacs-lisp
    (defun save-macro-to-scratch (name)
      (interactive "SName the macro:")
      (name-last-kbd-macro name)
      (pop-to-buffer "*scratch*")
      (goto-char (point-max))
      (newline)
      (insert ";; generated macro")
      (newline)
      (insert-kbd-macro name)
      (newline))
  #+end_src

  #+begin_src emacs-lisp
    (define-key dired-mode-map (kbd "C-c C-p") 'wdired-change-to-wdired-mode)
  #+end_src

  Unload diff bindings that shadow fingers-mode

  #+begin_src emacs-lisp
    (eval-after-load 'diff-mode
      '(progn
         (dolist (key '("n" "N" "p" "P" "k" "K" "W" "o" "A" "r" "R"))
           (define-key diff-mode-shared-map (kbd key) nil))))
  #+end_src
