* Scala

  Hook to call scalariform-daemon for formatting.

  #+begin_src emacs-lisp
    (use-package request :commands request :ensure request)
    (defun scalariform-daemon-format-file ()
      (when (and (boundp 'scalariform-preferences-file)
                 scalariform-preferences-file)
        (request
         "http://127.0.0.1:5474/format"
         :params `((fileName . ,buffer-file-name)
                   (preferencesFile . ,scalariform-preferences-file)))))
  #+end_src

  Start the daemon.

  #+begin_src emacs-lisp
    (defun start-scalariform-daemon ()
      (interactive)
      (let ((buf-name "*scalariform-daemon*")
            (default-directory (expand-file-name "~/code/scalariform-daemon/")))
        (if (get-buffer buf-name)
            (with-current-buffer buf-name (recompile))
          (compile "sbt run")
          (with-current-buffer "*compilation*" (rename-buffer buf-name)))))
  #+end_src

  Helper to start sbt in compilation buffer.

  #+begin_src emacs-lisp
    (defun start-sbt ()
      (interactive)
      (let ((buf-name (format "*sbt [%s]*" default-directory)))
        (if (get-buffer buf-name)
            (switch-to-buffer buf-name)
          (compile "sbt" t)
          (with-current-buffer "*compilation*" (rename-buffer buf-name)))))
  #+end_src

  Per-buffer customizations.

  #+begin_src emacs-lisp
    (defun scala-customizations ()
      (nlinum-mode 1)
      (setq tab-width 2)
      (gtags-mode 1)
      (helm-gtags-mode 1)
      (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-find-tag)
      (define-key helm-gtags-mode-map (kbd "M-/") 'helm-gtags-pop-stack)
      (add-hook 'before-save-hook 'maybe-cleanup-whitespace nil 'local)
      (add-hook 'after-save-hook 'scalariform-daemon-format-file nil 'make-it-local))
  #+end_src

  Hook in customizations.

  #+begin_src emacs-lisp
    (use-package scala-mode2 :ensure scala-mode2
      :config
      (add-hook 'scala-mode-hook 'scala-customizations))
  #+end_src

  Scala test control

  #+begin_src emacs-lisp
    (defun scala-ignore-all-tests ()
      (interactive)
      (save-excursion
        (replace-regexp "\\bit(\\(s\\)?\"" "ignore(\\1\"" nil (point-min) (point-max)))
      (unless current-prefix-arg
        (save-excursion
          (search-backward "ignore(" nil)
          (replace-match "it(" nil t))))

    (defun scala-enable-all-tests ()
      (interactive)
      (save-excursion
        (replace-regexp "\\bignore(\\(s\\)?\"" "it(\\1\"" nil (point-min) (point-max))))
  #+end_src


