* Scala

  Adds patterns for recognizing file links when running sbt in compilation mode.

  #+begin_src emacs-lisp
    (setq compilation-sbt-regexp '(sbt "^\\[error\\] \\(/[^:]+\\):\\([0-9]+\\):" 1 2))
    (add-to-list 'compilation-error-regexp-alist 'sbt)
    (add-to-list 'compilation-error-regexp-alist-alist compilation-sbt-regexp)

    (defun compilation-find-file-recursively ()
      (find-file-recursively (match-string 1) default-directory))

    (setq compilation-sbt-stacktrace-regexp
          '(sbt-stacktrace "[[:space:]]+at [^(]+(\\([^:]+\\):\\([[:digit:]]+\\))$" compilation-find-file-recursively 2))
    (add-to-list 'compilation-error-regexp-alist 'sbt-stacktrace)
    (add-to-list 'compilation-error-regexp-alist-alist compilation-sbt-stacktrace-regexp)
  #+end_src

  Hook to call scalariform-daemon for formatting.

  #+begin_src emacs-lisp
    (use-package request :commands request :ensure request)
    (defun scalariform-daemon-format-file ()
      (when (and (boundp 'scalariform-preferences-file)
                 scalariform-preferences-file)
        (request
         "http://127.0.0.1:5474/format"
         :params `((fileName . ,buffer-file-name)
                   (preferencesFile . ,scalariform-preferences-file)))))
  #+end_src

  Start the daemon.

  #+begin_src emacs-lisp
    (defun start-scalariform-daemon ()
      (interactive)
      (let ((buf-name "*scalariform-daemon*")
            (default-directory (expand-file-name "~/code/scalariform-daemon/")))
        (if (get-buffer buf-name)
            (with-current-buffer buf-name (recompile))
          (compile "sbt run")
          (with-current-buffer "*compilation*" (rename-buffer buf-name)))))
  #+end_src

  Helpers to navigate tests.

  #+begin_src emacs-lisp
    (defun scala-next-test-forward ()
      (interactive)
      (scala-next-test nil))

    (defun scala-next-test-backward ()
      (interactive)
      (scala-next-test t))

    (defun scala-next-test (backwards)
      (let ((test-prefix "\\(it(\\|describe(\\)"))
        (when (looking-at-p test-prefix) (forward-word))
        (when (if backwards
                  (re-search-backward test-prefix (point-min))
                (re-search-forward test-prefix (point-max)))
          (unless backwards (backward-word)))))
  #+end_src

  Helper to start sbt in compilation buffer.

  #+begin_src emacs-lisp
    (defun start-sbt ()
      (interactive)
      (let ((buf-name (format "*sbt [%s]*" default-directory)))
        (if (get-buffer buf-name)
            (switch-to-buffer buf-name)
          (compile "sbt" t)
          (with-current-buffer "*compilation*"
            (font-lock-mode 1)
            (rename-buffer buf-name)))))
  #+end_src

  Per-buffer customizations.

  #+begin_src emacs-lisp
    (defun scala-customizations ()
      (setq tab-width 2)
      (gtags-mode 1)
      (helm-gtags-mode 1)
      (subword-mode 1)
      (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-find-tag)
      (define-key helm-gtags-mode-map (kbd "M-/") 'helm-gtags-pop-stack)
      (add-hook 'before-save-hook 'scalariform-daemon-format-file nil 'make-it-local))
  #+end_src

  Hook in customizations.

  #+begin_src emacs-lisp
    (use-package scala-mode2 :ensure scala-mode2
      :config
      (add-hook 'scala-mode-hook 'scala-customizations))
  #+end_src

  Scala test control

  #+begin_src emacs-lisp
    (defun scala-ignore-all-tests ()
      (interactive)
      (save-excursion
        (replace-regexp "\\bit(\\(s\\)?\"" "ignore(\\1\"" nil (point-min) (point-max)))
      (unless current-prefix-arg
        (save-excursion
          (search-backward "ignore(" nil)
          (replace-match "it(" nil t))))

    (defun scala-enable-all-tests ()
      (interactive)
      (save-excursion
        (replace-regexp "\\bignore(\\(s\\)?\"" "it(\\1\"" nil (point-min) (point-max))))
  #+end_src
