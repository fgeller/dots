#+TITLE: Emacs Initialization
#+STARTUP: hideblocks
* Notes

  Don't forget to =git submodules init= and =git submodules update=.

  Load this file with the following incantation (e.g., in =~/.emacs=):

  #+begin_src emacs-lisp :tangle no
    (org-babel-load-file (expand-file-name "~/.emacs.d/init.org"))
  #+end_src

  Main sources are @purcell's emacs.d [11] and the Emacswiki [12].

* Environment
** Global variables

   Predicates for host operating system.

   #+begin_src emacs-lisp
     (setq mac-p (eq system-type 'darwin))
     (setq linux-p (eq system-type 'gnu/linux))
   #+end_src

** System name

   Don't use the FQDN

   #+begin_src emacs-lisp
     (when mac-p
       (setq system-name (car (split-string system-name "\\."))))
   #+end_src

** Editor

   Set default editor in (e)shell to emacsclient.

   #+begin_src emacs-lisp
     (setenv "EDITOR" "emacsclient")
   #+end_src

** Paging

   Default to cat, i.e., no paging.

   #+begin_src emacs-lisp
     (setenv "PAGER" "cat")
   #+end_src

** Shell

   Default to custom bash installation.

   #+begin_src emacs-lisp
     (setenv "SHELL" "/usr/local/bin/bash")
   #+end_src

** Sources path

   Where to find Emacs' sources.

   #+begin_src emacs-lisp
     (setq find-function-C-source-directory
           (expand-file-name "~/.emacs.d/emacs-sources/src"))
   #+end_src

** Load path

   The load path is augmented by =~/.emacs.d/site-lisp= and all direct
   children folders.

   #+begin_src emacs-lisp
     (dolist (addition '("~/.emacs.d/site-lisp"))
       (add-to-list 'load-path addition)
       (let ((default-directory addition))
         (normal-top-level-add-subdirs-to-load-path)))
   #+end_src

   ENSIME wants to be special.

   #+begin_src emacs-lisp
     (add-to-list 'load-path (expand-file-name "~/.emacs.d/src/ensime/dist/elisp"))
   #+end_src

** Themes path

   Add a local themes directory.

   #+begin_src emacs-lisp
     (let ((themes-directory (expand-file-name "~/.emacs.d/themes")))
       (dolist (file (directory-files themes-directory))
         (let ((expanded-file (expand-file-name file themes-directory)))
           (when (file-directory-p expanded-file)
             (add-to-list 'custom-theme-load-path expanded-file)))))
   #+end_src

** Exec path

   Use @purcell's library to fix `exec-path' based an default shell's PATH
   settings. Wrap this, as the feature might not yet be available.

   #+begin_src emacs-lisp
     (when (require 'exec-path-from-shell nil t)
       (exec-path-from-shell-initialize))
   #+end_src

** Garbage collection

   Increase the defaults.

   #+begin_src emacs-lisp
     (setq-default gc-cons-threshold (* 8192 8192))
   #+end_src

* Global helpers

  *N.B.*: For many of these, you need the =cl= library.

  Helper to guess the project root based on files and folders that
  indicate the root of a project. Exclude tramp'd files.

  #+begin_src emacs-lisp
    (defun c/guess-project-root ()
      "Guess the project root based on files and folders that
    indicate the root of a project. Exclude tramp'd files."
      (interactive)
      (let (
            (excludes '("/ssh:" "/sudo:"))
            (root-indicators '(".git" ".hg" ".svn" "pom.xml")))
        (when (and
               buffer-file-name
               (loop for exclude in excludes never (string-match exclude buffer-file-name)))
          (loop
           for root-indicator in root-indicators
           thereis (locate-dominating-file (or buffer-file-name default-directory) root-indicator)))))
  #+end_src

  Easy use of project root as =default-directory=.

  #+begin_src emacs-lisp
    (defmacro with-project-root (fun)
      `(let ((default-directory (or (c/guess-project-root) default-directory)))
         ,fun))
  #+end_src

  Look backward for a regex  and return group 1.

  #+begin_src emacs-lisp
    (defun c/find-backward (re-pattern)
      "Look backward for a regex  and return group 1."
      (save-excursion
        (re-search-backward re-pattern)
        (match-string 1)))
  #+end_src

  Helper to define a group of commands that can be executed in consecutive key
  presses. Heavily inspired by =text-scale-adjust=.

  #+begin_src emacs-lisp
    (defmacro define-command-group (name &rest maps)
      "Defines a command that can be used to dispatch a sequence of
     commands from using consecutive key presses. Heavily inspired by
     `text-scale-adjust'."
      (let* ((map-to-string (lambda (m) (format "%s â†’ %s" (getf m :key) (symbol-name (getf m :command)))))
             (prompt (s-join ", " (loop for map in maps collect (funcall map-to-string map)))))
        `(defun ,name ()
           (interactive)
           (let* ((step t)
                  (ev last-command-event)
                  (echo-keystrokes nil)
                  (base (event-basic-type ev)))
             (while step
               (cond
                ,@(loop for m in maps collect `((eq base ,(string-to-char (getf m :key))) (setq step t)))
                (t (setq step nil)))
               (when step
                 (cond
                  ,@(loop for m in maps collect (let ((key (string-to-char (getf m :key)))
                                                      (command (getf m :command)))
                                                  `((eq base ,key) (progn
                                                                     (call-interactively ',command)
                                                                     (setq last-command ',command))))))
                 (setq ev (read-event ,prompt))
                 (setq base (event-basic-type ev))))
             (push ev unread-command-events)))))
  #+end_src

  Helper to insert the contents of a file into a variable.

  #+begin_src emacs-lisp
    (defun c/file-contents (file-name)
      "Returns the contents of FILE-NAME as a string."
      (with-temp-buffer
        (insert-file-contents file-name)
        (buffer-substring (point-min) (point-max))))
  #+end_src

* Loading libraries
** Globally desirable included libraries

   We load a set of libraries that are generally desirable.

   #+begin_src emacs-lisp
     (require 'cl)
     (require 'package)
     (require 'repeat)
     (require 'uniquify)
     (require 'grep)
     (require 'thingatpt)
     (require 'server)
   #+end_src

** ELPA

   Helper from @purcell to load elpa packages.

   #+begin_src emacs-lisp
     (defun c/require-package (package &optional min-version no-refresh)
       "Ask elpa to install given PACKAGE."
       (if (package-installed-p package min-version)
           t
         (if (or (assoc package package-archive-contents) no-refresh)
             (package-install package)
           (progn
             (package-refresh-contents)
             (c/require-package package min-version t)))))
   #+end_src

   Configure ELPA package handling.

   #+begin_src emacs-lisp
     (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
     (add-to-list 'package-archives '("elpa" . "http://tromey.com/elpa/"))
     (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
     (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
     (package-initialize)
   #+end_src

   Load additional packages from ELPA archives.

   #+begin_src emacs-lisp
     (setq c/elpa-packages '(
                             ag
                             auto-complete
                             anzu
                             back-button
                             coffee-mode
                             diff-hl
                             dired+
                             dired-details
                             dired-details+
                             edit-server
                             elisp-slime-nav
                             expand-region
                             exec-path-from-shell
                             feature-mode
                             fill-column-indicator
                             floobits
                             flymake
                             flymake-cursor
                             flymake-easy
                             flymake-jshint
                             flymake-json
                             gtags
                             haskell-mode
                             helm
                             helm-git
                             helm-gtags
                             highlight-indentation
                             js2-mode
                             json-mode
                             magit
                             markdown-mode
                             mic-paren
                             move-text
                             multiple-cursors
                             org
                             org-plus-contrib
                             org-mac-link-grabber
                             org-magit
                             paredit
                             php+-mode
                             pointback
                             popup ;; for auto-complete
                             pretty-symbols-mode
                             rainbow-mode
                             rainbow-delimiters
                             request
                             s
                             scala-mode2
                             session
                             slime
                             smartparens
                             smartscan
                             todochiku
                             undo-tree
                             uuid
                             wgrep
                             wgrep-ag
                             yasnippet
                             ))
     (dolist (package c/elpa-packages)
       (c/require-package package))
   #+end_src

** Globally desirable external libraries
*** require'd
**** helm

    Helm is used for most completion and especially file/buffer
    navigation. Needed from the start.

    #+begin_src emacs-lisp
     (require 'helm-config)
    #+end_src

    Also load the helm-git addon.

    #+begin_src emacs-lisp
      (require 'helm-git)
    #+end_src

**** expand-region

    Expand-region allows for selecting in semantic units. Interesting mostly for
    =prog-modes=, but needs to be =required=, so function definition is available
    for make-repeatable-command.

    #+begin_src emacs-lisp
     (require 'expand-region)
   #+end_src

**** move-text

    Move lines up and down with =meta= and cursor keys.

    #+begin_src emacs-lisp
     (require 'move-text)
    #+end_src

**** smartparens

    Smarter handling of characters that come in pairs.

    #+begin_src emacs-lisp
      (require 'smartparens)
    #+end_src

**** back-button

    More convenient navigation through mark ring.

    #+begin_src emacs-lisp
     (require 'back-button)
    #+end_src

**** s

    @magnars' helpers for string manipulation.

    #+begin_src emacs-lisp
      (require 's)
    #+end_src

**** edit-server

    Connect from Chrome.

    #+begin_src emacs-lisp
      (require 'edit-server)
    #+end_src

**** anzu

     Show relative position in search results in mode-line.

     #+begin_src emacs-lisp
       (require 'anzu)
       (global-anzu-mode +1)
     #+end_src


*** autoload'ed

    Helpers to do rectangle insert inline and mark multiple occurrences of
    active region.

    #+begin_src emacs-lisp
      (require 'multiple-cursors-autoloads)
    #+end_src

    Email. With tags. Org-mode support for direct mail links. Yay.

    #+begin_src emacs-lisp
      (autoload 'notmuch "notmuch" t nil)
      (eval-after-load 'notmuch
        '(progn
           (require 'org-notmuch)))
    #+end_src

    Notifications.

    #+begin_src emacs-lisp
      (autoload 'todochiku-message "todochiku" t nil)
    #+end_src

    @gigamonkey's jumper mode.

    #+begin_src emacs-lisp
      (autoload 'jumper-mode "jumper" t nil)
      (autoload 'jumper-line-mode "jumper" t nil)
      (autoload 'jumper-update-defs-from-current-buffer "jumper-update" t nil)
    #+end_src

    Slime / tag like navigation for Emacs Lisp.

    #+begin_src emacs-lisp
      (autoload 'elisp-slime-nav-mode "elisp-slime-nav" nil t)
    #+end_src

    Light-weight session management.

    #+begin_src emacs-lisp
      (autoload 'session "session" nil t)
    #+end_src

    Simple auto-completion.

    #+begin_src emacs-lisp
      (autoload 'auto-complete "auto-complete" nil t)
      (autoload 'auto-complete-mode "auto-complete" nil t)
    #+end_src

    Highlight indentation and current indentation depth.

    #+begin_src emacs-lisp
      (autoload 'highlight-indentation-mode "highlight-indentation" nil t)
      (autoload 'highlight-indentation-current-column-mode "highlight-indentation" nil t)
    #+end_src

    Miscellaneous functionality.

    #+begin_src emacs-lisp
      (autoload 'zap-up-to-char "misc"
        "Kill up to, but t including ARGth occurrence of CHAR.

      \(fn arg char)"
        'interactive)
      (autoload 'copy-from-above-command "misc"
        "Copy characters from previous nonblank line, starting just above point.

      \(fn arg)"
        'interactive)
    #+end_src

    Version control / Magit

    #+begin_src emacs-lisp
     (autoload 'git-blame-mode "git-blame" "Minor mode for incremental blame for Git." t)
     (autoload 'magit-status "magit")
     (autoload 'rebase-mode "rebase-mode")
    #+end_src

    ENSIME for Scala should be loaded with scala-mode.

    #+begin_src emacs-lisp
      (autoload 'ensime "ensime" "Read config file for settings. Then start an inferior ENSIME server and connect to its Swank server." t)
      (autoload 'ensime-scala-mode-hook "ensime")
      (autoload 'ensime-connected-p "ensime")
      (eval-after-load 'scala-mode2
        '(when (ensime-connected-p) (add-hook 'scala-mode-hook 'ensime-scala-mode-hook)))
    #+end_src

    Automagically load php+-mode.

    #+begin_src emacs-lisp
      (autoload 'php+-mode "php+-mode" "Major mode for editing php code." t)
    #+end_src

    Grab org-links from Mac applications.

    #+begin_src emacs-lisp
      (autoload 'omlg-grab-link "org-mac-link-grabber" "" t)
    #+end_src

    Highlight TODO and friends in strings and comments.

    #+begin_src emacs-lisp
      (autoload 'fic-mode "fic-mode" "Fic mode -- minor mode for highlighting FIXME/TODO in comments" t)
    #+end_src

    Flymake configuration for JSON files.

    #+begin_src emacs-lisp
      (autoload 'flymake-json-load "flymake-json" "" t)
    #+end_src

* Text editing
** Helper

   Open a new line and indent its contents.

   #+begin_src emacs-lisp
     (defun c/open-new-line ()
       (interactive)
       (save-excursion
         (newline-and-indent)))
   #+end_src

   Helpers to duplicate line or region from @magnars [34].

   #+begin_src emacs-lisp
     (defun c/duplicate-current-line-or-region (arg)
       "Duplicates the current line or region ARG times.
     If there's no region, the current line will be duplicated."
       (interactive "p")
       (if (region-active-p)
           (let ((beg (region-beginning))
                 (end (region-end)))
             (c/duplicate-region arg beg end))
         (c/duplicate-current-line arg)))

     (defun c/duplicate-region (&optional num start end)
       "Duplicates the region bounded by START and END NUM times.
     If no START and END is provided, the current region-beginning and
     region-end is used."
       (interactive "p")
       (save-excursion
        (let* ((start (or start (region-beginning)))
               (end (or end (region-end)))
               (region (buffer-substring start end)))
          (goto-char end)
          (dotimes (i num)
            (insert region)))))

     (defun c/duplicate-current-line (&optional num)
       "Duplicate the current line NUM times."
       (interactive "p")
       (save-excursion
        (when (eq (point-at-eol) (point-max))
          (goto-char (point-max))
          (newline)
          (forward-char -1))
        (c/duplicate-region num (point-at-bol) (1+ (point-at-eol)))))
   #+end_src

   Beginning of line â¬Œ end of indentation helper.

   #+begin_src emacs-lisp
     (defun c/beginning-of-line-dwim-helper (back-to-indent-fun)
       (let ((start-point (point))
             bol-point)
         (save-excursion
           (beginning-of-line)
           (setq bol-point (point)))
         (if (eq start-point bol-point)
             (funcall back-to-indent-fun)
           (beginning-of-line))))
   #+end_src

   Toggle between =beginning-of-line= and =back-to-indentation=.

   #+begin_src emacs-lisp
     (defun c/beginning-of-line-dwim ()
       (interactive)
       (c/beginning-of-line-dwim-helper 'back-to-indentation))
   #+end_src

   Toggle between =beginning-of-line= and =eshell-bol=.

   #+begin_src emacs-lisp
     (defun c/eshell-beginning-of-line-dwim ()
       (interactive)
       (c/beginning-of-line-dwim-helper 'eshell-bol))
   #+end_src

   Change the number at point incrementally.

   #+begin_src emacs-lisp
     (defun c/change-num-at-point (fn)
       (let* ((num (string-to-number (thing-at-point 'word)))
              (bounds (bounds-of-thing-at-point 'word)))
         (save-excursion
           (goto-char (car bounds))
           (kill-word 1)
           (insert (number-to-string (funcall fn num 1))))))

     (defun c/inc-num-at-point ()
       (interactive)
       (c/change-num-at-point '+))

     (defun c/dec-num-at-point ()
       (interactive)
       (c/change-num-at-point '-))
   #+end_src

   Goto the matching paren of when point is looking at one.

   #+begin_src emacs-lisp
     (defun c/goto-match-paren (arg)
       "Go to the matching parenthesis if on parenthesis, otherwise insert
     the character typed."
       (interactive "p")
       (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
             ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
             (t                    (self-insert-command (or arg 1))) ))
   #+end_src

** Settings

   Don't use tabs by default. Override this in =.dir-locals.el=.

   #+begin_src emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+end_src

   Allow repeated popping of mark.

   #+begin_src emacs-lisp
     (setq set-mark-command-repeat-pop t)
   #+end_src

   Enable electric indenting.

   #+begin_src emacs-lisp
     (electric-indent-mode 0)
   #+end_src

   Disable electric pairing.

   #+begin_src emacs-lisp
     (electric-pair-mode -1)
   #+end_src

   Use the system's default browser.

   #+begin_src emacs-lisp
     (setq browse-url-browser-function 'browse-url-default-macosx-browser)
   #+end_src

   Don't disable narrowing.

   #+begin_src emacs-lisp
     (put 'narrow-to-region 'disabled nil)
     (put 'narrow-to-page 'disabled nil)
     (put 'narrow-to-defun 'disabled nil)
   #+end_src

   Show matching parentheses.

   #+begin_src emacs-lisp
     (show-paren-mode 1)
     (setq show-paren-style 'expression)
   #+end_src

   Restore the correct point in windows / buffers.

   #+begin_src emacs-lisp
     (global-pointback-mode 1)
   #+end_src

   Replace active region, rather than appending to it.

   #+begin_src emacs-lisp
     (delete-selection-mode 1)
   #+end_src

   Activate moving text via M-â†‘ and M-â†“

   #+begin_src emacs-lisp
     (move-text-default-bindings)
   #+end_src

** Whitespace

   Global whitespace settings. Override them in =.dir-local.el= or file
   variables.

   #+begin_src emacs-lisp
     (setq c/whitespace-style '(face tabs spaces trailing lines space-before-tab newline indentation::space empty space-after-tab space-mark tab-mark newline-mark))
     (setq-default whitespace-style c/whitespace-style)
   #+end_src

   Helper to decide whether we should clean up whitespace.

   #+begin_src emacs-lisp
     (defun c/should-cleanup-whitespace ()
       ;; If a variable with the same name is bound -- use it
       (if (boundp 'c/should-cleanup-whitespace)
           c/should-cleanup-whitespace
         ;; else default to:
         t))
   #+end_src

   Helper to guard the call to whitespace-cleanup.

   #+begin_src emacs-lisp
     (defun c/maybe-cleanup-whitespace ()
       (when (c/should-cleanup-whitespace)
         (whitespace-cleanup)))
   #+end_src

** Yasnippet

   #+begin_src emacs-lisp
     (require 'yasnippet)
     (add-to-list 'yas/snippet-dirs (expand-file-name "~/.emacs.d/snippets"))
     (yas/global-mode 1)
     (setq-default yas-prompt-functions
                   (delete 'yas-x-prompt yas-prompt-functions))
   #+end_src

** Smartparens

   Activate it!

   #+begin_src emacs-lisp
     (smartparens-global-mode 1)
   #+end_src

   Mode-specific customization of pairs.

   #+begin_src emacs-lisp
     (sp-local-pair '(emacs-lisp-mode magit-log-edit-mode message-mode org-mode) "'" nil :actions nil)
     (sp-local-pair '(scala-mode) "`" "`")
     (sp-local-pair '(scala-mode) "${" "}")
     (sp-local-pair '(scala-mode) "s\"" "\"")
     ;; not sure why we need to add this, doc says this is on by default
     ;; https://github.com/Fuco1/smartparens/wiki/Wrapping
     (sp-local-tag '(sgml-mode html-mode) "<" "<_>" "</_>" :transform 'sp-match-sgml-tags)
   #+end_src

** Auto-completion
*** auto-complete
**** Configuration

    Load the addition config helpers.

    #+begin_src emacs-lisp
      (eval-after-load 'auto-complete
        '(require 'auto-complete-config))
    #+end_src

    Global sources for candidates

    #+begin_src emacs-lisp
      (setq-default ac-sources '(
                                 ac-source-yasnippet
                                 ac-source-filename
                                 ac-source-words-in-same-mode-buffers
                                 ))
    #+end_src

    Show candidates right away

    #+begin_src emacs-lisp
      (setq ac-delay 0.0)
      (setq ac-auto-show-menu 0.0)
      (setq ac-show-menu-immediately-on-auto-complete t)
      (setq ac-quick-help-delay 1.0)
    #+end_src

    Don't use fuzzy matching

    #+begin_src emacs-lisp
      (setq ac-use-fuzzy nil)
    #+end_src

    Don't use dictionaries

    #+begin_src emacs-lisp
      (setq ac-dictionary-files nil)
    #+end_src

    Limit menu height

    #+begin_src emacs-lisp
      (setq ac-menu-height 3)
    #+end_src

    Start completion after x characters have been inserted

    #+begin_src emacs-lisp
      (setq ac-auto-start 2)
    #+end_src

    Need a work around for flyspell (some timer issues cause
    auto-complete to be delayed significantly.

    #+begin_src emacs-lisp
      (eval-after-load 'flyspell
        '(eval-after-load 'auto-complete
           '(ac-flyspell-workaround)))
    #+end_src

    Use the ac-menu-map.

    #+begin_src emacs-lisp
      (setq ac-use-menu-map t)
    #+end_src

**** Candidates

     Helper to collect possible candidates from Jumper definitions
     based on a given prefix.

     #+begin_src emacs-lisp
       (defun c/jumper-candidates (prefix)
         (let* ((jumper-file (jumper-find-jumper-file)))
           (when jumper-file
             (let ((jumper-file-buffer (find-file-noselect jumper-file)))
               (with-temp-buffer
                 (insert-buffer-substring jumper-file-buffer)
                 (goto-char (point-min))
                 (keep-lines (concat "^" prefix ".*[[:digit:]]+$"))
                 (goto-char (point-min))
                 (while (not (eobp))
                   (re-search-forward "^\\([^\t]+\\).+$")
                   (replace-match "\\1" nil nil)
                   (forward-line 1))
                 (split-string (buffer-string)))))))
     #+end_src

     Define a source for auto-complete based on Jumper definitions.

     #+begin_src emacs-lisp
       (eval-after-load 'auto-complete
          '(progn
             (ac-define-source jumper
                               '((depends jumper)
                                 (candidates . (c/jumper-candidates ac-prefix))
                                 (symbol . "s")
                                 (cache)))))
     #+end_src

** isearch

   Zap (active region) while searching via isearch [4].

   #+begin_src emacs-lisp
     (defun zap-to-isearch (rbeg rend)
       "Kill the region between the mark and the closest portion of
     the isearch match string. The behaviour is meant to be analogous
     to zap-to-char; let's call it zap-to-isearch. The deleted region
     does not include the isearch word. This is meant to be bound only
     in isearch mode.  The point of this function is that oftentimes
     you want to delete some portion of text, one end of which happens
     to be an active isearch word. The observation to make is that if
     you use isearch a lot to move the cursor around (as you should,
     it is much more efficient than using the arrows), it happens a
     lot that you could just delete the active region between the mark
     and the point, not include the isearch word."
       (interactive "r")
       (when (not mark-active)
         (error "Mark is not active"))
       (let* ((isearch-bounds (list isearch-other-end (point)))
              (ismin (apply 'min isearch-bounds))
              (ismax (apply 'max isearch-bounds))
              )
         (if (< (mark) ismin)
             (kill-region (mark) ismin)
           (if (> (mark) ismax)
               (kill-region ismax (mark))
             (error "Internal error in isearch kill function.")))
         (isearch-exit)
         ))
   #+end_src

   Exit isearch, but at the other end of the match [5]. For example:

   #+BEGIN_QUOTE
   Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam
   nonummy nibh euismod tincidunt ut [laoreet] dolore magna aliquam erat
   volutpat.
   #+END_QUOTE

   Searching for =laoreet= and hitting =C-RET= will leave point at =[= while
   hitting =RET= will leave point at =]=.

   #+begin_src emacs-lisp
     (defun isearch-exit-other-end (rbeg rend)
       "Exit isearch, but at the other end of the search string.
     This is useful when followed by an immediate kill."
       (interactive "r")
       (isearch-exit)
       (goto-char isearch-other-end))
   #+end_src

   Yank current symbol as regex, rather than word (=C-w=) [6].

   #+begin_src emacs-lisp
     (defun isearch-yank-regexp (regexp)
       "Pull REGEXP into search regexp."
       (let ((isearch-regexp nil)) ;; Dynamic binding of global.
         (isearch-yank-string regexp))
       (if (not isearch-regexp)
           (isearch-toggle-regexp))
       (isearch-search-and-update))
     (defun isearch-yank-symbol ()
       "Put symbol at current point into search string."
       (interactive)
       (let ((sym (find-tag-default)))
         (if (null sym)
             (message "No symbol at point")
           (isearch-yank-regexp
            (concat "\\_<" (regexp-quote sym) "\\_>")))))
   #+end_src

** grep

   More files and folders that can be ignored.

   #+begin_src emacs-lisp
     (dolist (filename '("GPATH" "GRTAGS" "GTAGS"))
             (add-to-list 'grep-find-ignored-files filename))
     (dolist (dirname '("env" ".ensime_lucene" "target"))
             (add-to-list 'grep-find-ignored-directories dirname))
   #+end_src

   Use GNU find an Mac OS (via homebrew)

   #+begin_src emacs-lisp
     (when mac-p
       (setq-default find-program "find")
       (grep-apply-setting 'grep-find-command "find . -type f -exec grep -nH -e  {} +")
       (grep-apply-setting 'grep-find-template "find . <X> -type f <F> -exec grep <C> -nH -e <R> {} +"))
   #+end_src

** ispell

   Use aspell on Mac OS.

   #+begin_src emacs-lisp
     (when (executable-find "aspell")
       (setq ispell-program-name "aspell"
             ispell-extra-args '("--sug-mode=ultra")))
   #+end_src

   Wrapper to turn on flyspell.

   #+begin_src emacs-lisp
     (defun c/enable-flyspell ()
       (flyspell-mode 1))
     (defun c/enable-flyspell-prog ()
       (flyspell-prog-mode))
   #+end_src

   Spell-check emails and plain text files.

   #+begin_src emacs-lisp
     (add-hook 'text-mode-hook 'c/enable-flyspell)
     (add-hook 'message-mode-hook 'c/enable-flyspell)
     (add-hook 'magit-log-edit-mode-hook 'c/enable-flyspell)
   #+end_src

** back-button

   Easier navigation of global and local mark ring.

   #+begin_src emacs-lisp
     (back-button-mode 1)
   #+end_src

** diff

    Highlight uncommitted diffs in left fringe, always.

    #+begin_src emacs-lisp
      (global-diff-hl-mode)
    #+end_src

** ediff

   Split the diff windows horizontally, rather than vertically.

   #+begin_src emacs-lisp
     (setq ediff-split-window-function 'split-window-horizontally)
   #+end_src

   Don't use multiple frames. One is confusing enough.

   #+begin_src emacs-lisp
     (setq ediff-window-setup-function 'ediff-setup-windows-plain)
   #+end_src

** re-builder

   Switch to "string" syntax by default, which can be used for
   replace-regexp. Switch back to "read" for Emacs Lisp regular expressions.

   #+begin_src emacs-lisp
     (setq reb-re-syntax 'string)
   #+end_src

   Helper to quickly jump to replace-regexp [23].

   #+begin_src emacs-lisp
     (defun c/reb-query-replace (to-string)
       "Replace current RE from point with `query-replace-regexp'."
       (interactive
        (progn (barf-if-buffer-read-only)
               (list (query-replace-read-to (reb-target-binding reb-regexp)
                                            "Query replace"  t))))
       (with-current-buffer reb-target-buffer
         (query-replace-regexp (reb-target-binding reb-regexp) to-string)))
   #+end_src

** Language helpers

   Fast switch to German postfix input method.

   #+begin_src emacs-lisp
     (defun c/set-german-postfix-input-method ()
       (interactive)
       (set-input-method 'german-postfix))
   #+end_src


   Fast switch to German dictionary for spell-checking.

   #+begin_src emacs-lisp
     (defun c/set-german-dictionary ()
       (interactive)
       (ispell-change-dictionary "german"))
   #+end_src

   Set the environment for editing a buffer with German text.

   #+begin_src emacs-lisp
     (defun c/set-german-environment ()
       (interactive)
       (c/set-german-postfix-input-method)
       (c/set-german-dictionary))
   #+end_src

** Pretty symbols

   Mostly duplicating default settings, only little fine-tuning of pretty symbols.

   #+begin_src emacs-lisp
     (setq  pretty-symbol-patterns
            '((?Î» lambda "\\<lambda\\>" (emacs-lisp-mode inferior-lisp-mode lisp-mode scheme-mode python-mode inferior-python-mode))
              (?Î» lambda "\\<function\\>" (js-mode js2-mode))
              (?â†‘ lambda "\\<return\\>" (js-mode js2-mode))
              (?âˆ˜ lambda "\\<map\\>" (scala-mode scala2-mode))
              (?âˆ— lambda "\\<flatMap\\>" (scala-mode scala2-mode))
              (8800 relational "!=" (c-mode c++-mode go-mode java-mode js-mode perl-mode cperl-mode ruby-mode python-mode inferior-python-mode))
              (8800 relational "/=" (emacs-lisp-mode inferior-lisp-mode lisp-mode scheme-mode))
              (8805 relational ">=" (c-mode c++-mode go-mode java-mode js-mode perl-mode cperl-mode ruby-mode python-mode inferior-python-mode emacs-lisp-mode inferior-lisp-mode lisp-mode scheme-mode))
              (8804 relational "<=" (c-mode c++-mode go-mode java-mode js-mode perl-mode cperl-mode ruby-mode python-mode inferior-python-mode emacs-lisp-mode inferior-lisp-mode lisp-mode scheme-mode))
              (8743 logical "&&" (c-mode c++-mode go-mode java-mode js-mode perl-mode cperl-mode ruby-mode python-mode inferior-python-mode))
              (8743 logical "\\<and\\>" (emacs-lisp-mode inferior-lisp-mode lisp-mode scheme-mode))
              (8744 logical "||" (c-mode c++-mode go-mode java-mode js-mode perl-mode cperl-mode ruby-mode python-mode inferior-python-mode))
              (8744 logical "\\<or\\>" (emacs-lisp-mode inferior-lisp-mode lisp-mode scheme-mode))
              (172 logical "\\<not\\>" (emacs-lisp-mode inferior-lisp-mode lisp-mode scheme-mode))))
   #+end_src

* Programming

  Basic configuration that is shared among all programming modes.

  #+begin_src emacs-lisp
    (defun c/prog-mode-initialization ()
      (pretty-symbols-mode 1)
      (hl-line-mode 1)
      (fic-mode 1)
      (setq show-trailing-whitespace t)
      (auto-complete-mode 1)
      (smartscan-mode 1)
      (add-hook 'before-save-hook 'c/maybe-cleanup-whitespace nil 'local))
    (add-hook 'prog-mode-hook 'c/prog-mode-initialization)
  #+end_src

  Helper to enable paredit in non-lisp function [33].

  #+begin_src emacs-lisp
    (defun c/paredit-nonlisp ()
      "Turn on paredit mode for non-lisps."
      (interactive)
      (set (make-local-variable 'paredit-space-for-delimiter-predicates)
           '((lambda (endp delimiter) nil)))
      (paredit-mode 1))
  #+end_src

** CEDET

   Configure semantic's default submodes.

   #+begin_src emacs-lisp :tangle no
     (setq semantic-default-submodes
           '(
             global-semantic-idle-scheduler-mode
             global-semanticdb-minor-mode
             global-semantic-idle-completions-mode
             ))
   #+end_src

** Compiling

   Settings for compilation mode.

   #+begin_src emacs-lisp
     (setq
      compilation-scroll-output t
      compilation-message-face nil  ;; don't underline
      )
   #+end_src

   Change the buffer name to me a bit more informative and uniquish.

   #+begin_src emacs-lisp
     (defun c/compilation-buffer-name-function (mode-name)
       ;; `thisdir' and `command' are bound in calling function `compilation-start'
       (let ((dir (file-name-nondirectory (directory-file-name thisdir))))
         (if (string-equal "grep" mode-name)
             (let ((pattern (progn
                              (string-match "find .+grep.+-nH -e \\(.+\\) {}.*" command)
                              (match-string 1 command))))
               (format "*%s> grep [%s]" dir pattern))
           (format "*%s> %s*"
                   dir
                   command))))
     (setq compilation-buffer-name-function 'c/compilation-buffer-name-function)
   #+end_src

   Fix regular expression for maven (3) output.

   #+begin_src emacs-lisp
     (add-to-list 'compilation-error-regexp-alist-alist
                  ;; Adds the "ERROR " prefix
                  '(maven "\\[ERROR\\] \\([0-9]*[^0-9\n]\\(?:[^\n :]\\| [^-/\n]\\|:[^ \n]\\)*?\\):\\[\\([0-9]+\\),\\([0-9]+\\)\\]" 1 2 3))
   #+end_src

   Handle escape codes in compilation output.

   #+begin_src emacs-lisp
     (defun c/apply-ansi-colors-to-region-in-compilation-buffer ()
       (ansi-color-apply-on-region compilation-filter-start (point)))
     (add-hook 'compilation-filter-hook 'c/apply-ansi-colors-to-region-in-compilation-buffer)
   #+end_src

** CSS

   Configuration per-buffer.

   #+begin_src emacs-lisp
     (defun c/css-mode-initialization ()
       (rainbow-mode 1))
     (add-hook 'css-mode-hook 'c/prog-mode-initialization)
     (add-hook 'css-mode-hook 'c/css-mode-initialization)
   #+end_src

** GNU Global

   Helpers to update the GNU Global database incrementally based on definitions
   in the current file, based on tips in the EmacsWiki [20].

   #+begin_src emacs-lisp
     (defun c/gtags-update-single (filename gtags-root)
       "Update GNU Global database in GTAGS-ROOT for changes in file named FILENAME."
       (interactive)
       (start-process "update-gtags" "update-gtags"
                      "bash" "-c" (concat "cd " gtags-root " ; gtags -i --single-update " filename )))

     (defun c/gtags-update-current-file ()
       "Updates a GNU Global database based on the definitions in the current file."
       (interactive)
       (let* ((gtags-root (gtags-get-rootpath))
              (filename (buffer-file-name (current-buffer))))
         (c/gtags-update-single filename gtags-root)
         (message "Gtags updated for %s" filename)))

     (defun c/gtags-update-hook ()
       "Optionally updates the GNU Global database incrementally, if applicable."
       (when (and (boundp 'gtags-mode) gtags-mode)
         (when (gtags-get-rootpath)
           (c/gtags-update-current-file))))
   #+end_src

   Use helm-gtags to access the GNU Global database.

   #+begin_src emacs-lisp
     ;; only load helm-gtags, if we have loaded helm and gtags individually.
     (eval-after-load 'helm '(eval-after-load 'gtags '(progn (require 'helm-gtags))))
   #+end_src

   Add a hook to update the GNU Global database upon saving a file.

   #+begin_src emacs-lisp
     (defun c/initialize-gtags-mode ()
       (add-hook 'after-save-hook 'c/gtags-update-hook))
     (add-hook 'gtags-mode-hook 'c/initialize-gtags-mode)
   #+end_src

** Flymake

   #+begin_src emacs-lisp
     (eval-after-load 'flymake
       '(progn
          (require 'flymake-jshint)
          (require 'flymake-cursor)
          ;; don't want this on Mac OS X -- http://koansys.com/tech/emacs-hangs-on-flymake-under-os-x
          (setq flymake-gui-warnings-enabled nil)
          (setq flymake-start-syntax-check-on-newline t)
          (setq flymake-compilation-prevents-syntax-check nil)
          (setq flymake-run-in-place nil)  ;; I want my copies in the system temp dir.
          ))
   #+end_src

** Javascript

   Use =js2-mode= for editing Javascript.

   #+begin_src emacs-lisp
     (autoload 'js2-mode "js2-mode" t nil)
     (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
   #+end_src

   Buffer-specific configuration.

   #+begin_src emacs-lisp
     (defun c/js2-mode-initialization ()
       (subword-mode 1)
       (rainbow-mode 1)
       (flymake-mode 1)
       (jumper-mode 1)
       (add-hook 'before-save-hook 'jumper-update-defs-from-current-buffer nil 'local)
       (setq js2-use-font-lock-faces t)
       (setq js2-mode-must-byte-compile nil)
       (setq js2-basic-offset 4)
       (setq js2-indent-on-enter-key t)
       (setq js2-auto-indent-p t)
       (setq js2-enter-indents-newline t)
       (setq js2-bounce-indent-p nil)
       (setq js2-auto-insert-catch-block t)
       (setq js2-cleanup-whitespace nil)
       (setq js2-global-externs '(Ext console))
       (setq js2-highlight-level 3)
       (setq js2-mirror-mode t) ; conflicts with autopair
       (setq js2-mode-escape-quotes t) ; t disables
       (setq js2-mode-squeeze-spaces t)
       (setq js2-pretty-multiline-decl-indentation-p t)
       (setq js2-consistent-level-indent-inner-bracket-p t))

     (eval-after-load 'js2-mode
       '(progn
          (add-hook 'js2-mode-hook 'c/js2-mode-initialization)))
   #+end_src

** JSON

   #+begin_src emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.json\\'" . json-mode))
     (add-hook 'json-mode-hook 'flymake-json-load)
   #+end_src

   Helper to beautify JSON via jsonlint.

   #+begin_src emacs-lisp
     (defun c/beautify-json-with-jsonlint ()
       (interactive)
       (when buffer-file-name
         (let* ((err-regex "line [0-9]+, col [0-9]+, found") ;; stolen from flymake-json
                (old-contents (buffer-substring (point-min) (point-max)))
                (new-contents (with-temp-buffer
                                (insert old-contents)
                                (shell-command-on-region (point-min) (point-max) "jsonlint -c" nil t)
                                (goto-char (point-min))
                                (if (looking-at-p err-regex) (progn (message "Given JSON is not well-formed.") nil)
                                  (buffer-substring (point-min) (point-max))))))
           (when new-contents
             (let ((old-point (point)))
               (delete-region (point-min) (point-max))
               (insert new-contents)
               (goto-char old-point))))))
   #+end_src

   Helper to convert contents of buffer to a JSON string.

   #+begin_src emacs-lisp
     (defun c/escape-to-json-string ()
       (interactive)
       (goto-char (point-min))
       (save-excursion
         (while (re-search-forward "\"" nil t)
           (replace-match "\\\"" nil t)))
       (save-excursion
         (while (re-search-forward "\n" nil t)
           (replace-match "\\n" nil t))))
   #+end_src

   Buffer-specific customization.

   #+begin_src emacs-lisp
     (defun c/json-mode-initialization ()
       (setq tab-width 2)
       (subword-mode 1)
       (make-local-variable 'before-save-hook)
       (add-hook 'before-save-hook 'c/beautify-json-with-jsonlint))
     (add-hook 'json-mode-hook 'c/json-mode-initialization)
   #+end_src

** CoffeeScript

   Load flymake for coffeescript.

   #+begin_src emacs-lisp
     (eval-after-load 'coffee-mode
       '(eval-after-load 'flymake
          '(progn
             (require 'flymake-coffee)
             (setq flymake-coffee-coffeelint-configuration-file (expand-file-name "~/.coffeelint.json")))))
   #+end_src

   Hook coffee-mode into prog-mode specialization.

   #+begin_src emacs-lisp
     (defun c/coffee-mode-initialization ()
       (setq tab-width 2)
       (setq coffee-tab-width 2)
       (subword-mode 1)
       (flymake-coffee-load))
     (add-hook 'coffee-mode-hook 'c/prog-mode-initialization)
     (add-hook 'coffee-mode-hook 'c/coffee-mode-initialization)
   #+end_src

** Lisp
*** Emacs Lisp

    Configuration per-buffer.

    #+begin_src emacs-lisp
      (defun c/emacs-lisp-mode-initialization ()
        (setq tab-width 8)
        (eldoc-mode 1)
        (paredit-mode 1)
        (rainbow-delimiters-mode)
        (elisp-slime-nav-mode 1)
        (setq ac-sources (append '(
                                   ac-source-features
                                   ac-source-functions
                                   ac-source-variables
                                   ac-source-symbols
                                   )
                                 ac-sources)))

      (add-hook 'emacs-lisp-mode-hook 'c/emacs-lisp-mode-initialization)
    #+end_src

*** Common Lisp

    Basic slime setup.

    #+begin_src emacs-lisp
      (setq inferior-lisp-program "/usr/local/bin/sbcl")
      (setq slime-lisp-implementations '((sbcl ("sbcl"))))
      (require 'slime-autoloads)
      (slime-setup '(slime-fancy))
    #+end_src

** Makefile

   Configuration per buffer.

   #+begin_src emacs-lisp
     (defun c/makefile-mode-initialization ()
       (jumper-mode 1)
       (add-hook 'before-save-hook 'jumper-update-defs-from-current-buffer nil 'local))
     (add-hook 'makefile-mode-hook 'c/makefile-mode-initialization)
   #+end_src

** Python

   Basic system-wide configuration for @fgallina's flying circus. Taken
   right from the library's documentation header.

   #+begin_src emacs-lisp
     (eval-after-load "python"
       '(progn
          (setq python-shell-interpreter "ipython"
                python-shell-interpreter-args ""
                python-shell-prompt-regexp "In \\[[0-9]+\\]: "
                python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
                python-shell-completion-setup-code
                "from IPython.core.completerlib import module_completion"
                python-shell-completion-module-string-code
                "';'.join(module_completion('''%s'''))\n"
                python-shell-completion-string-code
                "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")
          ))
   #+end_src

   Special configuration for flymake

   #+begin_src emacs-lisp
     (defun c/flymake-python-init ()
       (let* ((temp-file (flymake-init-create-temp-buffer-copy
                          'flymake-create-temp-intemp))
              (local-file (file-relative-name
                           temp-file
                           (file-name-directory buffer-file-name))))
         (list "flake8"  (list local-file))))
     (eval-after-load 'flymake
       '(progn
          (add-to-list 'flymake-allowed-file-name-masks
                       (list "\\.py\\'" 'c/flymake-python-init))))
   #+end_src

   Helper to split arguments across lines.

   #+begin_src emacs-lisp
     (defun c/split-python-args-across-lines ()
       (interactive)
       (save-excursion
         (beginning-of-line)
         (re-search-forward "(" (point-at-eol) t)
         (newline)
         (while (re-search-forward "," (point-at-eol) t)
           (newline))
         (re-search-forward ")" (point-at-eol) t)
         (goto-char (1- (point)))
         (insert ",")
         (newline)
         ))
   #+end_src

   Configuration per-buffer.

   #+begin_src emacs-lisp
     (defun c/python-mode-initialization ()
       (subword-mode 1)
       (jumper-mode 1)
       (setq ac-sources (cons 'ac-source-jumper ac-sources))
       (when buffer-file-name (flymake-mode 1))
       (set-fill-column 79)
       (add-hook 'before-save-hook 'jumper-update-defs-from-current-buffer nil 'local))
     (add-hook 'python-mode-hook 'c/python-mode-initialization)
   #+end_src

*** Helper

    Run an individual test, by passing a restrictive predicate to
    nosetest. Searches from =point= backward to find test method and
    surrounding class name.

    #+begin_src emacs-lisp
      (defvar *c/last-python-test-compile-command* nil
        "Is set by C/RUN-PYTHON-TEST so that C/RERUN-PYTHON-TEST knows
        what to do.")
      (defun c/run-python-test ()
        (interactive)
        (let* ((file-name buffer-file-name)
               (project-root (c/guess-project-root))
               (class-name (c/find-backward "class \\(.+\\)("))
               (fun-name (c/find-backward "def \\(test.+\\)("))
               (cmd (format
                     "cd %s && TESTSEL=%s:%s.%s make tests"
                     project-root
                     file-name
                     class-name
                     fun-name)))
          (setq *c/last-python-test-compile-command* cmd)
          (let ((compilation-buffer-name-function (lambda (x) "*tests*")))
            (compile cmd t))))
      (defun c/run-python-test-class ()
        (interactive)
        (let* ((file-name buffer-file-name)
               (project-root (c/guess-project-root))
               (class-name (c/find-backward "class \\(.+\\)("))
               (cmd (format
                     "cd %s && TESTSEL=%s:%s make tests"
                     project-root
                     file-name
                     class-name)))
          (setq *c/last-python-test-compile-command* cmd)
          (let ((compilation-buffer-name-function (lambda (x) "*tests*")))
            (compile cmd t))))
      (defun c/run-python-tests-in-project ()
        (interactive)
        (let* ((project-root (c/guess-project-root))
               (cmd (format "cd %s && make tests" project-root)))
          (setq *c/last-python-test-compile-command* cmd)
          (let ((compilation-buffer-name-function (lambda (x) "*tests*")))
            (compile cmd t))))
      (defun c/rerun-python-test ()
        (interactive)
        (if *c/last-python-test-compile-command*
            (let ((compilation-buffer-name-function (lambda (x) "*tests*")))
              (compile *c/last-python-test-compile-command* t))))
    #+end_src

    Insert statements to trigger a breakpoint in ipdb.

    #+begin_src emacs-lisp
      (defun c/python-insert-ipdb-breakpoint ()
        (interactive)
        (beginning-of-line)
        (insert "import ipdb; ipdb.set_trace()")
        (newline-and-indent))
    #+end_src

** SQL

   Send the terminator automatically

   #+begin_src emacs-lisp
     (eval-after-load 'sql
       '(setq sql-send-terminator t))
   #+end_src

** Java

   Set environment variables specific to Java.

   #+begin_src emacs-lisp
     (when mac-p
       (setenv "JAVA_HOME" "/Library/Java/JavaVirtualMachines/jdk1.7.0_25.jdk/Contents/Home"))
     (when linux-p
       (setenv "JAVA_HOME" "/usr/lib/jvm/java-7-openjdk-i386/jre"))
   #+end_src

   Special configuration for flymake

   #+begin_src emacs-lisp
     (defun c/flymake-java-init ()
       (let* ((test-class-path (expand-file-name ".test_classpath" (c/guess-project-root)))
              (class-path (if (file-exists-p test-class-path) (c/file-contents test-class-path) ".")))
         (list "/usr/bin/javac" (list "-classpath" class-path "-Xlint:all"  buffer-file-name))))

     (eval-after-load 'flymake
       '(progn
          (add-to-list 'flymake-allowed-file-name-masks
                       (list "\\.java\\'" 'c/flymake-java-init))))
   #+end_src

   Tell CEDET's semanticdb-javap and where to find information about global
   classes.

   #+begin_src emacs-lisp :tangle no
     (setq semanticdb-javap-classpath '())
     (when linux-p
       (add-to-list 'semanticdb-javap-classpath "/usr/lib/jvm/java-7-openjdk-i386/jre"))
     (when mac-p
       (add-to-list 'semanticdb-javap-classpath "/System/Library/Frameworks/JavaVM.framework/Versions/1.6/Classes/classes.jar"))
   #+end_src

   Configuration per-buffer.

   #+begin_src emacs-lisp
     (defun c/java-mode-initialization ()
       (subword-mode 1)
       (gtags-mode 1)
       (c-set-offset 'arglist-intro '+)  ;; fixes indenting of arguments on the next line.
       (c-set-offset 'arglist-close '0)
       (c-set-offset 'substatement-open '0))
     (add-hook 'java-mode-hook 'c/java-mode-initialization)
   #+end_src

*** Tests

    Assumes that it is only run only maven projects.

**** Helpers

     Run an individual test, by passing a restrictive predicate to
     nosetest. Searches from =point= backward to find test method and
     surrounding class name.

     #+begin_src emacs-lisp
       (defvar *c/last-java-test-compile-command* nil
         "Is set by C/RUN-JAVA-TEST so that C/RERUN-JAVA-TEST knows
         what to do.")
       (defun c/run-java-test (arg)
         (interactive "P")
         (let* ((project-root (c/guess-project-root))
                (class-name (c/find-backward "public class \\(.+Test\\)"))
                (fun-name (c/find-backward "public void \\(test.+\\)("))
                (cmd (format
                      "cd %s && JAVA_HOME=%s mvn %s -Dtest=%s#%s test"
                      project-root
                      (getenv "JAVA_HOME")
                      (if arg "-X" "")
                      class-name
                      fun-name)))
           (setq *c/last-java-test-compile-command* cmd)
           (let ((compilation-buffer-name-function (lambda (x) "*tests*")))
             (compile cmd t))))
       (defun c/run-java-test-class ()
         (interactive)
         (let* ((project-root (c/guess-project-root))
                (class-name (c/find-backward "public class \\(.+Test\\)"))
                (cmd (format
                      "cd %s && JAVA_HOME=%s mvn -Dtest=%s test"
                      project-root
                      (getenv "JAVA_HOME")
                      class-name)))
           (setq *c/last-java-test-compile-command* cmd)
           (let ((compilation-buffer-name-function (lambda (x) "*tests*")))
             (compile cmd t))))
       (defun c/run-java-tests-in-project ()
         (interactive)
         (let* ((project-root (c/guess-project-root))
                (cmd (format
                      "cd %s && JAVA_HOME=%s mvn test"
                      project-root
                      (getenv "JAVA_HOME"))))
           (setq *c/last-java-test-compile-command* cmd)
           (let ((compilation-buffer-name-function (lambda (x) "*tests*")))
             (compile cmd t))))
       (defun c/rerun-java-test ()
         (interactive)
         (if *c/last-java-test-compile-command*
             (let ((compilation-buffer-name-function (lambda (x) "*tests*")))
               (compile *c/last-java-test-compile-command* t))))
     #+end_src

** Scala

   Let's use a cooler major-mode.

    #+begin_src emacs-lisp
      (add-to-list 'auto-mode-alist '("\\.scala\\'" . scala-mode))
    #+end_src

   Tell ENSIME to behave and not override my auto-complete settings.

   #+begin_src emacs-lisp
     (setq ensime-ac-override-settings nil)
   #+end_src

   Hook to call scalariform-daemon for formatting.

   #+begin_src emacs-lisp
     (defun c/scalariform-daemon-format-file ()
       (when (and (boundp 'c/scalariform-preferences-file)
                  c/scalariform-preferences-file)
         (require 'request)
         (request
          "http://localhost:8080/format"
          :params `((fileName . ,buffer-file-name)
                    (preferencesFile . ,c/scalariform-preferences-file)))))
   #+end_src

   Configuration per-buffer.

   #+begin_src emacs-lisp
     (defun c/scala-mode-initialization ()
       (rainbow-delimiters-mode)
       (subword-mode 1)
       (setq tab-width 2)
       (c/paredit-nonlisp)
       (linum-mode 1)
       (add-hook 'after-save-hook 'c/scalariform-daemon-format-file nil 'make-it-local))
     (add-hook 'scala-mode-hook 'c/scala-mode-initialization)
   #+end_src

   Helper to fall back to expand-region, when ENSIME isn't connected.

   #+begin_src emacs-lisp
     (defun c/maybe-ensime-expand-selection-command ()
       (interactive)
       (if (ensime-connected-p)
           (ensime-expand-selection-command)
         (c/expand-region-command-group)))
   #+end_src

   Helpers to send actions to SBT process.

   #+begin_src emacs-lisp
     (defvar c/ensime-last-sbt-command nil "Last command that was sent to SBT process")
     (defun c/ensime-send-sbt-command (command)
       "Send COMMAND as an action to the associated SBT process."
       (interactive "sCommand: ")
       (setq c/ensime-last-sbt-command command)
       (ensime-sbt-action c/ensime-last-sbt-command))

     (defun c/ensime-resend-last-sbt-command ()
       "Resend commands that was last sent to associated SBT process."
       (interactive)
       (if c/ensime-last-sbt-command
           (ensime-sbt-action  c/ensime-last-sbt-command)
         (message "Last SBT was not set, don't know what to send.")))

     (defun c/ensime-run-current-test-suite ()
       "Find the next class name backwards and send a test-only
     command to SBT process."
       (interactive)
       (let* ((class-name (c/find-backward "^class \\(.+?\\)\\( \\|(\\)"))
              (sbt-action (format "test-only *%s" class-name)))
         (c/ensime-send-sbt-command sbt-action)))
   #+end_src

   Helpers to generate ensime configuration and add my sources.

   #+begin_src emacs-lisp
     (defun c/read-file (file-name)
       (let ((buf (find-file-read-only file-name))
             (src (buffer-substring-no-properties (point-min) (point-max))))
         (kill-buffer buf)
         (condition-case error
             (read src))))

     (defun c/ensime-add-sources (config-file)
       (interactive)
       (let* ((current-config (c/read-file config-file))
              (sub-projects (plist-get current-config :subprojects))
              (source-dirs (with-temp-buffer
                             (insert-file-contents fg/scala-sources)
                             (split-string (buffer-string) "\n" t))))
         (-each sub-projects
                (lambda (sub-project)
                  (plist-put sub-project :reference-source-roots source-dirs)))
         (with-temp-file config-file
           (insert (format "%S" current-config)))))

     (defun eshell/ensime-add-sources ()
       (c/ensime-add-sources (expand-file-name ".ensime")))
   #+end_src

** PHP

   Let's use php+.

   #+begin_src emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.php$" . php+-mode))
     (add-to-list 'auto-mode-alist '("\\.inc$" . php+-mode))
   #+end_src

   Tell php+-mode to leave my bindings alone.

   #+begin_src emacs-lisp
     (eval-after-load 'php+-mode
       '(setq-default php+-mode-map (make-sparse-keymap)))
   #+end_src

   Configuration per-buffer.

   #+begin_src emacs-lisp
     (defun c/php-mode-initialization ()
       (gtags-mode 1)
       (setq ac-sources (cons 'ac-source-gtags ac-sources)))
     (add-hook 'php+-mode-hook 'c/php-mode-initialization)
   #+end_src

** XML

   Configuration per-buffer.

   #+begin_src emacs-lisp
     (add-hook 'nxml-mode-hook 'c/prog-mode-initialization)
   #+end_src

* Key Bindings
** Helpers

   Helper [3] to make any command repeatable analogously to =C-x e e e=

   #+begin_src emacs-lisp
     (defun make-repeatable-command (cmd)
       "Returns a new command that is a repeatable version of CMD.
     The new command is named CMD-repeat.  CMD should be a quoted
     command.

     This allows you to bind the command to a compound keystroke and
     repeat it with just the final key.  For example:

             (global-set-key (kbd \"C-c a\") (make-repeatable-command 'foo))

     will create a new command called foo-repeat.  Typing C-c a will
     just invoke foo.  Typing C-c a a a will invoke foo three times,
     and so on."
       (fset (intern (concat (symbol-name cmd) "-repeat"))
             `(lambda ,(help-function-arglist cmd) ;; arg list
                ,(format "A repeatable version of `%s'." (symbol-name cmd)) ;; doc string
                ,(interactive-form cmd) ;; interactive form
                ;; see also repeat-message-function
                (setq last-repeatable-command ',cmd)
                (repeat nil)))
       (intern (concat (symbol-name cmd) "-repeat")))
   #+end_src

** Dvorak

   Swap =C-t= and =C-x=, so it's easier to type on Dvorak layout

   #+begin_src emacs-lisp
     (keyboard-translate ?\C-t ?\C-x)
     (keyboard-translate ?\C-x ?\C-t)
   #+end_src

** Jumping

   Use helm sources for fast jumping to buffers or files.

   #+begin_src emacs-lisp
   (define-key global-map (kbd "C-.") 'c/helm-jump)
   #+end_src

   Jump to previous marks to go backwards.

   #+begin_src emacs-lisp
     (defun c/pop-local-mark () (interactive) (set-mark-command 1))
     (define-key global-map (kbd "C-,") 'c/pop-local-mark)
   #+end_src

   Beginning and end of buffer.

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-c (") 'beginning-of-buffer)
     (define-key global-map (kbd "C-c )") 'end-of-buffer)
   #+end_src

** C-c Map

   Start different kinds of shells

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-c se") 'eshell)
     (define-key global-map (kbd "C-c sl") 'slime)
     (define-key global-map (kbd "C-c sp") 'python-shell-switch-to-shell)
     (define-key global-map (kbd "C-c ss") 'shell)
   #+end_src

   Enable / disable modes

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-c ma") 'auto-complete-mode)
     (define-key global-map (kbd "C-c mee") 'erc)
     (define-key global-map (kbd "C-c meb") 'c/erc-bitlbee)
     (define-key global-map (kbd "C-c mf") 'flymake-mode)
     (define-key global-map (kbd "C-c mgg") 'ag-project-at-point)
     (define-key global-map (kbd "C-c mgG") 'ag)
     (define-key global-map (kbd "C-c mi") 'highlight-indentation-mode)
     (define-key global-map (kbd "C-c mm") 'magit-status)
     (define-key global-map (kbd "C-c mn") 'gnus)
     (define-key global-map (kbd "C-c mr") 'auto-revert-mode)
     (define-key global-map (kbd "C-c ms") 'sql-mysql)
     (define-key global-map (kbd "C-c mw") 'whitespace-mode)
     (define-key global-map (kbd "C-c mj") 'jumper-line-mode)
   #+end_src

   Helpers to toggle the contents of the mode-line for less noise.

   #+begin_src emacs-lisp
     (defun c/hide-mode-line ()
       "Clears the mode-line format string and decreases the face height."
       (interactive)
       (setq-default mode-line-format "")
       (set-face-attribute 'mode-line nil :height 0.1))

     (defun c/show-mode-line ()
       "Restores the mode-line format string and face height to the default settings."
       (interactive)
       (setq-default mode-line-format c/mode-line-format)
       (set-face-attribute 'mode-line nil :height (face-attribute 'default :height)))

     (defun c/toggle-mode-line ()
       "Globally toggles the modeline by clearing the format string."
       (interactive)
       (if (eq "" mode-line-format)
           (c/show-mode-line)
         (c/hide-mode-line)))
   #+end_src

   Define helper to toggle between common mono-space font heights.

   #+begin_src emacs-lisp
     (defun c/toggle-mono-space-font-height ()
       (interactive)
       (setq c/mono-space-font-height (if (eq 170 c/mono-space-font-height) 140 170))
       (c/set-default-face-attributes))
   #+end_src

   Toggle functions

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-c M-t d") (make-repeatable-command 'toggle-debug-on-error))
     (define-key global-map (kbd "C-c M-t f") (make-repeatable-command 'c/toggle-mono-space-font-height))
     (define-key global-map (kbd "C-c M-t l") (make-repeatable-command 'toggle-truncate-lines))
     (define-key global-map (kbd "C-c M-t m") (make-repeatable-command 'c/toggle-mode-line))
   #+end_src

   Formatting helpers

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-c fa") 'align-regexp)
     (define-key global-map (kbd "C-c fs") 'sort-lines)

   #+end_src

   Compilation helpers.

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-c p") 'compile)
   #+end_src

** C-x Map

   Helpers for scrolling - move one line at a time, and scroll similar
   to touch screens by adding and hiding one line at the same time.

   #+begin_src emacs-lisp
     (defun c/scroll-up ()
       (interactive)
       (scroll-down 1))
     (defun c/scroll-down ()
       (interactive)
       (scroll-up 1))
   #+end_src

   Bind them to =C-x â†‘= and =C-x â†“=.

   #+begin_src emacs-lisp
     (define-key ctl-x-map (kbd "<up>") (make-repeatable-command 'c/scroll-up))
     (define-key ctl-x-map (kbd "<down>") (make-repeatable-command 'c/scroll-down))
   #+end_src


   Helpers from [26] to change split windows.

   #+begin_src emacs-lisp
     (defun c/split-window-func-with-other-buffer (split-function)
       (lexical-let ((s-f split-function))
         (lambda ()
           (interactive)
           (funcall s-f)
           (set-window-buffer (next-window) (other-buffer)))))

     (defun c/split-window-horizontally-instead ()
       (interactive)
       (save-excursion
         (delete-other-windows)
         (funcall (c/split-window-func-with-other-buffer 'split-window-horizontally))))

     (defun c/split-window-vertically-instead ()
       (interactive)
       (save-excursion
         (delete-other-windows)
         (funcall (c/split-window-func-with-other-buffer 'split-window-vertically))))
   #+end_src

   Bind them to =C-x w |= and =C-x w _=

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-x w |") 'c/split-window-horizontally-instead)
     (define-key global-map (kbd "C-x w _") 'c/split-window-vertically-instead)
   #+end_src

   Helper from [18] to rotate the windows clock-wise.

   #+begin_src emacs-lisp
     (defun c/rotate-windows ()
       "Rotate your windows"
       (interactive)
       (cond
        ((not (> (count-windows) 1)) (message "You can't rotate a single window!"))
        (t
         (setq i 1)
         (setq numWindows (count-windows))
         (while  (< i numWindows)
           (let* (
                  (w1 (elt (window-list) i))
                  (w2 (elt (window-list) (+ (% i numWindows) 1)))
                  (b1 (window-buffer w1))
                  (b2 (window-buffer w2))
                  (s1 (window-start w1))
                  (s2 (window-start w2))
                  )
             (set-window-buffer w1  b2)
             (set-window-buffer w2 b1)
             (set-window-start w1 s2)
             (set-window-start w2 s1)
             (setq i (1+ i)))))))
   #+end_src

   Bind it to =C-x wr=.

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-x wr") (make-repeatable-command 'c/rotate-windows))
   #+end_src

   Group winner-mode commands.

   #+begin_src emacs-lisp
     (define-command-group c/winner-mode-command-group
       (:key "v" :command winner-undo)
       (:key "z" :command winner-redo))

     (define-key global-map (kbd "C-x w v") 'c/winner-mode-command-group)
   #+end_src


   Make several built-in window related commands repeatable.

   #+begin_src emacs-lisp
     (define-key ctl-x-map "^" (make-repeatable-command 'enlarge-window))
     (define-key ctl-x-map "}" (make-repeatable-command 'enlarge-window-horizontally))
     (define-key ctl-x-map "{" (make-repeatable-command 'shrink-window-horizontally))
     (define-key ctl-x-map "o" (make-repeatable-command 'other-window))
   #+end_src

   More convenient navigation through mark rings.

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-x t")
       (make-repeatable-command 'back-button-local))
     (define-key global-map (kbd "C-x T")
       (make-repeatable-command 'back-button-global))
   #+end_src

** goto Map (M-g)

   Alternatives to default =M->= and =M-<= to be consistent.

   #+begin_src emacs-lisp
     (define-key goto-map "<" 'beginning-of-buffer)
     (define-key goto-map ">" 'end-of-buffer)
   #+end_src

   Quickly jump between matching parens.

   #+begin_src emacs-lisp
     (define-key goto-map "%" (make-repeatable-command 'c/goto-match-paren))
   #+end_src

   Jump to URL.

   #+begin_src emacs-lisp
     (define-key goto-map "u" 'browse-url-default-macosx-browser)
   #+end_src

** Mac OS

   #+begin_src emacs-lisp
     (setq mac-command-modifier 'super)
     (setq mac-option-modifier 'meta)
     (setq default-input-method "MacOSX")
     (define-key global-map (kbd "S-`") 'ns-next-frame)
     (define-key global-map (kbd "S-h") 'ns-do-hide-others)
   #+end_src

** Dired

   Use Mac OS' open to view files outside of Emacs.

   #+begin_src emacs-lisp
     (define-key dired-mode-map "o" 'c/dired-open-mac)
   #+end_src

** Email / Notmuch

   #+begin_src emacs-lisp
     (eval-after-load 'message
       '(define-key message-mode-map (kbd "C-c C-b") 'c/goto-message-body))
     (eval-after-load 'notmuch
       '(progn
          (define-key notmuch-search-mode-map (kbd "Q") 'c/notmuch-archive-all-and-quit)
          (define-key notmuch-search-mode-map (kbd "a") 'c/notmuch-archive)
          (define-key notmuch-search-mode-map (kbd "g") 'notmuch-search-refresh-view)
          ; navigation on dvorak home row
          (define-key notmuch-search-mode-map (kbd "h") 'notmuch-search-show-thread)
          (define-key notmuch-search-mode-map (kbd "t") 'notmuch-search-previous-thread)
          (define-key notmuch-search-mode-map (kbd "n") 'notmuch-search-next-thread)
          (define-key notmuch-show-mode-map (kbd "s") 'notmuch-kill-this-buffer)
          (define-key notmuch-hello-mode-map "h" 'widget-button-press)
          (define-key notmuch-hello-mode-map "t" 'widget-backward)
          (define-key notmuch-hello-mode-map "n" 'widget-forward)

          (define-key notmuch-hello-mode-map "b" 'c/notmuch-jump-back-to-saved-searches)
          (define-key notmuch-hello-mode-map "g" 'c/notmuch-hello-update-and-jump-back-to-saved-searches)
          (define-key notmuch-hello-mode-map "G" 'c/notmuch-hello-offlineimap-update-and-jump-back-to-saved-searches)
          ))
   #+end_src

** GNU Global

   Set some key bindings specific to gtags-mode.

   #+begin_src emacs-lisp
     (defun c/initialize-gtags-mode-key-bindings ()
       (local-set-key (kbd "M-.") 'helm-gtags-find-tag)
       (local-set-key (kbd "M-,") 'helm-gtags-pop-stack))
     (add-hook 'gtags-mode-hook 'c/initialize-gtags-mode-key-bindings)
   #+end_src

** Helm

   Add help specific bindings, the =a= is a residue from helm's previous
   name "anything".

   #+begin_src emacs-lisp
     (setq helm-command-prefix-key "C-c h")
     (define-key global-map (kbd "C-c ha") 'helm-c-apropos)
     (define-key global-map (kbd "C-c hc") 'c/helm-contact)
     (define-key global-map (kbd "C-c hgG") 'c/helm-ag)
     (define-key global-map (kbd "C-c hgg") 'c/helm-ag-project)
     (define-key global-map (kbd "C-c hi") 'helm-imenu)
     (define-key global-map (kbd "C-c hr") 'helm-regexp)
     (define-key global-map (kbd "C-c hu") 'helm-ucs)
     (define-key global-map (kbd "C-c hx") 'helm-M-x)
     (define-key global-map (kbd "C-c hz") 'helm-resume)
     (define-key global-map (kbd "M-x") 'helm-M-x)
     (define-key global-map (kbd "C-h a") 'helm-c-apropos)
   #+end_src

   Quick access to other occurrences.

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-c oo") 'c/helm-occur-all)
   #+end_src

** Evaluation

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-c eb") 'eval-buffer)
     (define-key global-map (kbd "C-c ed") 'eval-defun)
     (define-key global-map (kbd "C-c ee") 'eval-last-sexp)
     (define-key global-map (kbd "C-c er") 'eval-region)

   #+end_src

** Input Environment

   Fast switch to a German environment.

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-c ii") 'c/set-german-environment)
   #+end_src

** Buffers

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-c br") 'rename-buffer)
     (define-key global-map (kbd "C-c bR") 'revert-buffer)
     (define-key global-map (kbd "C-c bs") 'c/switch-to-scratch-buffer)
     (define-key global-map (kbd "C-c bT") 'c/tramp-cleanup)
   #+end_src

** isearch

   isearch-specific bindings to use symbol at point and exit search on
   the "other end" of the match.

   #+begin_src emacs-lisp
     (define-key isearch-mode-map (kbd "M-w") 'isearch-yank-symbol)
     (define-key isearch-mode-map [(control return)] 'isearch-exit-other-end)
     (define-key isearch-mode-map (kbd "C-o") 'isearch-occur)
     (define-key isearch-mode-map (kbd "M-z") 'zap-to-isearch)
   #+end_src

** Text editing

   Beginning of line or end of indentation...

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-a") 'c/beginning-of-line-dwim)
   #+end_src

   Open a new line and indent it.

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-o") 'c/open-new-line)
   #+end_src

   Duplicating current line.

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-c *") (make-repeatable-command 'c/duplicate-current-line-or-region))
   #+end_src

   Join this line to the previous.

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-c ^") (make-repeatable-command 'join-line))
   #+end_src

   Replace strings and regexs.

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-c q") 'anzu-query-replace)
     (define-key global-map (kbd "C-c Q") 'anzu-query-replace-regexp)
   #+end_src

   Use helm to show and search the kill-ring.

   #+begin_src emacs-lisp
     (define-key global-map (kbd "M-y") 'helm-show-kill-ring)
   #+end_src

   Mini macros via multiple-cursors.

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-c |") 'mc/edit-lines)
   #+end_src

   Command group for expanding and contracting the active region.

   #+begin_src emacs-lisp
     (define-command-group c/expand-region-command-group
       (:key "." :command er/expand-region)
       (:key "," :command er/contract-region))

     (define-key global-map (kbd "C-c .") 'c/expand-region-command-group)
   #+end_src

   Entry for multiple cursor editing.

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-c <down>") 'mc/mark-more-like-this-extended)
   #+end_src

   Default to zapping up to char, not including the target. [13]

   #+begin_src emacs-lisp
     (define-key global-map (kbd "M-z") 'zap-up-to-char)
     (define-key global-map (kbd "M-Z") 'zap-to-char)
   #+end_src

   Kill entire line, no matter where we are on the line.

   #+begin_src emacs-lisp
     (defun c/kill-whole-line ()
       (interactive)
       (beginning-of-line)
       (let ((kill-whole-line t))
         (kill-line)))
     (define-key global-map (kbd "C-c k") (make-repeatable-command 'c/kill-whole-line))
   #+end_src

** Flyspell

   #+begin_src emacs-lisp
     (eval-after-load 'flyspell
       '(progn
          (define-key flyspell-mode-map (kbd "C-.") nil)
          (define-key flyspell-mode-map (kbd "C-,") nil)))
   #+end_src

** Org mode

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-c of") 'org-footnote-action)
     (define-key global-map (kbd "C-c l") 'org-store-link)
     (define-key global-map (kbd "C-c a") 'org-agenda)
     (define-key global-map (kbd "C-c c") 'org-capture)

     (eval-after-load 'org-agenda
       '(define-key org-agenda-mode-map (kbd "C-c t") 'org-agenda-todo))
     (eval-after-load 'org-clock
       '(define-key global-map (kbd "C-c C-x C-j") 'org-clock-jump-to-current-clock))
     (eval-after-load 'org
       '(progn
          (define-key org-mode-map (kbd "C-'") nil)
          (define-key org-mode-map (kbd "C-.") nil)
          (define-key org-mode-map (kbd "C-,") nil)
          (define-key org-mode-map (kbd "C-c .") nil)
          (define-key org-mode-map (kbd "C-c SPC") nil)
          (define-key org-mode-map (kbd "C-c ,") nil)
          (define-key org-mode-map (kbd "C-c *") nil)
          (define-key org-mode-map (kbd "C-c &") 'org-mark-ring-goto)
          (define-key org-mode-map (kbd "C-c #") nil)
          (define-key org-mode-map (kbd "C-c >") nil)
          (define-key org-mode-map (kbd "C-c <") nil)
          (define-key org-mode-map (kbd "C-c ^") nil)
          (define-key org-mode-map (kbd "C-c |") nil)
          (define-key org-mode-map (kbd "C-c g") 'omlg-grab-link)
          (define-key org-mode-map (kbd "C-c t") 'org-todo)
          (define-key org-mode-map (kbd "C-c C-x C-u") 'c/org-get-chrome-link)))
   #+end_src

** Eshell

   Eshell's mode map seems to be only activated when in an eshell buffer,
   therefore hook into buffer setup for (un)binding keys.

   #+begin_src emacs-lisp
     (defun c/eshell-bindings ()
       (define-key eshell-mode-map (kbd "C-c C-x") nil)
       (define-key eshell-mode-map (kbd "C-c SPC") nil)
       (define-key eshell-mode-map (kbd "C-a") 'c/eshell-beginning-of-line-dwim))
     (add-hook 'eshell-mode-hook 'c/eshell-bindings)
   #+end_src

** Magit

   #+begin_src emacs-lisp
     (eval-after-load 'magit
       '(progn
          (define-key magit-status-mode-map (kbd "W") 'c/magit-toggle-whitespace)
          (define-key magit-status-mode-map (kbd "q") 'c/magit-quit-session)
          ))
   #+end_src

** re-builder

   Quickly jump to replace-regexp.

   #+begin_src emacs-lisp
     (eval-after-load 're-builder
       '(progn
          (define-key reb-mode-map (kbd "M-%") 'c/reb-query-replace)))
   #+end_src

** auto-complete

   Use more convenient =C-{n,p}= for selection [24].

   #+begin_src emacs-lisp
     (eval-after-load 'auto-complete
       '(progn
          (define-key ac-menu-map "\C-n" 'ac-next)
          (define-key ac-menu-map "\C-p" 'ac-previous)))
   #+end_src

   Use TAB for completion, reset RET [25].

   #+begin_src emacs-lisp
     (eval-after-load 'auto-complete
       '(progn
          (define-key ac-completing-map "\t" 'ac-complete)
          (define-key ac-completing-map "\r" nil)))
   #+end_src

** Programming modes
*** Prog mode

    Bindings that are shared among modes that are derived from prog-mode.

    #+begin_src emacs-lisp
      (define-key prog-mode-map (kbd "RET") 'newline-and-indent)
    #+end_src

*** JS2 mode

    #+begin_src emacs-lisp
      (eval-after-load 'js2-mode
        '(progn
           (eval-after-load 'flymake
             '(progn
                (define-key js2-mode-map (kbd "C-c !") (make-repeatable-command 'flymake-goto-next-error))
                ))))
    #+end_src

*** JSON mode

    Override default formatting function.

    #+begin_src emacs-lisp
      (eval-after-load 'json-mode
        '(define-key json-mode-map (kbd "C-c C-f") 'c/beautify-json-with-jsonlint))
    #+end_src

*** Python mode

    #+begin_src emacs-lisp
      (eval-after-load 'python
        '(progn
           (define-key python-mode-map (kbd "C-c >") nil)
           (define-key python-mode-map (kbd "C-c <") nil)
           (define-key python-mode-map (kbd "C-c fs") 'c/split-python-args-across-lines)
           (define-key python-mode-map (kbd "C-c f>") 'python-indent-shift-right)
           (define-key python-mode-map (kbd "C-c f<") 'python-indent-shift-left)
           (define-key python-mode-map (kbd "C-c fs") 'c/split-python-args-across-lines)
           (define-key python-mode-map (kbd "C-c fs") 'c/split-python-args-across-lines)
           (define-key python-mode-map (kbd "C-c tt") 'c/run-python-test)
           (define-key python-mode-map (kbd "C-c tc") 'c/run-python-test-class)
           (define-key python-mode-map (kbd "C-c tp") 'c/run-python-tests-in-project)
           (define-key python-mode-map (kbd "C-c tr") 'c/rerun-python-test)
           (define-key python-mode-map (kbd "C-c db") 'c/python-insert-ipdb-breakpoint)
           (define-key python-mode-map (kbd "C-RET") 'newline-and-indent)
           (eval-after-load 'flymake
             '(progn
                (define-key python-mode-map (kbd "C-c !") (make-repeatable-command 'flymake-goto-next-error))))
           ))
    #+end_src

*** Java mode

    #+begin_src emacs-lisp
      (eval-after-load 'cc-mode
        '(progn
           (define-key java-mode-map (kbd "C-c tt") 'c/run-java-test)
           (define-key java-mode-map (kbd "C-c tc") 'c/run-java-test-class)
           (define-key java-mode-map (kbd "C-c tp") 'c/run-java-tests-in-project)
           (define-key java-mode-map (kbd "C-c tr") 'c/rerun-java-test)
           (define-key java-mode-map (kbd "C-c .") nil)
           (eval-after-load 'flymake
             '(progn
                (define-key java-mode-map (kbd "C-c !") (make-repeatable-command 'flymake-goto-next-error))
                ))))
    #+end_src

*** Scala mode
**** Helpers

     Shortcut to running an app via SBT.

     #+begin_src emacs-lisp
       (defun c/ensime-sbt-do-run ()
         (interactive)
         (ensime-sbt-switch)
         (ensime-sbt-action "run"))
     #+end_src

**** Bindings

     Bindings specific to scala-mode2

     #+begin_src emacs-lisp
       (eval-after-load 'scala-mode2
         '(progn
            (define-key scala-mode-map (kbd "C-c C-b C-r") 'c/ensime-sbt-do-run)
            (define-key scala-mode-map (kbd "C-c C-i C-i") 'ensime)
            (define-key scala-mode-map (kbd "C-c C-i c") 'ensime-config-gen)
            (define-key scala-mode-map (kbd "C-c C-i r") 'ensime-inf-eval-region)
            (define-key scala-mode-map (kbd "C-c C-i b") 'ensime-inf-eval-buffer)))
     #+end_src

     Bindings for sending actions to SBT process.

     #+begin_src emacs-lisp
       (eval-after-load 'ensime
         '(progn
            (define-key ensime-mode-map (kbd "C-c C-b b") 'c/ensime-resend-last-sbt-command)
            (define-key ensime-mode-map (kbd "C-c C-b B") 'c/ensime-send-sbt-command)
            (define-key ensime-mode-map (kbd "C-c C-b t") 'c/ensime-run-current-test-suite)))
     #+end_src

     Bind ENSIME's selection expansion/contraction mechanism to the same key as
     expand-region.

     #+begin_src emacs-lisp
       (eval-after-load 'ensime
         '(progn
            (define-key scala-mode-map (kbd "C-c .") 'c/maybe-ensime-expand-selection-command)))
     #+end_src

* Appearance
** General GUI Settings

   Less noisy Emacs startup and less noise on screen per default.

   #+begin_src emacs-lisp
     (set-scroll-bar-mode nil)
     (tool-bar-mode -1)
     (setq-default
      blink-cursor-delay 0
      blink-cursor-interval 0.2
      use-file-dialog nil
      use-dialog-box nil
      inhibit-startup-screen t
      inhibit-startup-echo-area-message t
      truncate-lines t
      truncate-partial-width-windows nil
      visible-bell nil
      transient-mark-mode t   ;; highlight the active region when mark is active
      show-trailing-whitespace nil ;; don't show trailing whitespace globally
      blink-matching-paren t
      default-frame-alist '((left-fringe . 1) (right-fringe . 0) (scroll-bar-width . nil))
      scroll-bar-width 0
      default-frame-scroll-bars nil)
   #+end_src

   Highlight URLs and email addresses.

   #+begin_src emacs-lisp
     ;;(setq goto-address-mail-face 'link)
     (add-hook 'find-file-hooks 'goto-address-prog-mode)
   #+end_src

   y and n  are sufficient.

   #+begin_src emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+end_src

   Four spaces for a tab.

   #+begin_src emacs-lisp
     (setq-default tab-width 4)
   #+end_src

   Show the key strokes while typing them.

   #+begin_src emacs-lisp
     (setq echo-keystrokes 0.01)
   #+end_src

   Set the fill column to 80 characters globally.

   #+begin_src emacs-lisp
     (setq-default fill-column 80)
   #+end_src

** Fonts

   Helper to set default font face attributes.

   #+begin_src emacs-lisp
     (defun c/set-default-face-attributes ()
       (interactive)
       (set-face-attribute 'default nil
                           :family c/mono-space-font-family
                           :height c/mono-space-font-height
                           :weight 'normal))
   #+end_src

   Set default fonts across frames.

   #+begin_src emacs-lisp
     (setq c/variable-width-font-family "Calibri")
     (setq c/variable-width-font-height 180)
     (setq c/mono-space-font-family "Source Code Pro")
     (setq c/mono-space-font-height 130)
     (c/set-default-face-attributes)
   #+end_src

   Define some helpers to switch between variable-width and mono-spaced
   fonts per buffer.

   #+begin_src emacs-lisp
     (defun c/set-variable-width-font ()
       (interactive)
       (variable-pitch-mode t)
       (set-face-attribute 'variable-pitch nil
                           :family c/variable-width-font-family :height c/variable-width-font-height :weight 'normal))

     (defun c/set-mono-space-font ()
       (interactive)
       (variable-pitch-mode t)
       (set-face-attribute 'variable-pitch nil
                           :family c/mono-space-font-family :height c/mono-space-font-height :weight 'normal))
   #+end_src

   Use monospace for some modes.

   #+begin_src emacs-lisp :tangle no
     (add-hook 'magit-log-mode-hook 'c/set-mono-space-font)
     (add-hook 'eshell-mode-hook 'c/set-mono-space-font)
     (add-hook 'shell-mode-hook 'c/set-mono-space-font)
     (add-hook 'term-mode-hook 'c/set-mono-space-font)
     (add-hook 'sql-login-hook 'c/set-mono-space-font)
     (add-hook 'gnus-summary-mode-hook 'c/set-mono-space-font)
   #+end_src

** Mode-line

   Propertized mode-line string that shows errors and warnings when
   flymake is running.

   #+begin_src emacs-lisp
     (defun c/mode-line-flymake ()
       (when (and
              (boundp 'flymake-mode-line-e-w)
              flymake-mode-line-e-w
              (not (string= "" flymake-mode-line-e-w))
              (not (string= "0/0" flymake-mode-line-e-w)))
         (progn
           (string-match "\\([0-9]+\\)/\\([0-9]+\\)" flymake-mode-line-e-w)
           (let ((error-str (match-string 1 flymake-mode-line-e-w))
                 (warn-str (match-string 2 flymake-mode-line-e-w)))
             (concat " t:" (propertize error-str 'face 'flymake-errline) "," (propertize warn-str 'face 'flymake-warnline))))))
   #+end_src

   Propertized mode-line string that shows special symbols to
   highlight compilation results.

   #+begin_src emacs-lisp
     (defun c/mode-line-compilation ()
       (cond
        ((string= ":exit [2]" mode-line-process) (propertize " x" 'face 'error))
        ((string= ":exit [0]" mode-line-process) " âœ“")
        (t mode-line-process)))
   #+end_src

   Default setting for mode-line.

   #+begin_src emacs-lisp
     (defvar c/default-mode-line-format
       '("%e" mode-line-front-space mode-line-mule-info mode-line-client mode-line-modified mode-line-remote mode-line-frame-identification mode-line-buffer-identification "   " mode-line-position smartrep-mode-line-string
         (vc-mode vc-mode)
         "  " mode-line-modes mode-line-misc-info mode-line-end-spaces)
       "Default built-in mode-line-format.")
   #+end_src

   Less noise in the mode-line. Based on several sources [2]

   #+begin_src emacs-lisp
     (defvar c/mode-line-format
       (list
        " "
        'mode-line-mule-info ;; Info about the active input method and coding-system
        'mode-line-remote ;; Small indicator for tramp'ed files
        '(:eval (propertize "%b" 'face 'mode-line-buffer-id)) ;; buffer name
        '(:eval (when buffer-read-only (propertize "%" 'face 'mode-line)))
        '(:eval (when (buffer-modified-p) (propertize "*" 'face 'mode-line-highlight)))
        (propertize " %l:%c %p/%I " 'face 'mode-line) ;; line
                                             ;  mode-name
        (list
         (propertize "%[" 'help-echo "Recursive edit, type C-M-c to get out")
         (propertize "%n" 'help-echo "mouse-2: Remove narrowing from the current buffer"
                     'mouse-face 'mode-line-highlight
                     'local-map (make-mode-line-mouse-map
                                 'mouse-2 #'mode-line-widen))
         (propertize "%]" 'help-echo "Recursive edit, type C-M-c to get out")
         )
        '(:eval (c/mode-line-compilation))
        '(:eval (when (fboundp 'ensime-modeline-string) (ensime-modeline-string)))
        '(:eval (c/mode-line-flymake))
        '(t erc-modified-channels-object)
        mode-line-misc-info
        ""
        mode-line-client
        )
       "Low noise mode-line format.")
   #+end_src

   Apply less noisy format.

   #+begin_src emacs-lisp
     (setq-default mode-line-format c/mode-line-format)
   #+end_src

** Buffer Name

   #+begin_src emacs-lisp
     (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
     (setq uniquify-after-kill-buffer-p t)
     (setq uniquify-ignore-buffers-re "^\\*")
   #+end_src

** Windows
*** Winner

   Let's change to winner-mode!

   #+begin_src emacs-lisp
     (winner-mode 1)
   #+end_src

   ... and configure it to ignore my Helm buffer.

   #+begin_src emacs-lisp
     (add-to-list 'winner-boring-buffers "*c/helm-jump*")
   #+end_src

* Buffers and sessions
** Settings

   Set a limit on maximum remembered files and forget temporary files.

   #+begin_src emacs-lisp
     (setq
      recentf-max-saved-items 300
      recentf-exclude '("/tmp/"))
   #+end_src

   Store recent file list in .emacs.d, rather than HOME.

   #+begin_src emacs-lisp
     (setq recentf-save-file (expand-file-name "~/.emacs.d/recentf"))
   #+end_src

   Don't ask when reverting buffer to buffer-file's contents.

   #+begin_src emacs-lisp
     (setq revert-without-query '(".*"))
   #+end_src

   Enable recursive mini-buffers

   #+begin_src emacs-lisp
     (setq enable-recursive-minibuffers t)
   #+end_src

   Always revert buffers automatically when the corresponding file is changed.

   #+begin_src emacs-lisp
     (global-auto-revert-mode 1)
     (setq global-auto-revert-non-file-buffers t)
     (setq auto-revert-verbose nil)
   #+end_src

   Faster polling for file changes.

   #+begin_src emacs-lisp
     (setq auto-revert-interval 0.5)
     (auto-revert-set-timer)
   #+end_src

** Automatic saving and backing up
*** Session management

    Initialize session management, that is storing of positions and
    several input variables [15].

    #+begin_src emacs-lisp
      (add-hook 'after-init-hook 'session-initialize)
    #+end_src

    Unlimited depth at which session stores session variables so we don't get
    random "..." as variables.

    #+begin_src emacs-lisp
      ;; original: (t 2 1024)
      (setq session-save-print-spec '(t nil 40000))
    #+end_src

*** File-visiting buffers

    Turn on automatic saving.

    #+begin_src emacs-lisp
      (setq auto-save-default t)
    #+end_src

    Save everything in a single folder below =~/.emacs.d=.
    Create the folder on the fly, if necessary.

    #+begin_src emacs-lisp
      (defvar c/saved-directory (expand-file-name "~/.emacs.d/saved/"))
      (make-directory c/saved-directory t)
    #+end_src

    Place autosaves and backups to in a single directory.

    #+begin_src emacs-lisp
      (setq backup-directory-alist
            `((".*" . ,c/saved-directory)))
      (setq auto-save-file-name-transforms
            `((".*" ,c/saved-directory t)))
    #+end_src

    Do not delete old versions silently.

    #+begin_src emacs-lisp
      (setq delete-old-versions nil)
    #+end_src

    Don't make backup files when renaming files.

    #+begin_src emacs-lisp
      (setq make-backup-files nil)
    #+end_src

* Helm

  Let's activate helm!

  #+begin_src emacs-lisp
    (helm-mode 1)
  #+end_src

** Configuration

   Quick, quiiiiick!

   #+begin_src emacs-lisp
     (setq helm-idle-delay 0.01)
     (setq helm-input-idle-delay 0.01)
   #+end_src

   Don't fill in single matches when selecting files.

   #+begin_src emacs-lisp
     (setq helm-ff-auto-update-initial-value nil)
   #+end_src

   Show the full path to files.

   #+begin_src emacs-lisp
     (setq helm-ff-transformer-show-only-basename nil)
   #+end_src

   Longer names are ok.

   #+begin_src emacs-lisp
     (setq helm-buffer-max-length 50)
   #+end_src

   Remember follow-mode setting across helm sessions.

   #+begin_src emacs-lisp
     (setq helm-follow-mode-persistent t)
   #+end_src

** Sources
*** Jumper

   Source for contents of a jumper file.

   #+begin_src emacs-lisp
     (require 'jumper)
     (defvar *c/helm-jumper-def-line* "\\([^[:blank:]]+\\)[[:blank:]]+\\([^[:blank:]]+\\)[[:blank:]]+\\([^[:blank:]]+\\)")
     (defvar *c/helm-jumper-candidate-line-format* "%s in %s%s at line %s")

     (defun c/helm-jumper-defs-init ()
       "Load defs from JUMPER file into helm candidate buffer."
       (ignore-errors
         (let ((jumper-file (jumper-find-jumper-file)))
           (let ((defs (with-current-buffer
                           (find-file-noselect jumper-file)
                         (buffer-substring (point-min) (point-max)))))
             (with-current-buffer (helm-candidate-buffer 'global)
               (insert defs))))))

     (defun c/helm-jumper-def-components (def-line)
       "Decompose the components of a JUMPER def line into (DEF FILE LINE)"
       (string-match *c/helm-jumper-def-line* def-line)
       (let (
             (def (match-string 1 def-line))
             (file (match-string 2 def-line))
             (line (match-string 3 def-line)))
         (list def file (string-to-number line))))

     (defun c/helm-jumper-def-transformer (candidates sources)
       "Add highlighting of candidate components."
       (loop for candidate in candidates
             collect
             (cons
              (destructuring-bind (def file line) (c/helm-jumper-def-components candidate)
                (format *c/helm-jumper-candidate-line-format*
                        (propertize def 'face 'font-lock-keyword-face)
                        (file-name-directory file)
                        (propertize (file-name-nondirectory file) 'face 'font-lock-builtin-face)
                        (propertize (number-to-string line) 'face 'shadow)))
              candidate)))

     (defun c/helm-jumper-jump-to-def (def-line)
       "Jump to a selected definition."
       (destructuring-bind (def file line) (c/helm-jumper-def-components def-line)
         (jumper-jump-to file line def)))

     (defvar c/helm-c-source-jumper-defs
       '((name . "Jump to JUMPER defs")
         (init . c/helm-jumper-defs-init)
         (candidates-in-buffer)
         (persistent-help . "Jump to this def")
         (action . c/helm-jumper-jump-to-def)
         (candidate-number-limit . 10)
         (filtered-candidate-transformer c/helm-jumper-def-transformer))
       "Source for jumping to JUMPER defs.")
   #+end_src

*** helm-git

   Monkey-patch helm-git to work with non-git directories.

   #+begin_src emacs-lisp
     (eval-after-load 'helm-git
       '(progn
          (defadvice helm-c-git-files (around check-git-repo-p)
            (when (and (boundp 'default-directory)
                       (magit-get-top-dir default-directory))
              ad-do-it))
          (ad-activate 'helm-c-git-files)))
   #+end_src

*** ag

    Source for the silver searcher that re-uses much of helm-grep's
    functionality.

    #+begin_src emacs-lisp
      (defvar c/helm-ag-source
        '((name . "the silver searcher")
          (header-name . (lambda (name) name))
          (candidates-process . c/helm-ag-collect-candidates)
          (no-matchplugin)
          (nohighlight)
          (filtered-candidate-transformer helm-grep-cand-transformer)
          (action . (("Find File" . helm-grep-action)))
          (persistent-action . helm-grep-persistent-action)
          (requires-pattern . 3)
          (delayed))
        "Basic ag source for helm")

      (defun c/helm-ag-collect-candidates ()
        (let* ((split-pattern (split-string helm-pattern " " t))
               (full-command (mapconcat (lambda (pattern) (format "ag --nocolor -S --nogroup %s" pattern)) split-pattern " | ")))
          (start-file-process-shell-command "ag" helm-buffer full-command)))
    #+end_src

** Accessors to sources

   Collection of sources that we want fast access to.

   #+begin_src emacs-lisp
     (defun c/helm-jump ()
       (interactive)
       (helm-other-buffer
        '(
          helm-c-source-buffers-list
          helm-c-source-git-files
          helm-c-source-recentf
          helm-c-source-buffer-not-found
          )
        "*c/helm-jump*"))
   #+end_src

   Wrapper to =helm-do-grep= that sends the prefix argument so we search
   for files recursively by default.

   #+begin_src emacs-lisp
     (defun c/helm-do-rgrep ()
       (interactive)
       (let ((current-prefix-arg '(4)))
         (call-interactively 'helm-do-grep)))
   #+end_src

   Quickly browse for occurrences buffers adopted from [31].

   #+begin_src emacs-lisp
     (defun c/helm-occur-all ()
       (interactive)
       (setq helm-multi-occur-buffer-list (delq nil (mapcar (lambda (b) (when (buffer-file-name b) (buffer-name b))) (buffer-list))))
       (eval-after-load "helm-regexp"
         '(helm-attrset 'follow 1 helm-source-moccur))
       (helm :sources '(helm-source-occur helm-source-moccur)
             :buffer "*c/helm-multi-occur-all*"
             :input (thing-at-point 'symbol)))
   #+end_src

   Helper to use git grep via helm in current repo.

   #+begin_src emacs-lisp
     (defun c/helm-git-grep ()
       (interactive)
       (let ((git-root (and (boundp 'default-directory)
                            (magit-get-top-dir default-directory))))
         (when git-root
           (let ((helm-grep-default-command "git grep %p")
                 (target-dir git-root))
             (helm-do-grep-1 (list target-dir) t nil '("*"))))))
   #+end_src

*** ag

    Quick access to the silver searcher in current directory.

    #+begin_src emacs-lisp
      (defun c/helm-ag ()
        (interactive)
        (unless helm-ff-default-directory (setq helm-ff-default-directory default-directory))
        (helm :sources c/helm-ag-source :buffer "*c/helm-ag*"))
    #+end_src

    Quick access to the silver searcher in current project.

    #+begin_src emacs-lisp
      (defun c/helm-ag-project ()
        (interactive)
        (with-project-root (c/helm-ag)))
    #+end_src

* Shells
** Eshell

   Lots of information at [9] and the emacs-starter-kit [14].

   Keep control files below =.emacs.d=.

   #+begin_src emacs-lisp
     (setq eshell-directory-name "~/.emacs.d/.eshell/")
   #+end_src

   Helper that is used for key-bindings to call eshell with a prefix to
   create a new one.

   #+begin_src emacs-lisp
     (defun c/eshell-with-prefix ()
       (interactive)
       (setq current-prefix-arg '(4))
       (call-interactively 'eshell))
   #+end_src

   Adds basic eshell-mode per buffer customization.

   #+begin_src emacs-lisp
     (defun c/eshell-mode-initialization ()
       (toggle-truncate-lines -1) ;; always fold lines
       (setq ac-sources (cons 'ac-source-files-in-current-dir ac-sources))
       (auto-complete-mode 1))
     (add-hook 'eshell-mode-hook 'c/eshell-mode-initialization)
   #+end_src

   Rename the buffer automatically.

   #+begin_src emacs-lisp
     (defun c/eshell-rename-buffer-before-command ()
       (let* ((last-input (s-trim (buffer-substring
                                   eshell-last-input-start
                                   eshell-last-input-end))))
         (rename-buffer (format "*%s$ %sâ€¦" default-directory last-input) t)))
     (defun c/eshell-rename-buffer-after-command ()
       (rename-buffer (format "*%s$ %s" default-directory (eshell-previous-input-string 0)) t))

     (add-hook 'eshell-pre-command-hook  'c/eshell-rename-buffer-before-command)
     (add-hook 'eshell-post-command-hook 'c/eshell-rename-buffer-after-command)
   #+end_src

   Don't try to access the mode-line, we want control over that.

   #+begin_src emacs-lisp
     (setq eshell-status-in-mode-line nil)
   #+end_src

   Print latest entries in dir-ring after directory change.

   #+begin_src emacs-lisp
     (defvar c/eshell-print-dir-ring-limit 5 "The number of ring entries that will be printed")
     (defun c/eshell-print-dir-ring ()
       "Shamelessly copied from `eshell/cd' and modified to fit my needs."
       (let* ((len (ring-length eshell-last-dir-ring))
              (index (min len (1- c/eshell-print-dir-ring-limit))))
         (eshell-init-print-buffer)
         (while (>= index 0)
           (eshell-buffered-print
            (concat (number-to-string index) ": "
                    (ring-ref eshell-last-dir-ring index) "\n"))
           (setq index (1- index)))
         (eshell-flush)))
     (add-hook 'eshell-directory-change-hook 'c/eshell-print-dir-ring)
   #+end_src

*** Visual commands

    Specify commands that should be handled by a term.

    #+begin_src emacs-lisp
      (eval-after-load 'em-term
        '(progn
           (add-to-list 'eshell-visual-commands "ssh")
           (add-to-list 'eshell-visual-commands "redis-cli")
           (add-to-list 'eshell-visual-commands "tail")))
    #+end_src

*** Prompt

    Custom prompt function.

    #+begin_src emacs-lisp
      (defun c/eshell-prompt-function ()
        (concat (c/eshell-git-info) (c/eshell-replace-prompt-prefixes) "/ "))
      (setq eshell-prompt-function #'c/eshell-prompt-function)
    #+end_src

    Tell eshell what the prompt looks like after we change it.

    #+begin_src emacs-lisp
      (setq eshell-prompt-regexp "^[^\n]*/ ")
    #+end_src

    Returns the current eshell/pwd with common prefixes (TRAMP, home
    directory) replaced.

    #+begin_src emacs-lisp
      (defun c/eshell-replace-prompt-prefixes ()
        (let ((absolute-path (eshell/pwd)))
          (cond ((string-match (getenv "HOME") absolute-path)
                 (replace-match "~" nil nil absolute-path))
                ((string-match "/ssh:\\(.+\\):" absolute-path)
                 (replace-match (concat "@" (match-string 1 absolute-path) " ")  nil nil absolute-path))
                (t
                 absolute-path))))
    #+end_src

    Returns the current branch name with a leading space, when in a
    git-versioned directory.

    #+begin_src emacs-lisp
      (eval-after-load 'eshell
        '(progn (require 'vc-git)))
      (defun c/eshell-git-info ()
        "Returns the current branch name with a leading space, when in a
      git-versioned directory."
        (let* ((branch (vc-git-working-revision (eshell/pwd))))
          (if (not (string-equal "" branch)) (concat branch " ") "")))
     #+end_src

    Colorize the prompt to indicate non-zero exit codes.

    #+begin_src emacs-lisp
      (defun c/eshell-exit-code-prompt-face ()
        (when (and eshell-last-command-status
                   (not (zerop eshell-last-command-status)))
          (let ((inhibit-read-only t))
            (add-text-properties
             (point-at-bol)
             (point-max)
             '(face warning)))))

      (add-hook 'eshell-after-prompt-hook 'c/eshell-exit-code-prompt-face)
    #+end_src

*** Commands

    Add shortcut to go up to directory containing a =.git= or =.hg= folder.

    #+begin_src emacs-lisp
      ;;;###autoload
      (defun eshell/cdg ()
        "Change directory to the project's root."
        (eshell/cd (locate-dominating-file default-directory ".git")))

      ;;;###autoload
      (defun eshell/cdh ()
        "Change directory to the project's root."
        (eshell/cd (locate-dominating-file default-directory ".hg")))
    #+end_src

    Extract all kinds of archives.

    #+begin_src emacs-lisp
      ;;;###autoload
      (defun eshell/extract (file)
        (let ((command (some (lambda (x)
                               (if (string-match-p (car x) file)
                                   (cadr x)))
                             '((".*\.tar.bz2" "tar xjf")
                               (".*\.tar.gz" "tar xzf")
                               (".*\.bz2" "bunzip2")
                               (".*\.rar" "unrar x")
                               (".*\.gz" "gunzip")
                               (".*\.tar" "tar xf")
                               (".*\.tbz2" "tar xjf")
                               (".*\.tgz" "tar xzf")
                               (".*\.zip" "unzip")
                               (".*\.Z" "uncompress")
                               (".*" "echo 'Could not extract the file:'")))))
          (eshell-command-result (concat command " " file))))
    #+end_src

** Shell

   Use BASH.

   #+begin_src emacs-lisp
     (setq shell-file-name "/usr/local/bin/bash")
   #+end_src

   Change =default-directory= based on prompt [32].

   #+begin_src emacs-lisp
     (defun c/maybe-set-default-directory-from-shell-prompt (text)
       (when (string-match "^\\([^:\n]+\\): " text)
         (cd (substring text (match-beginning 1) (match-end 1)))))
   #+end_src

   Adds basic shell-mode per buffer customization.

   #+begin_src emacs-lisp
     (defun c/shell-mode-initialization ()
       (add-hook 'comint-output-filter-functions 'c/maybe-set-default-directory-from-shell-prompt nil t)
       (setq ac-sources (cons 'ac-source-files-in-current-dir ac-sources))
       (auto-complete-mode 1))
     (add-hook 'shell-mode-hook 'c/shell-mode-initialization)
   #+end_src

* Version Control

  Use solarized colors for annotate-goodness.

  #+begin_src emacs-lisp
    (setq vc-annotate-background "#fcf4dc")
    (setq vc-annotate-very-old-color "#042028")
    (setq vc-annotate-color-map
          '((20 . "#a57705")
            (40 . "#bd3612")
            (50 . "#c60007")
            (60 . "#c61b6e")
            (80 . "#5859b7")
            (100 ."#2075c7")
            (120 ."#259185")
            (140 ."#728a05")))
  #+end_src

  Ignore tramp'ed files for speeeeed [1]

  #+begin_src emacs-lisp
    (setq vc-ignore-dir-regexp
          (format "\\(%s\\)\\|\\(%s\\)"
                  vc-ignore-dir-regexp
                  tramp-file-name-regexp
                  ))
  #+end_src

** Magit

   Hook up rebase-mode.

   #+begin_src emacs-lisp
     (add-to-list 'auto-mode-alist '("git-rebase-todo" . rebase-mode))
   #+end_src

   Enable auto-fill in commit message buffers.

   #+begin_src emacs-lisp
     (defun c/magit-log-edit-initialization () (auto-fill-mode 1))
     (add-hook 'magit-log-edit-mode-hook 'c/magit-log-edit-initialization)
   #+end_src

   @magnars helpers to toggle whitespace handling in a magit-status buffer [19].

   #+begin_src emacs-lisp
     (defun c/magit-toggle-whitespace ()
       (interactive)
       (if (member "-w" magit-diff-options)
           (c/magit-dont-ignore-whitespace)
         (c/magit-ignore-whitespace)))

     (defun c/magit-ignore-whitespace ()
       (interactive)
       (add-to-list 'magit-diff-options "-w")
       (magit-refresh))

     (defun c/magit-dont-ignore-whitespace ()
       (interactive)
       (setq magit-diff-options (remove "-w" magit-diff-options))
       (magit-refresh))
   #+end_src

   @magnars magit window session tweaks: Start in fullscreen and restore
   previous window configuration on quit.

   #+begin_src emacs-lisp
     (defadvice magit-status (around magit-fullscreen activate)
       (window-configuration-to-register :magit-fullscreen)
       ad-do-it
       (delete-other-windows))

     (defun c/magit-quit-session ()
       "Restores the previous window configuration and kills the magit buffer"
       (interactive)
       (kill-buffer)
       (jump-to-register :magit-fullscreen))
   #+end_src

   We like word-based diffs.

   #+begin_src emacs-lisp
     (setq magit-diff-refine-hunk t)
   #+end_src

   Enable global magit support for git-wip on save. Don't forget to enable it
   globally for all git repositories:

   =$ git config --global --add magit.extension wip-save=

   #+begin_src emacs-lisp
     (eval-after-load 'vc-git
       '(global-magit-wip-save-mode))
   #+end_src

* TRAMP

  I usually stay in Emacs to edit remote files, therefore it is unlikely
  that remote files change without TRAMP noticing. Let's speed this
  up :)

  #+begin_src emacs-lisp
    (setq remote-file-name-inhibit-cache nil)
  #+end_src

  Save temporaries in =~/.emacs.d=, which is easily accessed and backed-up.

  #+begin_src emacs-lisp
    (setq tramp-auto-save-directory "~/.emacs.d/saved/")
  #+end_src

  Helper to cleanup TRAMP residues.

  #+begin_src emacs-lisp
    (defun c/tramp-cleanup ()
      (interactive)
      (tramp-cleanup-all-connections)
      (tramp-cleanup-all-buffers)
      (message "Cleaned up TRAMP connections and buffers."))
  #+end_src

* Dired
** Helper

   Open a file with Mac OS  open from dired. [7]

   #+begin_src emacs-lisp
     (defun c/dired-open-mac ()
       (interactive)
       (let ((file-name (dired-get-file-for-visit)))
         (if (file-exists-p file-name)
             (call-process "/usr/bin/open" nil 0 nil file-name))))
   #+end_src

** Configuration

   Allow recursive operations, ask once for top-level directory.

   #+begin_src emacs-lisp
     (setq dired-recursive-deletes 'top)
   #+end_src

   Load extensions to dired from dired+.

   #+begin_src emacs-lisp
     (eval-after-load 'dired
       '(progn
          (require 'dired+)
          (require 'dired-details)
          (require 'dired-details+)
          (setq dired-details-hidden-string "")))
   #+end_src

   Per buffer customization

   #+begin_src emacs-lisp
     (defun c/dired-buffer-customization ()
       (interactive)
       (hl-line-mode))

     (add-hook 'dired-mode-hook 'c/dired-buffer-customization)
   #+end_src

   Make sure dired can read weird filenames. Requires coreutils to be installed
   via homebrew.

   #+begin_src emacs-lisp
     (setq ls-lisp-use-insert-directory-program t)
     (setq insert-directory-program (if mac-p "gls" "ls"))
   #+end_src

   Augment switches to ls [27].

   #+begin_src emacs-lisp
     (setq-default dired-listing-switches "-ahlv --group-directories-first --time-style=long-iso")
   #+end_src

   Suggest "other" buffer as target for operations [27].

   #+begin_src emacs-lisp
     (setq dired-dwim-target t)
   #+end_src

* Org
*** General settings

    Log a timestamp when finishing a task.

    #+begin_src emacs-lisp
      (setq org-log-done 'time)
    #+end_src

    Use the special / structure-aware =C-a= and =C-k=.

    #+begin_src emacs-lisp
      (setq
       org-special-ctrl-k t
       org-special-ctrl-a t
       )
    #+end_src

    For date selection, please start on Mondays.

    #+begin_src emacs-lisp
      (setq calendar-week-start-day 1)
    #+end_src

    Hide emphasis markers and leading *'s to reduce noise.

    #+begin_src emacs-lisp
      (setq
       org-hide-emphasis-markers t
       org-hide-leading-stars t
      )
    #+end_src

    Use =S-â†‘= and =S-â†“= to modify timestamps.

    #+begin_src emacs-lisp
      (setq org-edit-timestamp-down-means-later t)
    #+end_src

    Use simple numbered footnote format. Less confusing in emails.

    #+begin_src emacs-lisp
      (setq org-footnote-auto-label 'plain)
    #+end_src

    Per-buffer configuration.

    #+begin_src emacs-lisp
        (defun c/org-mode-per-buffer-customization ()
          (add-hook 'before-save-hook 'c/maybe-cleanup-whitespace nil 'local)
          (turn-on-auto-fill))

        (add-hook 'org-mode-hook 'c/org-mode-per-buffer-customization)
    #+end_src

    Ensure that we check all boxes, before marking a parent DONE.

    #+begin_src emacs-lisp
      (setq org-enforce-todo-checkbox-dependencies t)
    #+end_src

    Activate =org-todo= and =org-archive-*= for headlines in region.

    #+begin_src emacs-lisp
      (setq org-loop-over-headlines-in-active-region t)
    #+end_src

    Enable sticky agenda views.

    #+begin_src emacs-lisp
      (setq org-agenda-sticky t)
    #+end_src

*** Folders and files

    Where to find org-files.

    #+begin_src emacs-lisp
      (setq
       org-directory (expand-file-name "~/Cloud/org")
       org-default-notes-file (concat org-directory "/Tasks.org")
       org-agenda-files `(,org-directory))
    #+end_src

*** Modules

    Manually load org modules that should always be loaded with org.

    #+begin_src emacs-lisp
      (eval-after-load 'org
        (dolist (org-mod '(
                           org-crypt
                           org-info
                           org-habit
                           org-irc
                           org-checklist
                           org-eshell
                           ))
          (require org-mod)))
    #+end_src

*** Keywords

    Define the list of keywords to use for identifying the state of a
    task.

    #+begin_src emacs-lisp
      (setq org-todo-keywords '(
                          (sequence "TODO(t)" "STARTED(s)" "|" "DONE(d!/!)")
                          (sequence "WAITING(w@/!)" "|" "SUPERSEDED(u!/!)" "CANCELLED(c@/!)")))
    #+end_src

*** Agenda

    The agenda should include the diary.

    #+begin_src emacs-lisp
      (setq org-agenda-include-diary t)
    #+end_src

    Define the time-span that the agenda covers.

    #+begin_src emacs-lisp
      (setq org-agenda-span 'day)
    #+end_src

    Show tags in the agenda?

    #+begin_src emacs-lisp
      (setq org-agenda-remove-tags nil)
    #+end_src

    Flush them to the right.

    #+begin_src emacs-lisp
      (setq org-agenda-tags-column -125)
    #+end_src

    Start the week on a weekday (aka Monday).

    #+begin_src emacs-lisp
      (setq org-agenda-start-on-weekday nil)
    #+end_src

    Use the current window for showing the agenda.

    #+begin_src emacs-lisp
      (setq org-agenda-window-setup 'current-window)
    #+end_src

    Define additional commands for agenda views.

    #+begin_src emacs-lisp
      (setq org-agenda-custom-commands
            `(;; match those tagged with :inbox:, are not scheduled, are not DONE.
              ("ii" "[i]nbox tagged unscheduled tasks" tags "+inbox-SCHEDULED={.+}/!+TODO|+STARTED|+WAITING")
              ("id" "[i]nbox tagged completed tasks" tags "+inbox+TODO=\"DONE\"|+TODO=\"CANCELLED\"")
              ("wi" "[w]ork tasks that are not scheduled" tags "+inbox+work-SCHEDULED={.+}/!+TODO|+STARTED|+WAITING")
              ("ww" "[w]ork tasks" tags "+work")
              ("n" "Find a TAGged note" tags "" ((org-agenda-archives-mode t)))))
    #+end_src

    Define the sorting order

    #+begin_src emacs-lisp
      (setq org-agenda-sorting-strategy '((agenda habit-down time-up todo-state-down)))
    #+end_src

    Automatically jump to agenda when idle, based on [21]

    #+begin_src emacs-lisp
      (defun c/jump-to-org-agenda ()
        (interactive)
        (let ((wind (get-buffer-window org-agenda-buffer-name t)))
          (if wind (select-window wind)
            (call-interactively 'org-agenda-list))
          (delete-other-windows)))

      (defun c/schedule-jumping-to-agenda ()
        (run-with-idle-timer 600 t 'c/jump-to-org-agenda))
      (add-hook 'org-agenda-mode-hook 'c/schedule-jumping-to-agenda)
    #+end_src

    Full screen for agenda.

    #+begin_src emacs-lisp
      (defadvice org-agenda (around org-agenda-fullscreen activate)
        (window-configuration-to-register :org-agenda-fullscreen)
        ad-do-it
        (delete-other-windows))

      (defadvice org-agenda-quit (around org-agenda-quit-fullscreen activate)
        ad-do-it
        (jump-to-register :org-agenda-fullscreen))
    #+end_src

*** Clock

    Enable persisting the history and clock values across emacs sessions.

    #+begin_src emacs-lisp
      (setq org-clock-persist t)
      (org-clock-persistence-insinuate)
    #+end_src

    Enable the resuming of tasks when clocking in.

    #+begin_src emacs-lisp
      (setq org-clock-in-resume t)
    #+end_src

    When clocking into a task, set to started state.

    #+begin_src emacs-lisp
      (setq org-clock-in-switch-to-state "STARTED")
    #+end_src

    Always maintain a logbook.

    #+begin_src emacs-lisp
      (setq org-clock-into-drawer t)
    #+end_src

    Cleanup empty clocking times.

    #+begin_src emacs-lisp
      (setq org-clock-out-remove-zero-time-clocks t)
    #+end_src

    Schedule tasks for now when clocking in.

    #+begin_src emacs-lisp
      (defun c/schedule-task-now ()
        (interactive)
        (let ((now (with-temp-buffer (org-time-stamp '(16)) (buffer-string))))
          (org-schedule nil now)
          (message "Scheduled started task for now")))

      (add-hook 'org-clock-in-hook 'c/schedule-task-now)
    #+end_src

*** Capture

    Define additional capture templates for personal and work tasks.

    #+begin_src emacs-lisp
      (setq org-capture-templates
            `(("t" "Task"
               entry (file+olp ,org-default-notes-file "Inbox")
               "* TODO %?\n\n  %a\n  %i\n")
              ("w" "Work task"
               entry (file+olp ,org-default-notes-file "Inbox")
               "* TODO %? :work:\n\n  %a\n  %i\n")
              ("n" "Note"
               entry (file+headline ,org-default-notes-file "Notes")
               "* %?\n\n  %a\n  %i\n")
              ("s" "Scratch"
               entry (file+headline (expand-file-name "scratch.org" org-directory) "Scratch")
               "* Scratch it %U\n\n%i\n")
              ))
    #+end_src

    Helper based on @jwiegley's dot-emacs to get the URL of the
    currently active Google Chrome tab/window.

    #+begin_src emacs-lisp
      (defun c/org-get-chrome-link ()
        (interactive)
        (let ((subject (do-applescript
                        (string-to-multibyte "tell application \"Google Chrome\"
              title of active tab of front window
      end tell")))
              (url (do-applescript
                    (string-to-multibyte "tell application \"Google Chrome\"
              URL of active tab of front window
      end tell"))))
          (insert (org-make-link-string (substring url 0 nil) (substring subject 0 nil)))
          (do-applescript
           (string-to-multibyte "tell application \"Google Chrome\"
              close active tab of front window
      end tell"))
          ))
    #+end_src

*** Refile

    Start refiling at file-level and set max nesting to 5 and go step-by-step.

    #+begin_src emacs-lisp
      (setq
       org-outline-path-complete-in-steps nil
       org-refile-use-outline-path 'file
       org-refile-targets  '((nil :maxlevel . 5) (org-agenda-files :maxlevel . 5))
       )
    #+end_src

*** Babel

    Fontify source code in "native" block.

    #+begin_src emacs-lisp
      (setq org-src-fontify-natively t)
    #+end_src

    Load language support.

    #+begin_src emacs-lisp
      (setq org-babel-load-languages '((emacs-lisp . t) (scala . t)))
    #+end_src

*** Habits

    Low noise settings for habits.

    #+begin_src emacs-lisp
      (setq org-habit-preceding-days 7)
      (setq org-habit-show-habits-only-for-today nil)
      (setq org-habit-completed-glyph ?.)
      (setq org-habit-today-glyph ?o)
      (setq org-habit-graph-column 60)
    #+end_src

* Communication
** Notifications
*** todochiku

    Where to find cool icons.

    #+begin_src emacs-lisp
      (setq todochiku-icons-directory (expand-file-name "~/.emacs.d/src/todochiku-icons/"))
    #+end_src

    No default message when compilation is finished.

    #+begin_src emacs-lisp
      (setq todochiku-compile-message nil)
    #+end_src

    Add custom notification.

    #+begin_src emacs-lisp
      (defun c/notify-finished-compilation (buf msg)
        (todochiku-message
         (format "Compilation in %s:" buf)
         msg
         (if (string-match "finished[[:space:]]*" msg) (todochiku-icon 'check) (todochiku-icon 'alert))))
      (add-hook 'compilation-finish-functions 'c/notify-finished-compilation)
    #+end_src

    Use the notification center, rather than growl [16]. Requires
    terminal-notifier [17].

    #+begin_src emacs-lisp
      (setq c/terminal-notifier-path
            "/Applications/terminal-notifier.app/Contents/MacOS/terminal-notifier")

      (defadvice todochiku-get-arguments (around todochiku-nc)
        (setq ad-return-value
              (list "-title" title "-message" message "-activate" "org.gnu.Emacs")))

      (when (file-executable-p c/terminal-notifier-path)
        (setq todochiku-command c/terminal-notifier-path)
        (ad-activate 'todochiku-get-arguments))

      (when (file-executable-p c/terminal-notifier-path)
        (defadvice todochiku-get-arguments (around todochiku-terminal-notifier activate)
          (setq ad-return-value
                (list "-title" title "-message" message "-activate" "org.gnu.Emacs")))
        (setq todochiku-command c/terminal-notifier-path))
    #+end_src

** Email
*** Mailcap

    #+begin_src emacs-lisp
      ;; use open for PDFs (rather than gv) and images (rather than display)
      (setcdr (assoc 'viewer (cdr (assoc "pdf" (assoc "application"  mailcap-mime-data))))
              "open %s")
      (setcdr (assoc 'viewer (cdr (assoc ".*" (assoc "image"  mailcap-mime-data))))
              "open %s")
      (setcdr (assoc 'test (cdr (assoc ".*" (assoc "image"  mailcap-mime-data))))
              'window-system)
    #+end_src

*** Message

    Helper

    #+begin_src emacs-lisp
      (defun c/insert-message-sign-pgpmime ()
        (interactive)
        (save-excursion
          (beginning-of-buffer)
          (re-search-forward "--text follows this line--" (point-max) t)
          (end-of-line)
          (newline)
          (insert "<#secure method=pgpmime mode=sign>")
          (newline)))

      (defun c/goto-message-body ()
        (interactive)
        (message-goto-body)
        (if (re-search-forward "sign>" (point-max) t)
            (newline)))
    #+end_src


    #+begin_src emacs-lisp
      (eval-after-load 'message
        '(progn
           (setq
            message-kill-buffer-on-exit t
            message-send-mail-partially-limit nil
            send-mail-function 'sendmail-send-it
            mail-from-style 'angles
            ;; http://notmuchmail.org/emacstips/#index12h2
            mail-specify-envelope-from t
            message-sendmail-envelope-from 'header
            mail-envelope-from 'header
            user-full-name "Felix Geller"
            user-mail-address "fgeller@gmail.com"
            message-signature "Felix Geller"
            )
           (add-hook 'message-setup-hook 'c/insert-message-sign-pgpmime)
           ))
    #+end_src

    Buffer-specific customization.

    #+begin_src emacs-lisp
      (defun c/message-mode-customization ()
        (turn-on-auto-fill))
      (add-hook 'message-mode-hook 'c/message-mode-customization)
    #+end_src

*** Gnus

    Let's try reading news the old fashioned way.

    #+begin_src emacs-lisp
      (eval-after-load 'gnus
        '(setq gnus-select-method '(nntp "Gmane" (nntp-address "news.gmane.org"))))
    #+end_src

**** User configuration

     Fixes the "From" header, based on the "Delivered-To" header. Defaults to
     value of =user-mail-address=.

     #+begin_src emacs-lisp
       (setq gnus-posting-styles
             '((""
                ("From" (save-excursion
                          (or (and (get-buffer gnus-article-buffer)
                                   (set-buffer gnus-article-buffer)
                                   (let ((delivered-to))
                                     (gnus-summary-toggle-header 1)
                                     (setq delivered-to (message-fetch-field "Delivered-To"))
                                     (gnus-summary-toggle-header -1)
                                     delivered-to))
                              user-mail-address)))
                ("Reply-To" (save-excursion
                              (or (and (get-buffer gnus-article-buffer)
                                       (set-buffer gnus-article-buffer)
                                       (let ((delivered-to))
                                         (gnus-summary-toggle-header 1)
                                         (setq delivered-to (message-fetch-field "Delivered-To"))
                                         (gnus-summary-toggle-header -1)
                                         delivered-to))
                                  user-mail-address))))))
     #+end_src

**** Looks

    No annoying separator.

    #+begin_src emacs-lisp
      (eval-after-load 'gnus
        '(progn
           (setq gnus-treat-body-boundary nil)))
    #+end_src

    Sort everything via topics.

    #+begin_src emacs-lisp
      (eval-after-load 'gnus
        '(add-hook 'gnus-group-mode-hook 'gnus-topic-mode))
    #+end_src

    Summary line look.

    #+begin_src emacs-lisp
      (setq gnus-summary-line-format
            (concat "%z%U%R %~(max-right 17)~(pad-right 17)&user-date;  "
                    "%~(max-right 20)~(pad-right 20)f %B%s\n"))
    #+end_src

    Group buffer line look.

    #+begin_src emacs-lisp
      (setq gnus-group-line-format "%S%p[%8t]\t%P%5y:%B%(%g%)%O\n")
    #+end_src

    Tons of special characters based on and copied from Julien Dang [29].

    #+begin_src emacs-lisp
      (setq
       gnus-sum-thread-tree-false-root " â—Œ "
       gnus-sum-thread-tree-single-indent "Â· "
       gnus-sum-thread-tree-indent "   "
       gnus-sum-thread-tree-root "Â· "
       gnus-sum-thread-tree-leaf-with-other "â”œâ”€â–¸ "
       gnus-sum-thread-tree-single-leaf "â””â”€â–¸ "
       gnus-sum-thread-tree-vertical "â”‚ ")
    #+end_src

    Turn on gravatar!

    #+begin_src emacs-lisp
      (setq gnus-treat-from-gravatar 'head)
      (setq gnus-treat-mail-gravatar 'head)
    #+end_src

**** Article display

    Commit highlighting from [28].

    #+begin_src emacs-lisp
      (eval-after-load 'gnus
        '(progn
           (require 'gnus-article-treat-patch)
           (setq gnus-article-patch-conditions
                 '( "^@@ -[0-9]+,[0-9]+ \\+[0-9]+,[0-9]+ @@" ))))
    #+end_src

***** HTML

    Toggling between text & HTML if need be.

    #+begin_src emacs-lisp
      (setq gnus-buttonized-mime-types
            '("multipart/alternative" "multipart/signed")
            mm-discouraged-alternatives
            '("text/html" "image/.*"))
    #+end_src

    Let's use w3m for rendering HTML mails.

    #+begin_src emacs-lisp
      (eval-after-load 'gnus
        '(setq mm-text-html-renderer 'gnus-w3m))
    #+end_src

**** Mail

    Searching mails via nnir.

    #+begin_src emacs-lisp
      (eval-after-load 'gnus
        '(require 'nnir))
    #+end_src

    Don't nag me about reading saved settings.

    #+begin_src emacs-lisp
      (setq gnus-always-read-dribble-file t)
    #+end_src

** IRC

   Who will I be?

   #+begin_src emacs-lisp
     (setq erc-nick "fg")
   #+end_src

   Reduce the noise by ignoring status information.

   #+begin_src emacs-lisp
     (setq erc-hide-list '("NICK"))
   #+end_src

   Get notifications when receiving private messages.

   #+begin_src emacs-lisp
     (defun c/notify-privmsg (proc parsed)
       (let ((nick (car (erc-parse-user (erc-response.sender parsed))))
             (target (car (erc-response.command-args parsed)))
             (msg (erc-response.contents parsed)))
         (when (and (erc-current-nick-p target)
                    (not (erc-is-message-ctcp-and-not-action-p msg)))
           (todochiku-message (format "ERC message from: %s" nick)
                              msg
                              (todochiku-icon 'irc)
                              nil)))
       nil)
     (setq erc-server-PRIVMSG-functions '(c/notify-privmsg erc-server-PRIVMSG))
   #+end_src

   Notification when my nick is mentioned.

   #+begin_src emacs-lisp
     (defun c/notify-nick-mentioned (match-type nick msg)
       (let ((short-nick (car (split-string nick "!"))))
         (when (and
                (eq match-type 'current-nick)
                (not (string= short-nick "localhost"))
                (not (string-match "Server:.+" short-nick))
                (not (string= short-nick erc-nick)))
           (todochiku-message
            (format "%s mentioned your nick." short-nick) msg (todochiku-icon 'irc) t))))
     (add-hook 'erc-text-matched-hook 'c/notify-nick-mentioned)
   #+end_src

   Bitlbee shortcut.

   #+begin_src emacs-lisp
     (defun c/erc-bitlbee ()
       (interactive)
       (erc :server "localhost" :port "6667" :nick erc-nick))
   #+end_src

   Automatically sign into Bitlbee account [30].

   #+begin_src emacs-lisp
     (defun c/bitlbee-identify ()
       "If we're on the bitlbee server, send the identify command to
      the &bitlbee channel."
       (when (and (string= "localhost" erc-session-server)
                  (string= "&bitlbee" (buffer-name)))
         (erc-message "PRIVMSG" (format "%s identify %s"
                                        (erc-default-target)
                                        fg/bitlbee-password))))
     (add-hook 'erc-join-hook 'c/bitlbee-identify)
   #+end_src

* Server

  Start the server so that we can connect via emacsclient from other
  shells.

  #+begin_src emacs-lisp
    (unless (server-running-p)
      (server-start))
  #+end_src

  Start edit-server so that we can connect via Chrome to edit textarea
  elements.

  #+begin_src emacs-lisp
    (edit-server-start)
  #+end_src

* I18n

  Prefer UTF-8 (mac) wherever possible, and disable cjk. We want this to
  override most other settings, therefore add it close to the end.

  #+begin_src emacs-lisp
    (setq utf-translate-cjk-mode nil)
    (set-language-environment 'utf-8)
    (set-keyboard-coding-system 'utf-8-mac)
    (setq locale-coding-system 'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)
    (setenv "LC_ALL" "en_US.UTF-8")
    (setenv "LANG" "en_US.UTF-8")
    (setenv "LANGUAGE" "en_US.UTF-8")
  #+end_src

* Start buffer

  Load an org-file, rather than the =*scratch*= buffer, as most doodles
  are useful at some point in the future.

  #+begin_src emacs-lisp
    (find-file (expand-file-name (concat org-directory "/scratch.org")))
  #+end_src

  Automatically save it before killing Emacs. Even when I don't want
  to.

  #+begin_src emacs-lisp
    (add-hook
     'kill-emacs-hook
     (lambda ()
       (with-current-buffer "scratch.org"
         (save-buffer))))
  #+end_src

  Helper to quickly switch to the scratch buffer.

  #+begin_src emacs-lisp
    (defun c/switch-to-scratch-buffer ()
      (interactive)
      (switch-to-buffer "scratch.org"))
  #+end_src

* Footnotes

[1] http://www.gnu.org/software/tramp/#Frequently-Asked-Questions

[2] http://emacs-fu.blogspot.com/2011/08/customizing-mode-line.html

[3] http://groups.google.com/group/gnu.emacs.help/browse_thread/thread/44728fda08f1ec8f?hl=en&tvc=2

[4] http://www.emacswiki.org/emacs/ZapToISearch

[5] http://www.emacswiki.org/emacs/ZapToISearch

[6] http://emacswiki.org/emacs/SearchAtPoint#toc6

[7] http://github.com/defunkt/emacs

[9] http://www.masteringemacs.org/articles/2010/12/13/complete-guide-mastering-eshell/

[10] http://dorophone.blogspot.com/2011/11/how-to-make-emacs-scratch-buffer.html

[11] https://github.com/purcell/emacs.d

[12] http://www.emacswiki.org/

[14] https://github.com/technomancy/emacs-starter-kit/

[15] http://www.emacswiki.org/emacs/EmacsSession

[13] http://www.emacswiki.org/emacs/ZapUpToChar

[16] https://github.com/purcell/emacs.d/pull/42#issuecomment-7355387

[17] https://github.com/alloy/terminal-notifier

[18] http://emacswiki.org/emacs/TransposeWindows

[19] https://github.com/magnars/.emacs.d/blob/master/setup-magit.el

[20] http://emacswiki.org/emacs/GnuGlobal

[22] http://stackoverflow.com/a/7934783/750284

[23] http://www.emacswiki.org/emacs/ReBuilder

[24] http://cx4a.org/software/auto-complete/manual.html#Select_candidates_with_C-n_C-p_only_when_completion_menu_is_displayed

[25] http://cx4a.org/software/auto-complete/manual.html#Finish_completion_by_TAB

[21] http://orgmode.org/worg/org-hacks.html#sec-1-9-11

[8] http://www.emacswiki.org/emacs/Calfw#toc11

[26] https://github.com/purcell/emacs.d/blob/master/init-windows.el

[27] http://www.reddit.com/r/emacs/comments/18qa15/dired_discussion/

[28] http://bewatermyfriend.org/p/2011/00a/

[29] http://git.naquadah.org/?p=~jd/emacs.d.git;a=summary

[30] http://www.emacswiki.org/BitlBee

[31] http://stackoverflow.com/a/14731718/750284

[32] http://www.emacswiki.org/emacs/ShellMode#toc8

[33] https://github.com/technomancy/emacs-starter-kit

[34] https://github.com/magnars/.emacs.d/blob/master/defuns/editing-defuns.el
