#+TITLE: Emacs Initialization
#+STARTUP: hideblocks
* Notes

  Don't forget to =git submodules init= and =git submodules update=.

  Load this file with the following incantation (e.g., in =~/.emacs=):

  #+begin_src emacs-lisp :tangle no
    (org-babel-load-file (expand-file-name "~/.emacs.d/init.org"))
  #+end_src

  Main sources are @purcell's emacs.d [11] and the Emacswiki [12].

* Environment
** Global variables

   #+begin_src emacs-lisp
     (setq mac-p (eq system-type 'darwin))
     (setq linux-p (eq system-type 'gnu/linux))
   #+end_src

** System name

   Don't use the FQDN

   #+begin_src emacs-lisp
     (when mac-p
       (setq system-name (car (split-string system-name "\\."))))
   #+end_src

** Editor

   Set default editor in (e)shell to emacsclient.

   #+begin_src emacs-lisp
     (setenv "EDITOR" "emacsclient")
   #+end_src

** Sources path

   Where to find Emacs' sources.

   #+begin_src emacs-lisp
     (setq find-function-C-source-directory
           (expand-file-name "~/.emacs.d/emacs-sources"))
   #+end_src

** Load path

   The load path is augmented by =~/.emacs.d/site-lisp= and all direct
   children folders.

   #+begin_src emacs-lisp
     (dolist (addition '("~/.emacs.d/site-lisp"))
       (add-to-list 'load-path addition)
       (let ((default-directory addition))
         (normal-top-level-add-subdirs-to-load-path)))
   #+end_src

** Exec path

   Helper from @purcell to fix the PATH and `exec-path' based an
   default shell's settings. Execute it immediately.

   #+begin_src emacs-lisp
     (defun c/set-exec-path-from-shell-PATH ()
       (let ((path-from-shell
              (replace-regexp-in-string "[ \t\n]*$" "" (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
         (setenv "PATH" path-from-shell)
         (setq exec-path (split-string path-from-shell path-separator))))
     (c/set-exec-path-from-shell-PATH)
   #+end_src

* Global helpers

  *N.B.*: For many of these, you need the =cl= library.

  Helper to guess the project root based on files and folders that
  indicate the root of a project. Exclude tramp'd files.

  #+begin_src emacs-lisp
    (defun c/guess-project-root ()
      "Guess the project root based on files and folders that
    indicate the root of a project. Exclude tramp'd files."
      (interactive)
      (let (
            (excludes '("/ssh:" "/sudo:"))
            (root-indicators '(".git" ".hg" ".svn" "pom.xml")))
        (when (and
               buffer-file-name
               (loop for exclude in excludes never (string-match exclude buffer-file-name)))
          (loop
           for root-indicator in root-indicators
           thereis (locate-dominating-file (or buffer-file-name default-directory) root-indicator)))))
  #+end_src

  Look backward for a regex  and return group 1.

  #+begin_src emacs-lisp
    (defun c/find-backward (re-pattern)
      "Look backward for a regex  and return group 1."
      (save-excursion
        (re-search-backward re-pattern)
        (match-string 1)))
  #+end_src

  Helper to join a list of strings with a given delimiter.

  #+begin_src emacs-lisp
    (defun c/join-strings (delimiter strings)
      "Joins a list of strings with a given delimiter."
      (reduce (lambda (accumulator element) (concat accumulator delimiter element))
              strings))
  #+end_src

  Helper to define a group of commands that can be executed in consecutive key
  presses. Heavily inspired by =text-scale-adjust=.

  #+begin_src emacs-lisp
    (defmacro define-command-group (name &rest maps)
      "Defines a command that can be used to dispatch a sequence of
     commands from using consecutive key presses. Heavily inspired by
     `text-scale-adjust'."
      (let* ((map-to-string (lambda (m) (format "%s â†’ %s" (getf m :key) (symbol-name (getf m :command)))))
             (prompt (c/join-strings ", " (loop for map in maps collect (funcall map-to-string map)))))
        `(defun ,name ()
           (interactive)
           (let* ((step t)
                  (ev last-command-event)
                  (echo-keystrokes nil)
                  (base (event-basic-type ev)))
             (while step
               (cond
                ,@(loop for m in maps collect `((eq base ,(string-to-char (getf m :key))) (setq step t)))
                (t (setq step nil)))
               (when step
                 (cond
                  ,@(loop for m in maps collect `((eq base ,(string-to-char (getf m :key))) (call-interactively ',(getf m :command)))))
                 (setq ev (read-event ,prompt))
                 (setq base (event-basic-type ev))))
             (push ev unread-command-events)))))
  #+end_src

  Helper to insert the contents of a file into a variable.

  #+begin_src emacs-lisp
    (defun c/file-contents (file-name)
      "Returns the contents of FILE-NAME as a string."
      (with-temp-buffer
        (insert-file-contents file-name)
        (buffer-substring (point-min) (point-max))))
  #+end_src

* Loading libraries
** Globally desirable included libraries

   We load a set of libraries that are generally desirable.

   #+begin_src emacs-lisp
     (require 'cl)
     (require 'package)
     (require 'repeat)
     (require 'uniquify)
     (require 'grep)
     (require 'thingatpt)
   #+end_src

** ELPA

   Helper from @purcell to load elpa packages.

   #+begin_src emacs-lisp
     (defun c/require-package (package &optional min-version no-refresh)
       "Ask elpa to install given PACKAGE."
       (if (package-installed-p package min-version)
           t
         (if (or (assoc package package-archive-contents) no-refresh)
             (package-install package)
           (progn
             (package-refresh-contents)
             (require-package package min-version t)))))
   #+end_src

   Configure ELPA package handling.

   #+begin_src emacs-lisp
     (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
     (add-to-list 'package-archives '("elpa" . "http://tromey.com/elpa/"))
     (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
     (package-initialize)
   #+end_src

   Load additional packages from ELPA archives.

   #+begin_src emacs-lisp
     (setq c/elpa-packages '(
                             auto-complete
                             dired+
                             dired-details
                             dired-details+
                             elisp-slime-nav
                             expand-region
                             feature-mode
                             fill-column-indicator
                             flymake
                             flymake-cursor
                             flymake-jshint
                             gtags
                             helm
                             highlight-indentation
                             js2-mode
                             magit
                             mark-multiple
                             mic-paren
                             move-text
                             multiple-cursors
                             multi-term
                             org
                             pointback
                             popup ;; for auto-complete
                             pretty-symbols-mode
                             python    ;; @fgallina's python's flying circus support for Emacs.
                             rainbow-mode
                             session
                             slime
                             todochiku
                             undo-tree
                             wgrep
                             yasnippet
                             ))
     (dolist (package c/elpa-packages)
       (c/require-package package))
   #+end_src

** Globally desirable external libraries
*** require'd

    Fairly early loading of a development version of CEDET, to prevent loading
    of built-in version.

    #+begin_src emacs-lisp :tangle no
      (load-file (expand-file-name "~/.emacs.d/src/cedet/cedet-devel-load.el"))
    #+end_src

    Helm is used for most completion and especially file/buffer
    navigation. Needed from the start.

    #+begin_src emacs-lisp
     (require 'helm-config)
     (helm-mode 1)
   #+end_src

    Allows for selecting in semantic units. Interesting mostly for
    =prog-modes=, but needs to be =required=, so function definition is
    available for make-repeatable-command

    #+begin_src emacs-lisp
     (require 'expand-region)
   #+end_src

    Move lines up and down with =meta= and cursor keys.

    #+begin_src emacs-lisp
     (require 'move-text)
     (move-text-default-bindings)
   #+end_src

*** autoload'ed

    Helpers to do rectangle insert inline and mark multiple occurrences of
    active region.

    #+begin_src emacs-lisp
      (autoload 'inline-string-rectangle "inline-string-rectangle" t nil)
      (require 'multiple-cursors-autoloads)
    #+end_src

    Email. With tags. Org-mode support for direct mail links. Yay.

    #+begin_src emacs-lisp
      (autoload 'notmuch "notmuch" t nil)
      (eval-after-load 'notmuch
        '(progn
           (require 'org-notmuch)))
    #+end_src

    Notifications.

    #+begin_src emacs-lisp
      (setq todochiku-icons-directory (expand-file-name "~/.emacs.d/src/todochiku-icons/"))
      (autoload 'todochiku-message "todochiku" t nil)
    #+end_src

    @gigamonkey's jumper mode.

    #+begin_src emacs-lisp
      (autoload 'jumper-mode "jumper" t nil)
      (autoload 'jumper-line-mode "jumper" t nil)
      (autoload 'jumper-update-defs-from-current-buffer "jumper-update" t nil)
    #+end_src

    Slime / tag like navigation for Emacs Lisp.

    #+begin_src emacs-lisp
      (autoload 'elisp-slime-nav-mode "elisp-slime-nav" nil t)
    #+end_src

    Light-weight session management.

    #+begin_src emacs-lisp
      (autoload 'session "session" nil t)
    #+end_src

    Simple auto-completion.

    #+begin_src emacs-lisp
      (autoload 'company-mode "company" nil t)
      (autoload 'auto-complete "auto-complete" nil t)
      (autoload 'auto-complete-mode "auto-complete" nil t)
    #+end_src

    Highlight indentation and current indentation depth.

    #+begin_src emacs-lisp
      (autoload 'highlight-indentation-mode "highlight-indentation" nil t)
      (autoload 'highlight-indentation-current-column-mode "highlight-indentation" nil t)
    #+end_src

    Miscellaneous functionality.

    #+begin_src emacs-lisp
      (autoload 'zap-up-to-char "misc"
        "Kill up to, but t including ARGth occurrence of CHAR.

      \(fn arg char)"
        'interactive)
      (autoload 'copy-from-above-command "misc"
        "Copy characters from previous nonblank line, starting just above point.

      \(fn arg)"
        'interactive)
    #+end_src

    Version control / Magit

    #+begin_src emacs-lisp
     (autoload 'git-blame-mode "git-blame" "Minor mode for incremental blame for Git." t)
     (autoload 'magit-status "magit")
     (autoload 'rebase-mode "rebase-mode")
    #+end_src

* Text editing
** Helper

   Duplicate the current line, below point.

   #+begin_src emacs-lisp
     (defun c/duplicate-line ()
       (interactive)
       (forward-line 1)
       (open-line 1)
       (copy-from-above-command))
   #+end_src

   Change the number at point incrementally.

   #+begin_src emacs-lisp
     (defun c/change-num-at-point (fn)
       (let* ((num (string-to-number (thing-at-point 'word)))
              (bounds (bounds-of-thing-at-point 'word)))
         (save-excursion
           (goto-char (car bounds))
           (kill-word 1)
           (insert (number-to-string (funcall fn num 1))))))

     (defun c/inc-num-at-point ()
       (interactive)
       (c/change-num-at-point '+))

     (defun c/dec-num-at-point ()
       (interactive)
       (c/change-num-at-point '-))
   #+end_src

   Goto the matching paren of when point is looking at one.

   #+begin_src emacs-lisp
     (defun c/goto-match-paren (arg)
       "Go to the matching parenthesis if on parenthesis, otherwise insert
     the character typed."
       (interactive "p")
       (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
             ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
             (t                    (self-insert-command (or arg 1))) ))
   #+end_src

** Settings

   Don't use tabs by default. Override this in =.dir-locals.el=.

   #+begin_src emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+end_src

   Allow repeated popping of mark.

   #+begin_src emacs-lisp
     (setq set-mark-command-repeat-pop t)
   #+end_src

   Enable electric indenting.

   #+begin_src emacs-lisp
     (electric-indent-mode 1)
   #+end_src

   Disable electric pairing.

   #+begin_src emacs-lisp
     (electric-pair-mode -1)
   #+end_src

   Use the system's default browser.

   #+begin_src emacs-lisp
     (setq browse-url-browser-function 'browse-url-default-macosx-browser)
   #+end_src

   Don't disable narrowing.

   #+begin_src emacs-lisp
     (put 'narrow-to-region 'disabled nil)
     (put 'narrow-to-page 'disabled nil)
     (put 'narrow-to-defun 'disabled nil)
   #+end_src

   Show matching parentheses.

   #+begin_src emacs-lisp
     (show-paren-mode 1)
     (setq show-paren-style 'expression)
   #+end_src

   Restore the correct point in windows / buffers.

   #+begin_src emacs-lisp
     (global-pointback-mode 1)
   #+end_src

   Replace active region, rather than appending to it.

   #+begin_src emacs-lisp
     (delete-selection-mode 1)
   #+end_src

** Whitespace

   Global whitespace settings. Override them in =.dir-local.el= or file
   variables.

   #+begin_src emacs-lisp
     (setq c/whitespace-style '(face tabs spaces trailing lines space-before-tab newline indentation::space empty space-after-tab space-mark tab-mark newline-mark))
     (setq-default whitespace-style c/whitespace-style)
   #+end_src

   Helper to decide whether we should clean up whitespace.

   #+begin_src emacs-lisp
     (defun c/should-cleanup-whitespace ()
       ;; If a variable with the same name is bound -- use it
       (if (boundp 'c/should-cleanup-whitespace)
           c/should-cleanup-whitespace
         ;; else default to:
         t))
   #+end_src

   Helper to guard the call to whitespace-cleanup.

   #+begin_src emacs-lisp
     (defun c/maybe-cleanup-whitespace ()
       (when (c/should-cleanup-whitespace)
         (whitespace-cleanup)))
   #+end_src

** Yasnippet

   #+begin_src emacs-lisp
     (require 'yasnippet)
     (add-to-list 'yas/snippet-dirs (expand-file-name "~/.emacs.d/snippets"))
     (yas/global-mode 1)
   #+end_src

** Auto-completion
*** auto-complete
**** Configuration

    Load the addition config helpers.

    #+begin_src emacs-lisp
      (eval-after-load 'auto-complete
        '(require 'auto-complete-config))
    #+end_src

    Global sources for candidates

    #+begin_src emacs-lisp
      (setq-default ac-sources '(
                                 ac-source-yasnippet
                                 ac-source-filename
                                 ac-source-words-in-buffer
                                 ac-source-words-in-same-mode-buffers
                                 ))
    #+end_src

    Show candidates right away

    #+begin_src emacs-lisp
      (setq ac-delay 0.0)
      (setq ac-auto-show-menu 0.0)
      (setq ac-show-menu-immediately-on-auto-complete t)
      (setq ac-quick-help-delay 1.0)
    #+end_src

    Don't use fuzzy matching

    #+begin_src emacs-lisp
      (setq ac-use-fuzzy nil)
    #+end_src

    Don't use dictionaries

    #+begin_src emacs-lisp
      (setq ac-dictionary-files nil)
    #+end_src

    Limit menu height

    #+begin_src emacs-lisp
      (setq ac-menu-height 5)
    #+end_src

    Start completion after x characters have been inserted

    #+begin_src emacs-lisp
      (setq ac-auto-start 2)
    #+end_src

    Need a work around for flyspell (some timer issues cause
    auto-complete to be delayed significantly.

    #+begin_src emacs-lisp
      (eval-after-load 'flyspell
        '(eval-after-load 'auto-complete
           '(ac-flyspell-workaround)))
    #+end_src

**** Candidates

     Helper to collect possible candidates from Jumper definitions
     based on a given prefix.

     #+begin_src emacs-lisp
       (defun c/jumper-candidates (prefix)
         (let* ((jumper-file (jumper-find-jumper-file)))
           (when jumper-file
             (let ((jumper-file-buffer (find-file-noselect jumper-file)))
               (with-temp-buffer
                 (insert-buffer-substring jumper-file-buffer)
                 (goto-char (point-min))
                 (keep-lines (concat "^" prefix ".*[[:digit:]]+$"))
                 (goto-char (point-min))
                 (while (not (eobp))
                   (re-search-forward "^\\([^\t]+\\).+$")
                   (replace-match "\\1" nil nil)
                   (forward-line 1))
                 (split-string (buffer-string)))))))
     #+end_src

     Define a source for auto-complete based on Jumper definitions.

     #+begin_src emacs-lisp
       (eval-after-load 'auto-complete
          '(progn
             (ac-define-source jumper
                               '((depends jumper)
                                 (candidates . (c/jumper-candidates ac-prefix))
                                 (symbol . "s")
                                 (cache)))))
     #+end_src

*** Company mode
**** Configuration

     Start completion after a minimum of two characters.

     #+begin_src emacs-lisp
      (setq company-minimum-prefix-length 2)
     #+end_src

     Don't delay completion, offer candidates as soon as possible.

     #+begin_src emacs-lisp
      (setq company-idle-delay t)
     #+end_src

     Explicitly set the desired backends.

     #+begin_src emacs-lisp
       (setq company-backends '(company-elisp c/company-jumper))
       (setq company-begin-commands '(self-insert-command))
     #+end_src

     Don't start completion after moving around, only after typing.

     #+begin_src emacs-lisp
      (setq company-begin-commands '(self-insert-command))
     #+end_src

**** Backends

     Company backend for Jumper definitions.

     #+begin_src emacs-lisp
       (defun c/company-jumper (command &optional prefix &rest ignored)
         (case command
           ('prefix (company-grab-symbol))
           ('candidates (c/jumper-candidates prefix))))
     #+end_src

** isearch

   Zap (active region) while searching via isearch [4].

   #+begin_src emacs-lisp
     (defun zap-to-isearch (rbeg rend)
       "Kill the region between the mark and the closest portion of
     the isearch match string. The behaviour is meant to be analogous
     to zap-to-char; let's call it zap-to-isearch. The deleted region
     does not include the isearch word. This is meant to be bound only
     in isearch mode.  The point of this function is that oftentimes
     you want to delete some portion of text, one end of which happens
     to be an active isearch word. The observation to make is that if
     you use isearch a lot to move the cursor around (as you should,
     it is much more efficient than using the arrows), it happens a
     lot that you could just delete the active region between the mark
     and the point, not include the isearch word."
       (interactive "r")
       (when (not mark-active)
         (error "Mark is not active"))
       (let* ((isearch-bounds (list isearch-other-end (point)))
              (ismin (apply 'min isearch-bounds))
              (ismax (apply 'max isearch-bounds))
              )
         (if (< (mark) ismin)
             (kill-region (mark) ismin)
           (if (> (mark) ismax)
               (kill-region ismax (mark))
             (error "Internal error in isearch kill function.")))
         (isearch-exit)
         ))
   #+end_src

   Exit isearch, but at the other end of the match [5]. For example:

   #+BEGIN_QUOTE
   Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam
   nonummy nibh euismod tincidunt ut [laoreet] dolore magna aliquam erat
   volutpat.
   #+END_QUOTE

   Searching for =laoreet= and hitting =C-RET= will leave point at =[= while
   hitting =RET= will leave point at =]=.

   #+begin_src emacs-lisp
     (defun isearch-exit-other-end (rbeg rend)
       "Exit isearch, but at the other end of the search string.
     This is useful when followed by an immediate kill."
       (interactive "r")
       (isearch-exit)
       (goto-char isearch-other-end))
   #+end_src

   Yank current symbol as regex, rather than word (=C-w=) [6].

   #+begin_src emacs-lisp
     (defun isearch-yank-regexp (regexp)
       "Pull REGEXP into search regexp."
       (let ((isearch-regexp nil)) ;; Dynamic binding of global.
         (isearch-yank-string regexp))
       (if (not isearch-regexp)
           (isearch-toggle-regexp))
       (isearch-search-and-update))
     (defun isearch-yank-symbol ()
       "Put symbol at current point into search string."
       (interactive)
       (let ((sym (find-tag-default)))
         (if (null sym)
             (message "No symbol at point")
           (isearch-yank-regexp
            (concat "\\_<" (regexp-quote sym) "\\_>")))))
   #+end_src

** grep

   Ignore virtualenv folders (typically named =env=)

   #+begin_src emacs-lisp
     (add-to-list 'grep-find-ignored-directories "env")
   #+end_src

   Use GNU find an Mac OS (via homebrew)

   #+begin_src emacs-lisp
     (when mac-p
       (setq-default find-program "gfind")
       (grep-apply-setting 'grep-find-command "gfind . -type f -exec grep -nH -e  {} +")
       (grep-apply-setting 'grep-find-template "gfind . <X> -type f <F> -exec grep <C> -nH -e <R> {} +"))
   #+end_src

   Wrapper to =rgrep= to set =default-directory= to the (guessed) project root.

   #+begin_src emacs-lisp
     (defun c/rgrep-from-project-root ()
       (interactive)
       (let ((default-directory (c/guess-project-root)))
         (call-interactively 'rgrep)))
   #+end_src

   Appearance of the results buffer.

   #+begin_src emacs-lisp
     (setq
      grep-highlight-matches t
      grep-scroll-output t
      )
   #+end_src

** ispell

   Use aspell on Mac OS.

   #+begin_src emacs-lisp
     (when (executable-find "aspell")
       (setq ispell-program-name "aspell"
             ispell-extra-args '("--sug-mode=ultra")))
   #+end_src

   Wrapper to turn on flyspell.

   #+begin_src emacs-lisp
     (defun c/enable-flyspell ()
       (flyspell-mode 1))
     (defun c/enable-flyspell-prog ()
       (flyspell-prog-mode))
   #+end_src

   Spell-check emails and plain text files.

   #+begin_src emacs-lisp
     (add-hook 'text-mode-hook 'c/enable-flyspell)
     (add-hook 'message-mode-hook 'c/enable-flyspell)
     (add-hook 'magit-log-edit-mode-hook 'c/enable-flyspell)
   #+end_src

** diff

   Some customization for diff-mode buffers to show whitespace.

   #+begin_src emacs-lisp
     (defun c/diff-mode-customization ()
       (interactive)
       ; need to set this again, as diff-mode thinks it knows my
       ; preferences better than me.
       (setq whitespace-style c/whitespace-style)
       (whitespace-mode))
     (add-hook 'diff-mode-hook 'c/diff-mode-customization)
   #+end_src

** ediff

   Split the diff windows horizontally, rather than vertically.

   #+begin_src emacs-lisp
     (setq ediff-split-window-function 'split-window-horizontally)
   #+end_src

   Don't use multiple frames. One is confusing enough.

   #+begin_src emacs-lisp
     (setq ediff-window-setup-function 'ediff-setup-windows-plain)
   #+end_src

** Language helpers

   Fast switch to German postfix input method.

   #+begin_src emacs-lisp
     (defun c/set-german-postfix-input-method ()
       (interactive)
       (set-input-method 'german-postfix))
   #+end_src


   Fast switch to German dictionary for spell-checking.

   #+begin_src emacs-lisp
     (defun c/set-german-dictionary ()
       (interactive)
       (ispell-change-dictionary "german"))
   #+end_src

   Set the environment for editing a buffer with German text.

   #+begin_src emacs-lisp
     (defun c/set-german-environment ()
       (interactive)
       (c/set-german-postfix-input-method)
       (c/set-german-dictionary))
   #+end_src

* Programming

  Show trailing whitespace when editing source code.

  #+begin_src emacs-lisp
    (add-hook 'prog-mode-hook (lambda () (setq show-trailing-whitespace t)))
  #+end_src

  Spell check comments.

  #+begin_src emacs-lisp
    (add-hook 'prog-mode-hook 'c/enable-flyspell-prog)
  #+end_src

** CEDET

   Configure semantic's default submodes.

   #+begin_src emacs-lisp :tangle no
     (setq semantic-default-submodes
           '(
             global-semantic-idle-scheduler-mode
             global-semanticdb-minor-mode
             global-semantic-idle-completions-mode
             ))
   #+end_src

** Compiling

   Settings for compilation mode.

   #+begin_src emacs-lisp
     (setq
      compilation-scroll-output t
      compilation-message-face nil  ;; don't underline
      )
   #+end_src


   Fix regular expression for maven (3) output.

   #+begin_src emacs-lisp
     (add-to-list 'compilation-error-regexp-alist-alist
                  ;; Adds the "ERROR " prefix
                  '(maven "\\[ERROR\\] \\([0-9]*[^0-9\n]\\(?:[^\n :]\\| [^-/\n]\\|:[^ \n]\\)*?\\):\\[\\([0-9]+\\),\\([0-9]+\\)\\]" 1 2 3))
   #+end_src

** GNU Global

   Helpers to update the GNU Global database incrementally based on definitions
   in the current file, based on tips in the EmacsWiki [20].

   #+begin_src emacs-lisp
     (defun c/gtags-update-single (filename gtags-root)
       "Update GNU Global database in GTAGS-ROOT for changes in file named FILENAME."
       (interactive)
       (start-process "update-gtags" "update-gtags"
                      "bash" "-c" (concat "cd " gtags-root " ; gtags -i --single-update " filename )))

     (defun c/gtags-update-current-file ()
       "Updates a GNU Global database based on the definitions in the current file."
       (interactive)
       (let* ((gtags-root (gtags-get-rootpath))
              (filename (buffer-file-name (current-buffer))))
         (c/gtags-update-single filename gtags-root)
         (message "Gtags updated for %s" filename)))

     (defun c/gtags-update-hook ()
       "Optionally updates the GNU Global database incrementally, if applicable."
       (when (and (boundp 'gtags-mode) gtags-mode)
         (when (gtags-get-rootpath)
           (c/gtags-update-current-file))))
   #+end_src

   Use helm-gtags to access the GNU Global database.

   #+begin_src emacs-lisp
     ;; only lead helm-gtags, if we have loaded helm and gtags individually.
     (eval-after-load 'helm '(eval-after-load 'gtags '(progn (require 'helm-gtags))))
   #+end_src

   Add a hook to update the GNU Global database upon saving a file.

   #+begin_src emacs-lisp
     (defun c/initialize-gtags-mode ()
       (add-hook 'after-save-hook 'c/gtags-update-hook))
     (add-hook 'gtags-mode-hook 'c/initialize-gtags-mode)
   #+end_src

** Flymake

   #+begin_src emacs-lisp
     (eval-after-load 'flymake
       '(progn
          (require 'flymake-jshint)
          (require 'flymake-cursor)
          ;; don't want this on Mac OS X -- http://koansys.com/tech/emacs-hangs-on-flymake-under-os-x
          (setq flymake-gui-warnings-enabled nil)
          (setq flymake-start-syntax-check-on-newline t)
          (setq flymake-compilation-prevents-syntax-check nil)
          (setq flymake-run-in-place nil)  ;; I want my copies in the system temp dir.
          ))
   #+end_src

** Javascript

   Use =js2-mode= for editing Javascript.

   #+begin_src emacs-lisp
     (autoload 'js2-mode "js2-mode" t nil)
     (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
   #+end_src

   Buffer-specific configuration.

   #+begin_src emacs-lisp
     (defun c/js2-mode-initialization ()
       (subword-mode 1)
       (hl-line-mode 1)
       (rainbow-mode 1)
       (flymake-mode 1)
       (add-hook 'before-save-hook 'c/maybe-cleanup-whitespace nil 'local)
       (jumper-mode 1)
       (add-hook 'before-save-hook 'jumper-update-defs-from-current-buffer nil 'local)
       (setq js2-use-font-lock-faces t)
       (setq js2-mode-must-byte-compile nil)
       (setq js2-basic-offset 4)
       (setq js2-indent-on-enter-key t)
       (setq js2-auto-indent-p t)
       (setq js2-enter-indents-newline t)
       (setq js2-bounce-indent-p nil)
       (setq js2-auto-insert-catch-block t)
       (setq js2-cleanup-whitespace nil)
       (setq js2-global-externs '(Ext console))
       (setq js2-highlight-level 3)
       (setq js2-mirror-mode t) ; conflicts with autopair
       (setq js2-mode-escape-quotes t) ; t disables
       (setq js2-mode-squeeze-spaces t)
       (setq js2-pretty-multiline-decl-indentation-p t)
       (setq js2-consistent-level-indent-inner-bracket-p t))

     (eval-after-load 'js2-mode
       '(progn
          (add-hook 'js2-mode-hook 'c/js2-mode-initialization)))
   #+end_src

** Lisp
*** Emacs Lisp

    Configuration per-buffer.

    #+begin_src emacs-lisp
      (defun c/emacs-lisp-mode-initialization ()
        (pretty-symbols-mode 1)
        (eldoc-mode 1)
        (hl-line-mode 1)
        (elisp-slime-nav-mode 1)
        (auto-complete-mode 1)
        (setq ac-sources (append '(
                                   ac-source-features
                                   ac-source-functions
                                   ac-source-variables
                                   ac-source-symbols
                                   )
                                 ac-sources))
        (add-hook 'before-save-hook 'c/maybe-cleanup-whitespace nil 'local))

      (add-hook 'emacs-lisp-mode-hook 'c/emacs-lisp-mode-initialization)
    #+end_src

*** Common Lisp

    Basic slime setup.

    #+begin_src emacs-lisp
      (setq inferior-lisp-program "/usr/local/bin/sbcl")
      (setq slime-lisp-implementations '((sbcl ("sbcl"))))
      (require 'slime-autoloads)
      (slime-setup '(slime-fancy))
    #+end_src

** Makefile

   Configuration per buffer.

   #+begin_src emacs-lisp
     (defun c/makefile-mode-initialization ()
       (jumper-mode 1)
       (add-hook 'before-save-hook 'jumper-update-defs-from-current-buffer nil 'local))
     (add-hook 'makefile-mode-hook 'c/makefile-mode-initialization)
   #+end_src

** Python

   Basic system-wide configuration for @fgallina's flying circus. Taken
   right from the library's documentation header.

   #+begin_src emacs-lisp
     (eval-after-load "python"
       '(progn
          (setq python-shell-interpreter "ipython"
                python-shell-interpreter-args ""
                python-shell-prompt-regexp "In \\[[0-9]+\\]: "
                python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
                python-shell-completion-setup-code
                "from IPython.core.completerlib import module_completion"
                python-shell-completion-module-string-code
                "';'.join(module_completion('''%s'''))\n"
                python-shell-completion-string-code
                "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")
          ))
   #+end_src

   Special configuration for flymake

   #+begin_src emacs-lisp
     (defun c/flymake-python-init ()
       (let* ((temp-file (flymake-init-create-temp-buffer-copy
                          'flymake-create-temp-intemp))
              (local-file (file-relative-name
                           temp-file
                           (file-name-directory buffer-file-name))))
         (list "pycheckers"  (list local-file))))
     (eval-after-load 'flymake
       '(progn
          (add-to-list 'flymake-allowed-file-name-masks
                       (list "\\.py\\'" 'c/flymake-python-init))))
   #+end_src

   Helper to split arguments across lines.

   #+begin_src emacs-lisp
     (defun c/split-python-args-across-lines ()
       (interactive)
       (save-excursion
         (beginning-of-line)
         (re-search-forward "(" (point-at-eol) t)
         (newline)
         (while (re-search-forward "," (point-at-eol) t)
           (newline))
         (re-search-forward ")" (point-at-eol) t)
         (goto-char (1- (point)))
         (insert ",")
         (newline)
         ))
   #+end_src

   Configuration per-buffer.

   #+begin_src emacs-lisp
     (defun c/python-mode-initialization ()
       (subword-mode 1)
       (jumper-mode 1)
       (pretty-symbols-mode 1)
       (hl-line-mode 1)
       (fci-mode 1)
       (auto-complete-mode 1)
       (setq ac-sources (cons 'ac-source-jumper ac-sources))
       (when buffer-file-name (flymake-mode 1))
       (set-fill-column 79)
       (add-hook 'before-save-hook 'c/maybe-cleanup-whitespace nil 'local)
       (add-hook 'before-save-hook 'jumper-update-defs-from-current-buffer nil 'local)
       )
     (add-hook 'python-mode-hook 'c/python-mode-initialization)
   #+end_src

*** Helper

    Run an individual test, by passing a restrictive predicate to
    nosetest. Searches from =point= backward to find test method and
    surrounding class name.

    #+begin_src emacs-lisp
      (defvar *c/last-python-test-compile-command* nil
        "Is set by C/RUN-PYTHON-TEST so that C/RERUN-PYTHON-TEST knows
        what to do.")
      (defun c/run-python-test ()
        (interactive)
        (let* ((file-name buffer-file-name)
               (project-root (c/guess-project-root))
               (class-name (c/find-backward "class \\(.+\\)("))
               (fun-name (c/find-backward "def \\(test.+\\)("))
               (cmd (format
                     "cd %s && TESTSEL=%s:%s.%s make tests"
                     project-root
                     file-name
                     class-name
                     fun-name)))
          (setq *c/last-python-test-compile-command* cmd)
          (let ((compilation-buffer-name-function (lambda (x) "*tests*")))
            (compile cmd t))))
      (defun c/run-python-test-class ()
        (interactive)
        (let* ((file-name buffer-file-name)
               (project-root (c/guess-project-root))
               (class-name (c/find-backward "class \\(.+\\)("))
               (cmd (format
                     "cd %s && TESTSEL=%s:%s make tests"
                     project-root
                     file-name
                     class-name)))
          (setq *c/last-python-test-compile-command* cmd)
          (let ((compilation-buffer-name-function (lambda (x) "*tests*")))
            (compile cmd t))))
      (defun c/run-python-tests-in-project ()
        (interactive)
        (let* ((project-root (c/guess-project-root))
               (cmd (format "cd %s && make tests" project-root)))
          (setq *c/last-python-test-compile-command* cmd)
          (let ((compilation-buffer-name-function (lambda (x) "*tests*")))
            (compile cmd t))))
      (defun c/rerun-python-test ()
        (interactive)
        (if *c/last-python-test-compile-command*
            (let ((compilation-buffer-name-function (lambda (x) "*tests*")))
              (compile *c/last-python-test-compile-command* t))))
    #+end_src

    Insert statements to trigger a breakpoint in ipdb.

    #+begin_src emacs-lisp
      (defun c/python-insert-ipdb-breakpoint ()
        (interactive)
        (beginning-of-line)
        (insert "import ipdb; ipdb.set_trace()")
        (newline-and-indent))
    #+end_src

** SQL

   Send the terminator automatically

   #+begin_src emacs-lisp
     (eval-after-load 'sql
       '(setq sql-send-terminator t))
   #+end_src

** Java

   Set environment variables specific to Java.

   #+begin_src emacs-lisp
     (when mac-p
       (setenv "JAVA_HOME" "/Library/Java/JavaVirtualMachines/1.7.0u.jdk/Contents/Home"))
     (when linux-p
       (setenv "JAVA_HOME" "/usr/lib/jvm/java-7-openjdk-i386/jre"))
   #+end_src

   Special configuration for flymake

   #+begin_src emacs-lisp
     (defun c/flymake-java-init ()
       (let* ((test-class-path (expand-file-name ".test_classpath" (c/guess-project-root)))
              (class-path (if (file-exists-p test-class-path) (c/file-contents test-class-path) ".")))
         (list "/usr/bin/javac" (list "-classpath" class-path "-Xlint:all"  buffer-file-name))))

     (eval-after-load 'flymake
       '(progn
          (add-to-list 'flymake-allowed-file-name-masks
                       (list "\\.java\\'" 'c/flymake-java-init))))
   #+end_src

   Tell CEDET's semanticdb-javap and where to find information about global
   classes.

   #+begin_src emacs-lisp :tangle no
     (setq semanticdb-javap-classpath '())
     (when linux-p
       (add-to-list 'semanticdb-javap-classpath "/usr/lib/jvm/java-7-openjdk-i386/jre"))
     (when mac-p
       (add-to-list 'semanticdb-javap-classpath "/System/Library/Frameworks/JavaVM.framework/Versions/1.6/Classes/classes.jar"))
   #+end_src

   Configuration per-buffer.

   #+begin_src emacs-lisp
     (defun c/java-mode-initialization ()
       (subword-mode 1)
       (pretty-symbols-mode 1)
       (hl-line-mode 1)
       (fci-mode 1)
       (auto-complete-mode 1)
       (gtags-mode 1)
       (c-set-offset 'arglist-intro '+)  ;; fixes indenting of arguments on the next line.
       (c-set-offset 'arglist-close '0)
       (c-set-offset 'substatement-open '0)
       (when buffer-file-name (flymake-mode 1))
       (add-hook 'before-save-hook 'c/maybe-cleanup-whitespace nil 'local)
       )
     (add-hook 'java-mode-hook 'c/java-mode-initialization)
   #+end_src

*** Tests

    Assumes that it is only run only maven projects.

**** Helpers

     Run an individual test, by passing a restrictive predicate to
     nosetest. Searches from =point= backward to find test method and
     surrounding class name.

     #+begin_src emacs-lisp
       (defvar *c/last-java-test-compile-command* nil
         "Is set by C/RUN-JAVA-TEST so that C/RERUN-JAVA-TEST knows
         what to do.")
       (defun c/run-java-test (arg)
         (interactive "P")
         (let* ((project-root (c/guess-project-root))
                (class-name (c/find-backward "public class \\(.+Test\\)"))
                (fun-name (c/find-backward "public void \\(test.+\\)("))
                (cmd (format
                      "cd %s && JAVA_HOME=%s mvn %s -Dtest=%s#%s test"
                      project-root
                      (getenv "JAVA_HOME")
                      (if arg "-X" "")
                      class-name
                      fun-name)))
           (setq *c/last-java-test-compile-command* cmd)
           (let ((compilation-buffer-name-function (lambda (x) "*tests*")))
             (compile cmd t))))
       (defun c/run-java-test-class ()
         (interactive)
         (let* ((project-root (c/guess-project-root))
                (class-name (c/find-backward "public class \\(.+Test\\)"))
                (cmd (format
                      "cd %s && JAVA_HOME=%s mvn -Dtest=%s test"
                      project-root
                      (getenv "JAVA_HOME")
                      class-name)))
           (setq *c/last-java-test-compile-command* cmd)
           (let ((compilation-buffer-name-function (lambda (x) "*tests*")))
             (compile cmd t))))
       (defun c/run-java-tests-in-project ()
         (interactive)
         (let* ((project-root (c/guess-project-root))
                (cmd (format
                      "cd %s && JAVA_HOME=%s mvn test"
                      project-root
                      (getenv "JAVA_HOME"))))
           (setq *c/last-java-test-compile-command* cmd)
           (let ((compilation-buffer-name-function (lambda (x) "*tests*")))
             (compile cmd t))))
       (defun c/rerun-java-test ()
         (interactive)
         (if *c/last-java-test-compile-command*
             (let ((compilation-buffer-name-function (lambda (x) "*tests*")))
               (compile *c/last-java-test-compile-command* t))))
     #+end_src

** XML

   Configuration per-buffer.

   #+begin_src emacs-lisp
     (defun c/xml-mode-initialization ()
       (hl-line-mode 1)
       (auto-complete-mode 1)
       (setq show-trailing-whitespace t)
       (add-hook 'before-save-hook 'c/maybe-cleanup-whitespace nil 'local)
       )
     (add-hook 'nxml-mode-hook 'c/xml-mode-initialization)
   #+end_src

* Key Bindings
** Helpers

   Helper [3] to make any command repeatable analogously to =C-x e e e=

   #+begin_src emacs-lisp
     (defun make-repeatable-command (cmd)
       "Returns a new command that is a repeatable version of CMD.
     The new command is named CMD-repeat.  CMD should be a quoted
     command.

     This allows you to bind the command to a compound keystroke and
     repeat it with just the final key.  For example:

             (global-set-key (kbd \"C-c a\") (make-repeatable-command 'foo))

     will create a new command called foo-repeat.  Typing C-c a will
     just invoke foo.  Typing C-c a a a will invoke foo three times,
     and so on."
       (fset (intern (concat (symbol-name cmd) "-repeat"))
             `(lambda ,(help-function-arglist cmd) ;; arg list
                ,(format "A repeatable version of `%s'." (symbol-name cmd)) ;; doc string
                ,(interactive-form cmd) ;; interactive form
                ;; see also repeat-message-function
                (setq last-repeatable-command ',cmd)
                (repeat nil)))
       (intern (concat (symbol-name cmd) "-repeat")))
   #+end_src

** Dvorak

   Swap =C-t= and =C-x=, so it's easier to type on Dvorak layout

   #+begin_src emacs-lisp
     (keyboard-translate ?\C-t ?\C-x)
     (keyboard-translate ?\C-x ?\C-t)
   #+end_src

** Jumping

   Use helm sources for fast jumping to buffers or files.

   #+begin_src emacs-lisp
   (define-key global-map (kbd "C-.") 'c/helm-jump)
   #+end_src

   Jump to previous marks to go backwards.

   #+begin_src emacs-lisp
     (defun c/pop-local-mark () (interactive) (set-mark-command 1))
     (define-key global-map (kbd "C-,") 'c/pop-local-mark)
   #+end_src

** C-c Map

   Start different kinds of shells

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-c se") 'eshell)
     (define-key global-map (kbd "C-c sl") 'slime)
     (define-key global-map (kbd "C-c sp") 'python-shell-switch-to-shell)
     (define-key global-map (kbd "C-c ss") 'shell)
   #+end_src

   Enable / disable modes

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-c ma") 'auto-complete-mode)
     (define-key global-map (kbd "C-c mc") 'company-mode)
     (define-key global-map (kbd "C-c mf") 'flymake-mode)
     (define-key global-map (kbd "C-c mg") 'rgrep)
     (define-key global-map (kbd "C-c mi") 'highlight-indentation-mode)
     (define-key global-map (kbd "C-c mm") 'magit-status)
     (define-key global-map (kbd "C-c mn") 'notmuch)
     (define-key global-map (kbd "C-c mr") 'auto-revert-mode)
     (define-key global-map (kbd "C-c ms") 'sql-mysql)
     (define-key global-map (kbd "C-c mw") 'whitespace-mode)
     (define-key global-map (kbd "C-c mj") 'jumper-line-mode)
   #+end_src

   Toggle functions

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-c M-t d") (make-repeatable-command 'toggle-debug-on-error))
     (define-key global-map (kbd "C-c M-t l") (make-repeatable-command 'toggle-truncate-lines))
   #+end_src

** C-x Map

   Helpers for scrolling - move one line at a time, and scroll similar
   to touch screens by adding and hiding one line at the same time.

   #+begin_src emacs-lisp
     (defun c/scroll-up ()
       (interactive)
       (scroll-down 1))
     (defun c/scroll-down ()
       (interactive)
       (scroll-up 1))
   #+end_src

   Bind them to =C-x â†‘= and =C-x â†“=.

   #+begin_src emacs-lisp
     (define-key ctl-x-map (kbd "<up>") (make-repeatable-command 'c/scroll-up))
     (define-key ctl-x-map (kbd "<down>") (make-repeatable-command 'c/scroll-down))
   #+end_src

   Helper from [18] to rotate the windows clock-wise.

   #+begin_src emacs-lisp
     (defun c/rotate-windows ()
       "Rotate your windows"
       (interactive)
       (cond
        ((not (> (count-windows) 1)) (message "You can't rotate a single window!"))
        (t
         (setq i 1)
         (setq numWindows (count-windows))
         (while  (< i numWindows)
           (let* (
                  (w1 (elt (window-list) i))
                  (w2 (elt (window-list) (+ (% i numWindows) 1)))
                  (b1 (window-buffer w1))
                  (b2 (window-buffer w2))
                  (s1 (window-start w1))
                  (s2 (window-start w2))
                  )
             (set-window-buffer w1  b2)
             (set-window-buffer w2 b1)
             (set-window-start w1 s2)
             (set-window-start w2 s1)
             (setq i (1+ i)))))))
   #+end_src

   Bind it to =C-x wr=.

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-x wr") (make-repeatable-command 'c/rotate-windows))
   #+end_src

   Make several built-in window related commands repeatable.

   #+begin_src emacs-lisp
     (define-key ctl-x-map "^" (make-repeatable-command 'enlarge-window))
     (define-key ctl-x-map "}" (make-repeatable-command 'enlarge-window-horizontally))
     (define-key ctl-x-map "{" (make-repeatable-command 'shrink-window-horizontally))
     (define-key ctl-x-map "o" (make-repeatable-command 'other-window))
   #+end_src

** goto Map (M-g)

   Alternatives to default =M->= and =M-<= to be consistent.

   #+begin_src emacs-lisp
     (define-key goto-map "<" 'beginning-of-buffer)
     (define-key goto-map ">" 'end-of-buffer)
   #+end_src

   Quickly jump between matching parens.

   #+begin_src emacs-lisp
     (define-key goto-map "%" (make-repeatable-command 'c/goto-match-paren))
   #+end_src

   Jump to URL.

   #+begin_src emacs-lisp
     (define-key goto-map "u" 'browse-url-default-macosx-browser)
   #+end_src

** Mac OS

   #+begin_src emacs-lisp
     (setq mac-command-modifier 'super)
     (setq mac-option-modifier 'meta)
     (setq default-input-method "MacOSX")
     (define-key global-map (kbd "S-`") 'ns-next-frame)
     (define-key global-map (kbd "S-h") 'ns-do-hide-others)
   #+end_src

** Dired

   Use Mac OS' open to view files outside of Emacs.

   #+begin_src emacs-lisp
     (define-key dired-mode-map "o" 'c/dired-open-mac)
   #+end_src

** Email / Notmuch

   #+begin_src emacs-lisp
     (eval-after-load 'message
       '(define-key message-mode-map (kbd "C-c C-b") 'c/goto-message-body))
     (eval-after-load 'notmuch
       '(progn
          (define-key notmuch-search-mode-map (kbd "Q") 'c/notmuch-archive-all-and-quit)
          (define-key notmuch-search-mode-map (kbd "a") 'c/notmuch-archive)
          (define-key notmuch-search-mode-map (kbd "g") 'notmuch-search-refresh-view)
          ; navigation on dvorak home row
          (define-key notmuch-search-mode-map (kbd "h") 'notmuch-search-show-thread)
          (define-key notmuch-search-mode-map (kbd "t") 'notmuch-search-previous-thread)
          (define-key notmuch-search-mode-map (kbd "n") 'notmuch-search-next-thread)
          (define-key notmuch-show-mode-map (kbd "s") 'notmuch-kill-this-buffer)
          (define-key notmuch-hello-mode-map "h" 'widget-button-press)
          (define-key notmuch-hello-mode-map "t" 'widget-backward)
          (define-key notmuch-hello-mode-map "n" 'widget-forward)

          (define-key notmuch-hello-mode-map "b" 'c/notmuch-jump-back-to-saved-searches)
          (define-key notmuch-hello-mode-map "g" 'c/notmuch-hello-update-and-jump-back-to-saved-searches)
          (define-key notmuch-hello-mode-map "G" 'c/notmuch-hello-offlineimap-update-and-jump-back-to-saved-searches)
          ))
   #+end_src

** GNU Global

   Set some key bindings specific to gtags-mode.

   #+begin_src emacs-lisp
     (defun c/initialize-gtags-mode-key-bindings ()
       (local-set-key (kbd "M-.") 'helm-gtags-find-tag)
       (local-set-key (kbd "M-,") 'helm-gtags-pop-stack))
     (add-hook 'gtags-mode-hook 'c/initialize-gtags-mode-key-bindings)
   #+end_src

** Helm

   Add help specific bindings, the =a= is a residue from helm's previous
   name "anything".

   #+begin_src emacs-lisp
     (setq helm-command-prefix-key "C-c h")
     (define-key global-map (kbd "C-c ha") 'helm-c-apropos)
     (define-key global-map (kbd "C-c hc") 'c/helm-contact)
     (define-key global-map (kbd "C-c hg") 'c/helm-do-rgrep)
     (define-key global-map (kbd "C-c hr") 'helm-regexp)
     (define-key global-map (kbd "C-c hu") 'helm-ucs)
     (define-key global-map (kbd "C-c hx") 'helm-M-x)
     (define-key global-map (kbd "C-c hz") 'helm-resume)
     (define-key global-map (kbd "M-x") 'helm-M-x)
     (define-key global-map (kbd "C-h a") 'helm-c-apropos)
   #+end_src

** Evaluation

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-c eb") 'eval-buffer)
     (define-key global-map (kbd "C-c ee") 'eval-last-sexp)
     (define-key global-map (kbd "C-c er") 'eval-region)
   #+end_src

** Input Environment

   Fast switch to a German environment.

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-c ii") 'c/set-german-environment)
   #+end_src

** Buffers

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-c br") 'rename-buffer)
     (define-key global-map (kbd "C-c bR") 'revert-buffer)
     (define-key global-map (kbd "C-c bs") 'c/switch-to-scratch-buffer)
     (define-key global-map (kbd "C-c bT") 'c/tramp-cleanup)
   #+end_src

** isearch

   isearch-specific bindings to use symbol at point and exit search on
   the "other end" of the match.

   #+begin_src emacs-lisp
     (define-key isearch-mode-map (kbd "M-w") 'isearch-yank-symbol)
     (define-key isearch-mode-map [(control return)] 'isearch-exit-other-end)
     (define-key isearch-mode-map (kbd "C-o") 'isearch-occur)
     (define-key isearch-mode-map (kbd "M-z") 'zap-to-isearch)
   #+end_src

** Text editing

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-c *") (make-repeatable-command 'c/duplicate-line))
     (define-key global-map (kbd "C-c ^") (make-repeatable-command 'join-line))
     (define-key global-map (kbd "C-c +") 'mc/mark-more-like-this-extended)
     (define-key global-map (kbd "C-c q") 'query-replace)
     (define-key global-map (kbd "C-c Q") 'query-replace-regexp)
     (define-key global-map (kbd "C-x r t") 'inline-string-rectangle)
     (define-key global-map (kbd "M-y") 'helm-show-kill-ring)
   #+end_src

   Command group for expanding and contracting the active region.

   #+begin_src emacs-lisp
     (define-command-group c/expand-region-command-group
       (:key "<" :command er/expand-region)
       (:key ">" :command er/contract-region))

     (define-key global-map (kbd "C-c <") 'c/expand-region-command-group)
   #+end_src

   Default to zapping up to char, not including the target. [13]

   #+begin_src emacs-lisp
     (define-key global-map (kbd "M-z") 'zap-up-to-char)
     (define-key global-map (kbd "M-Z") 'zap-to-char)
   #+end_src

** Flyspell

   #+begin_src emacs-lisp
     (eval-after-load 'flyspell
       '(progn
          (define-key flyspell-mode-map (kbd "C-.") nil)
          (define-key flyspell-mode-map (kbd "C-,") nil)))
   #+end_src

** Org mode

   #+begin_src emacs-lisp
     (define-key global-map (kbd "C-c of") 'org-footnote-action)
     (define-key global-map (kbd "C-c l") 'org-store-link)
     (define-key global-map (kbd "C-c a") 'org-agenda)
     (define-key global-map (kbd "C-c c") 'org-capture)

     (eval-after-load 'org-agenda
       '(define-key org-agenda-mode-map (kbd "C-c t") 'org-agenda-todo))
     (eval-after-load 'org-clock
       '(define-key global-map (kbd "C-c C-x C-j") 'org-clock-jump-to-current-clock))
     (eval-after-load 'org
       '(progn
          (define-key org-mode-map (kbd "C-'") nil)
          (define-key org-mode-map (kbd "C-.") nil)
          (define-key org-mode-map (kbd "C-,") nil)
          (define-key org-mode-map (kbd "C-c *") nil)
          (define-key org-mode-map (kbd "C-c &") 'org-mark-ring-goto)
          (define-key org-mode-map (kbd "C-c #") nil)
          (define-key org-mode-map (kbd "C-c >") nil)
          (define-key org-mode-map (kbd "C-c <") nil)
          (define-key org-mode-map (kbd "C-c ^") nil)
          (define-key org-mode-map (kbd "C-c t") 'org-todo)
          (define-key org-mode-map (kbd "C-c C-x C-u") 'c/org-get-chrome-link)))
   #+end_src

** Magit

   #+begin_src emacs-lisp
     (eval-after-load 'magit
       '(progn
          (define-key magit-status-mode-map (kbd "^") 'c/magit-full-push-repository)
          (define-key magit-status-mode-map (kbd "W") 'c/magit-toggle-whitespace)
          ))
   #+end_src

** Programming modes
*** JS2 mode

    #+begin_src emacs-lisp
      (eval-after-load 'js2-mode
        '(progn
           (eval-after-load 'flymake
             '(progn
                (define-key js2-mode-map (kbd "C-c !") (make-repeatable-command 'flymake-goto-next-error))
                ))))
    #+end_src

*** Python mode

    #+begin_src emacs-lisp
      (eval-after-load 'python
        '(progn
           (define-key python-mode-map (kbd "C-c >") nil)
           (define-key python-mode-map (kbd "C-c <") nil)
           (define-key python-mode-map (kbd "C-c fs") 'c/split-python-args-across-lines)
           (define-key python-mode-map (kbd "C-c f>") 'python-indent-shift-right)
           (define-key python-mode-map (kbd "C-c f<") 'python-indent-shift-left)
           (define-key python-mode-map (kbd "C-c fs") 'c/split-python-args-across-lines)
           (define-key python-mode-map (kbd "C-c fs") 'c/split-python-args-across-lines)
           (define-key python-mode-map (kbd "C-c tt") 'c/run-python-test)
           (define-key python-mode-map (kbd "C-c tc") 'c/run-python-test-class)
           (define-key python-mode-map (kbd "C-c tp") 'c/run-python-tests-in-project)
           (define-key python-mode-map (kbd "C-c tr") 'c/rerun-python-test)
           (define-key python-mode-map (kbd "C-c db") 'c/python-insert-ipdb-breakpoint)
           (define-key python-mode-map (kbd "C-RET") 'newline-and-indent)
           (eval-after-load 'flymake
             '(progn
                (define-key python-mode-map (kbd "C-c !") (make-repeatable-command 'flymake-goto-next-error))))
           ))
    #+end_src

*** Java mode

    #+begin_src emacs-lisp
      (eval-after-load 'cc-mode
        '(progn
           (define-key java-mode-map (kbd "C-c tt") 'c/run-java-test)
           (define-key java-mode-map (kbd "C-c tc") 'c/run-java-test-class)
           (define-key java-mode-map (kbd "C-c tp") 'c/run-java-tests-in-project)
           (define-key java-mode-map (kbd "C-c tr") 'c/rerun-java-test)
           (eval-after-load 'flymake
             '(progn
                (define-key java-mode-map (kbd "C-c !") (make-repeatable-command 'flymake-goto-next-error))
                ))))
    #+end_src

* Appearance
** General GUI Settings

   Less noisy Emacs startup and less noise on screen per default.

   #+begin_src emacs-lisp
     (set-scroll-bar-mode nil)
     (tool-bar-mode -1)
     (setq-default
      blink-cursor-delay 0
      blink-cursor-interval 0.5
      use-file-dialog nil
      use-dialog-box nil
      inhibit-startup-screen t
      inhibit-startup-echo-area-message t
      truncate-lines t
      truncate-partial-width-windows nil
      visible-bell nil
      transient-mark-mode t   ;; highlight the active region when mark is active
      show-trailing-whitespace nil ;; don't show trailing whitespace globally
      blink-matching-paren t
      default-frame-alist '((left-fringe . 0) (right-fringe . 0) (scroll-bar-width . nil))
      scroll-bar-width 0
      default-frame-scroll-bars nil
      ;;column-number-mode t
      ;;size-indication-mode t
      ;;mouse-yank-at-point t
      )

   #+end_src

   Highlight URLs and email addresses.

   #+begin_src emacs-lisp
     ;;(setq goto-address-mail-face 'link)
     (add-hook 'find-file-hooks 'goto-address-prog-mode)
   #+end_src

   y and n  are sufficient.

   #+begin_src emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+end_src

   Four spaces for a tab.

   #+begin_src emacs-lisp
     (setq-default tab-width 4)
   #+end_src

   Show the key strokes while typing them.

   #+begin_src emacs-lisp
     (setq echo-keystrokes 0.01)
   #+end_src

   Set the fill column to 80 characters globally.

   #+begin_src emacs-lisp
     (setq-default fill-column 80)
   #+end_src

** Fonts

   Set default fonts across frames.

   #+begin_src emacs-lisp
     (setq c/variable-width-font-family "Calibri")
     (setq c/variable-width-font-height 180)
     (setq c/mono-space-font-family "Consolas")
     (setq c/mono-space-font-height 160)
     (set-face-attribute 'default nil
                         :family c/mono-space-font-family
                         :height c/mono-space-font-height
                         :weight 'normal
                         )
   #+end_src

   Define some helpers to switch between variable-width and mono-spaced
   fonts per buffer.

   #+begin_src emacs-lisp
     (defun c/set-variable-width-font ()
       (interactive)
       (variable-pitch-mode t)
       (set-face-attribute 'variable-pitch nil
                           :family c/variable-width-font-family :height c/variable-width-font-height :weight 'normal))

     (defun c/set-mono-space-font ()
       (interactive)
       (variable-pitch-mode t)
       (set-face-attribute 'variable-pitch nil
                           :family c/mono-space-font-family :height c/mono-space-font-height :weight 'normal))
   #+end_src

   Use monospace for some modes.

   #+begin_src emacs-lisp :tangle no
     (add-hook 'calendar-mode-hook 'c/set-mono-space-font)
     (add-hook 'notmuch-hello-mode-hook 'c/set-mono-space-font)
     (add-hook 'notmuch-search-hook 'c/set-mono-space-font)
     (add-hook 'term-mode-hook 'c/set-mono-space-font)
   #+end_src

** Theme

   Load the solarized theme implementation by @purcell.

   #+begin_src emacs-lisp
     (require 'color-theme-sanityinc-solarized)
   #+end_src

** Mode-line

   Propertized mode-line string that shows errors and warnings when
   flymake is running.

   #+begin_src emacs-lisp
     (defun c/mode-line-flymake ()
       (when (and
              (boundp 'flymake-mode-line-e-w)
              flymake-mode-line-e-w
              (not (string= "" flymake-mode-line-e-w))
              (not (string= "0/0" flymake-mode-line-e-w)))
         (progn
           (string-match "\\([0-9]+\\)/\\([0-9]+\\)" flymake-mode-line-e-w)
           (let ((error-str (match-string 1 flymake-mode-line-e-w))
                 (warn-str (match-string 2 flymake-mode-line-e-w)))
             (concat " Ï„:" (propertize error-str 'face 'flymake-errline) "," (propertize warn-str 'face 'flymake-warnline))))))
   #+end_src

   Propertized mode-line string that shows special symbols to
   highlight compilation results.

   #+begin_src emacs-lisp
     (defun c/mode-line-compilation ()
       (cond
        ((string= ":exit [2]" mode-line-process) (propertize " x" 'face 'error))
        ((string= ":exit [0]" mode-line-process) " âœ“")
        (t mode-line-process)))
   #+end_src

   Less noise in the mode-line. Based on several sources [2]

   #+begin_src emacs-lisp
     (setq-default
      mode-line-format
      (list
       " "
       'mode-line-mule-info ;; Info about the active input method and coding-system
       'mode-line-remote ;; Small indicator for tramp'ed files
       '(:eval (propertize "%b" 'face 'mode-line-buffer-id)) ;; buffer name
       '(:eval (when buffer-read-only (propertize "%" 'face 'mode-line)))
       '(:eval (when (buffer-modified-p) (propertize "*" 'face 'mode-line-highlight)))
       (propertize " %l:%c %p/%I " 'face 'mode-line) ;; line
                                             ;  mode-name
       (list
        (propertize "%[" 'help-echo "Recursive edit, type C-M-c to get out")
        `(:propertize ("" mode-name)
                      mouse-face mode-line-highlight
                      local-map ,mode-line-major-mode-keymap)
        (propertize "%n" 'help-echo "mouse-2: Remove narrowing from the current buffer"
                    'mouse-face 'mode-line-highlight
                    'local-map (make-mode-line-mouse-map
                                'mouse-2 #'mode-line-widen))
        (propertize "%]" 'help-echo "Recursive edit, type C-M-c to get out")
        )
       '(:eval (c/mode-line-compilation))
       '(vc-mode vc-mode)
       '(:eval (c/mode-line-flymake))
       ""
       mode-line-client
       " âŒš "
       '(:eval (when (and (boundp 'org-mode-line-string) (org-clocking-p)) org-mode-line-string))
       )
      )
   #+end_src

** Buffer Name

   #+begin_src emacs-lisp
     (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
     (setq uniquify-after-kill-buffer-p t)
     (setq uniquify-ignore-buffers-re "^\\*")
   #+end_src

* Buffers and sessions
** Settings

   Don't remember temporary and tramp'ed files.

   #+begin_src emacs-lisp
     (setq
      recentf-max-saved-items 300
      recentf-exclude '("/tmp/")
      )
   #+end_src

   Don't ask when reverting buffer to buffer-file's contents.

   #+begin_src emacs-lisp
     (setq revert-without-query '(".*"))
   #+end_src

   Enable recursive mini-buffers

   #+begin_src emacs-lisp
     (setq enable-recursive-minibuffers t)
   #+end_src

   Always revert buffers automatically when the corresponding file is changed.

   #+begin_src emacs-lisp
     (global-auto-revert-mode 1)
     (setq global-auto-revert-non-file-buffers t)
     (setq auto-revert-verbose nil)
   #+end_src

** Automatic saving and backing up
*** Session management

    Initialize session management, that is storing of positions and
    several input variables [15].

    #+begin_src emacs-lisp
      (add-hook 'after-init-hook 'session-initialize)
    #+end_src

    Unlimited depth at which session stores session variables so we don't get
    random "..." as variables.

    #+begin_src emacs-lisp
      ;; original: (t 2 1024)
      (setq session-save-print-spec '(t nil 40000))
    #+end_src

*** File-visiting buffers

    Turn on automatic saving.

    #+begin_src emacs-lisp
      (setq auto-save-default t)
    #+end_src

    Save everything in a single folder below =~/.emacs.d=.
    Create the folder on the fly, if necessary.

    #+begin_src emacs-lisp
      (defvar c/saved-directory (expand-file-name "~/.emacs.d/saved/"))
      (make-directory c/saved-directory t)
    #+end_src

    Place autosaves and backups to in a single directory.

    #+begin_src emacs-lisp
      (setq backup-directory-alist
            `((".*" . ,c/saved-directory)))
      (setq auto-save-file-name-transforms
            `((".*" ,c/saved-directory t)))
    #+end_src

    Do not delete old versions silently.

    #+begin_src emacs-lisp
      (setq delete-old-versions nil)
    #+end_src

    Don't make backup files when renaming files.

    #+begin_src emacs-lisp
      (setq make-backup-files nil)
    #+end_src

* Helm
** Configuration

   Don't fill in single matches when selecting files.

   #+begin_src emacs-lisp
     (setq helm-ff-auto-update-initial-value nil)
   #+end_src

   Show the full path to files.

   #+begin_src emacs-lisp
     (setq helm-ff-transformer-show-only-basename nil)
   #+end_src

   Longer names are ok.

   #+begin_src emacs-lisp
     (setq helm-buffer-max-length 50)
   #+end_src

** Sources

   Source that searches for files in current project [8].

   #+begin_src emacs-lisp
     (defvar c/helm-c-source-project-file-search
       `((name . "Project File Search")
         (init . (lambda ()
                   (setq
                    helm-default-directory default-directory
                    project-root-folder (c/guess-project-root))))
         (candidates . (lambda ()
                         (start-process-shell-command "file-search-process" nil
                                                      "gfind" (format "%s -iname '*%s*' -print" project-root-folder helm-pattern))))
         (keymap . ,helm-generic-files-map)
         (mode-line . helm-generic-file-mode-line-string)
         (match helm-c-match-on-basename)
         (type . file)
         (requires-pattern . 4))
       "Source for searching files in current project recursively.")
   #+end_src

   Source for contents of a jumper file.

   #+begin_src emacs-lisp
     (require 'jumper)
     (defvar *c/helm-jumper-def-line* "\\([^[:blank:]]+\\)[[:blank:]]+\\([^[:blank:]]+\\)[[:blank:]]+\\([^[:blank:]]+\\)")
     (defvar *c/helm-jumper-candidate-line-format* "%s in %s%s at line %s")

     (defun c/helm-jumper-defs-init ()
       "Load defs from JUMPER file into helm candidate buffer."
       (ignore-errors
         (let ((jumper-file (jumper-find-jumper-file)))
           (let ((defs (with-current-buffer
                           (find-file-noselect jumper-file)
                         (buffer-substring (point-min) (point-max)))))
             (with-current-buffer (helm-candidate-buffer 'global)
               (insert defs))))))

     (defun c/helm-jumper-def-components (def-line)
       "Decompose the components of a JUMPER def line into (DEF FILE LINE)"
       (string-match *c/helm-jumper-def-line* def-line)
       (let (
             (def (match-string 1 def-line))
             (file (match-string 2 def-line))
             (line (match-string 3 def-line)))
         (list def file (string-to-number line))))

     (defun c/helm-jumper-def-transformer (candidates sources)
       "Add highlighting of candidate components."
       (loop for candidate in candidates
             collect
             (cons
              (destructuring-bind (def file line) (c/helm-jumper-def-components candidate)
                (format *c/helm-jumper-candidate-line-format*
                        (propertize def 'face 'font-lock-keyword-face)
                        (file-name-directory file)
                        (propertize (file-name-nondirectory file) 'face 'font-lock-builtin-face)
                        (propertize (number-to-string line) 'face 'shadow)))
              candidate)))

     (defun c/helm-jumper-jump-to-def (def-line)
       "Jump to a selected definition."
       (destructuring-bind (def file line) (c/helm-jumper-def-components def-line)
         (jumper-jump-to file line def)))

     (defvar c/helm-c-source-jumper-defs
       '((name . "Jump to JUMPER defs")
         (init . c/helm-jumper-defs-init)
         (candidates-in-buffer)
         (persistent-help . "Jump to this def")
         (action . c/helm-jumper-jump-to-def)
         (candidate-number-limit . 10)
         (filtered-candidate-transformer c/helm-jumper-def-transformer))
       "Source for jumping to JUMPER defs.")
   #+end_src

** Accessors to sources

   Collection of sources that we want fast access to.

   #+begin_src emacs-lisp
     (defun c/helm-jump ()
       (interactive)
       (helm-other-buffer
        '(
          helm-c-source-buffers-list
          c/helm-c-source-jumper-defs
          helm-c-source-recentf
          c/helm-c-source-project-file-search
          helm-c-source-buffer-not-found
          )
        "*c/helm-jump*"))
   #+end_src

   Wrapper to =helm-do-grep= that sends the prefix argument so we search
   for files recursively by default.

   #+begin_src emacs-lisp
     (defun c/helm-do-rgrep ()
       (interactive)
       (let ((current-prefix-arg '(4)))
         (call-interactively 'helm-do-grep)))
   #+end_src

* Eshell

  Lots of information at [9] and the emacs-starter-kit [14].

  Keep control files below =.emacs.d=.

  #+begin_src emacs-lisp
    (setq eshell-directory-name "~/.emacs.d/.eshell/")
  #+end_src

  Helper that is used for key-bindings to call eshell with a prefix to
  create a new one.

  #+begin_src emacs-lisp
    (defun c/eshell-with-prefix ()
      (interactive)
      (setq current-prefix-arg '(4))
      (call-interactively 'eshell))
  #+end_src

** Visual commands

   Specify commands that should be handled by a term.

   #+begin_src emacs-lisp
     (eval-after-load 'em-term
       '(progn
          (add-to-list 'eshell-visual-commands "ssh")
          (add-to-list 'eshell-visual-commands "redis-cli")
          (add-to-list 'eshell-visual-commands "tail")))
   #+end_src

** Prompt

   Custom prompt function.

   #+begin_src emacs-lisp
     (defun c/eshell-prompt-function ()
       (concat (c/eshell-git-info) (c/eshell-replace-prompt-prefixes) "/ "))
     (setq eshell-prompt-function #'c/eshell-prompt-function)
   #+end_src

   Tell eshell what the prompt looks like after we change it.

   #+begin_src emacs-lisp
     (setq eshell-prompt-regexp "^[^\n]*/ ")
   #+end_src

   Returns the current eshell/pwd with common prefixes (TRAMP, home
   directory) replaced.

   #+begin_src emacs-lisp
     (defun c/eshell-replace-prompt-prefixes ()
       (let ((absolute-path (eshell/pwd)))
         (cond ((string-match (getenv "HOME") absolute-path)
                (replace-match "~" nil nil absolute-path))
               ((string-match "/ssh:\\(.+\\):" absolute-path)
                (replace-match (concat "@" (match-string 1 absolute-path) " ")  nil nil absolute-path))
               (t
                absolute-path))))
   #+end_src

   Returns the current branch name with a leading space, when in a
   git-versioned directory.

   #+begin_src emacs-lisp
     (eval-after-load 'eshell
       '(progn (require 'vc-git)))
     (defun c/eshell-git-info ()
       "Returns the current branch name with a leading space, when in a
     git-versioned directory."
       (let* ((branch (vc-git-working-revision (eshell/pwd))))
         (if (not (string-equal "" branch)) (concat branch " ") "")))
    #+end_src

   Colorize the prompt to indicate non-zero exit codes.

   #+begin_src emacs-lisp
     (defun c/eshell-exit-code-prompt-face ()
       (when (and eshell-last-command-status
                  (not (zerop eshell-last-command-status)))
         (let ((inhibit-read-only t))
           (add-text-properties
            (point-at-bol)
            (point-max)
            '(face warning)))))

     (add-hook 'eshell-after-prompt-hook 'c/eshell-exit-code-prompt-face)
   #+end_src

** Commands

   Add shortcut to go up to directory containing a =.git= or =.hg= folder.

   #+begin_src emacs-lisp
     ;;;###autoload
     (defun eshell/cdg ()
       "Change directory to the project's root."
       (eshell/cd (locate-dominating-file default-directory ".git")))

     ;;;###autoload
     (defun eshell/cdh ()
       "Change directory to the project's root."
       (eshell/cd (locate-dominating-file default-directory ".hg")))
   #+end_src

   Extract all kinds of archives.

   #+begin_src emacs-lisp
     ;;;###autoload
     (defun eshell/extract (file)
       (let ((command (some (lambda (x)
                              (if (string-match-p (car x) file)
                                  (cadr x)))
                            '((".*\.tar.bz2" "tar xjf")
                              (".*\.tar.gz" "tar xzf")
                              (".*\.bz2" "bunzip2")
                              (".*\.rar" "unrar x")
                              (".*\.gz" "gunzip")
                              (".*\.tar" "tar xf")
                              (".*\.tbz2" "tar xjf")
                              (".*\.tgz" "tar xzf")
                              (".*\.zip" "unzip")
                              (".*\.Z" "uncompress")
                              (".*" "echo 'Could not extract the file:'")))))
         (eshell-command-result (concat command " " file))))
   #+end_src

* Version Control

  Use solarized colors for annote-goodness.

  #+begin_src emacs-lisp
    (setq vc-annotate-background "#fcf4dc")
    (setq vc-annotate-very-old-color "#042028")
    (setq vc-annotate-color-map
          '((20 . "#a57705")
            (40 . "#bd3612")
            (50 . "#c60007")
            (60 . "#c61b6e")
            (80 . "#5859b7")
            (100 ."#2075c7")
            (120 ."#259185")
            (140 ."#728a05")))
  #+end_src

  Ignore tramp'ed files for speeeeed [1]

  #+begin_src emacs-lisp
    (setq vc-ignore-dir-regexp
          (format "\\(%s\\)\\|\\(%s\\)"
                  vc-ignore-dir-regexp
                  tramp-file-name-regexp
                  ))
  #+end_src

** Magit

   Hook up rebase-mode.

   #+begin_src emacs-lisp
     (add-to-list 'auto-mode-alist '("git-rebase-todo" . rebase-mode))
   #+end_src

   Enable auto-fill in commit message buffers.

   #+begin_src emacs-lisp
     (defun c/magit-log-edit-initialization () (auto-fill-mode 1))
     (add-hook 'magit-log-edit-mode-hook 'c/magit-log-edit-initialization)
   #+end_src

   Helper to push (via hg-git) from a status buffer.

   #+begin_src emacs-lisp
     (defun c/magit-full-push-repository ()
       (interactive)
       (let* ((repo-path (magit-get-top-dir default-directory))
              (repo-name (file-name-nondirectory (directory-file-name repo-path))))
         (message "Starting full-push of %s" repo-name)
         (let ((sentinel (lambda (process event)
                           (todochiku-message (format "%s %s" process event)
                                              (format "Process %s received event %s." process event)
                                              (todochiku-icon 'alert))))
               (proc (start-process (format "full-push" repo-name) "*full-push*"
                                    "bash" (expand-file-name "~/bin/full-push") repo-name)))
           (set-process-sentinel proc sentinel))))
   #+end_src

   @magnars helpers to toggle whitespace handling in a magit-status buffer [19].

   #+begin_src emacs-lisp
     (defun c/magit-toggle-whitespace ()
       (interactive)
       (if (member "-w" magit-diff-options)
           (c/magit-dont-ignore-whitespace)
         (c/magit-ignore-whitespace)))

     (defun c/magit-ignore-whitespace ()
       (interactive)
       (add-to-list 'magit-diff-options "-w")
       (magit-refresh))

     (defun c/magit-dont-ignore-whitespace ()
       (interactive)
       (setq magit-diff-options (remove "-w" magit-diff-options))
       (magit-refresh))
   #+end_src

* TRAMP

  I usually stay in Emacs to edit remote files, therefore it is unlikely
  that remote files change without TRAMP noticing. Let's speed this
  up :)

  #+begin_src emacs-lisp
    (setq remote-file-name-inhibit-cache nil)
  #+end_src

  Save temporaries in =~/.emacs.d=, which is easily accessed and backed-up.

  #+begin_src emacs-lisp
    (setq tramp-auto-save-directory "~/.emacs.d/saved/")
  #+end_src

  Helper to cleanup TRAMP residues.

  #+begin_src emacs-lisp
    (defun c/tramp-cleanup ()
      (interactive)
      (tramp-cleanup-all-connections)
      (tramp-cleanup-all-buffers)
      (message "Cleaned up TRAMP connections and buffers."))
  #+end_src

* Dired
** Helper

   Open a file with Mac OS  open from dired. [7]

   #+begin_src emacs-lisp
     (defun c/dired-open-mac ()
       (interactive)
       (let ((file-name (dired-get-file-for-visit)))
         (if (file-exists-p file-name)
             (call-process "/usr/bin/open" nil 0 nil file-name))))
   #+end_src

** Configuration

   Allow recursive operations, ask once for top-level directory.

   #+begin_src emacs-lisp
     (setq dired-recursive-deletes 'top)
   #+end_src

   Load extensions to dired from dired+.

   #+begin_src emacs-lisp
     (eval-after-load 'dired
       '(progn
          (require 'dired+)
          (require 'dired-details)
          (require 'dired-details+)
          (setq dired-details-hidden-string "")))
   #+end_src

   Per buffer customization

   #+begin_src emacs-lisp
     (defun c/dired-buffer-customization ()
       (interactive)
       (hl-line-mode))

     (add-hook 'dired-mode-hook 'c/dired-buffer-customization)
   #+end_src

   Make sure dired can read weird filenames. Requires coreutils to be installed
   via homebrew.

   #+begin_src emacs-lisp
     (setq ls-lisp-use-insert-directory-program t)
     (setq insert-directory-program (if mac-p "gls" "ls"))
   #+end_src

* Org

*** General settings

    Log a timestamp when finishing a task.

    #+begin_src emacs-lisp
      (setq org-log-done 'time)
    #+end_src

    Use the special / structure-aware =C-a= and =C-k=.

    #+begin_src emacs-lisp
      (setq
       org-special-ctrl-k t
       org-special-ctrl-a t
       )
    #+end_src

    For date selection, please start on Mondays.

    #+begin_src emacs-lisp
      (setq calendar-week-start-day 1)
    #+end_src

    Hide emphasis markers and leading *'s to reduce noise.

    #+begin_src emacs-lisp
      (setq
       org-hide-emphasis-markers t
       org-hide-leading-stars t
      )
    #+end_src

    Use =S-â†‘= and =S-â†“= to modify timestamps.

    #+begin_src emacs-lisp
      (setq org-edit-timestamp-down-means-later t)
    #+end_src

    Use simple numbered footnote format. Less confusing in emails.

    #+begin_src emacs-lisp
      (setq org-footnote-auto-label 'plain)
    #+end_src

    Per-buffer configuration.

    #+begin_src emacs-lisp
        (defun c/org-mode-per-buffer-customization ()
          (add-hook 'before-save-hook 'c/maybe-cleanup-whitespace nil 'local)
          (turn-on-auto-fill))

        (add-hook 'org-mode-hook 'c/org-mode-per-buffer-customization)
    #+end_src

    Ensure that we check all boxes, before marking a parent DONE.

    #+begin_src emacs-lisp
      (setq org-enforce-todo-checkbox-dependencies t)
    #+end_src

*** Folders and files

    Where to find org-files.

    #+begin_src emacs-lisp
      (setq
       org-directory (expand-file-name "~/Cloud/org")
       org-default-notes-file (concat org-directory "/Tasks.org")
       org-agenda-files `(,org-directory)
       ;; work specific files and folders
       c/work-org-directory "~/Cloud/work"
       c/work-org-agenda-files `(,c/work-org-directory)
       c/work-org-default-notes-file (concat c/work-org-directory "/Tasks.org")
       )
    #+end_src

*** Modules

    Manually load org modules that should always be loaded with org.

    #+begin_src emacs-lisp
      (eval-after-load 'org
        (dolist (org-mod '(
                           org-crypt
                           org-info
                           org-habit
                           org-irc
                           org-checklist
                           org-eshell
                           org-notmuch
                           ))
          (require org-mod)))
    #+end_src

*** Keywords

    Define the list of keywords to use for identifying the state of a
    task.

    #+begin_src emacs-lisp
      (setq org-todo-keywords '(
                          (sequence "TODO(t)" "STARTED(s)" "|" "DONE(d!/!)")
                          (sequence "WAITING(w@/!)" "SOMEDAY(S)" "|" "CANCELLED(c@/!)")))
    #+end_src

*** Agenda

    The agenda should include the diary.

    #+begin_src emacs-lisp
      (setq org-agenda-include-diary t)
    #+end_src

    Define the time-span that the agenda covers.

    #+begin_src emacs-lisp
      (setq org-agenda-span 'day)
    #+end_src

    Do show tags in the agenda.

    #+begin_src emacs-lisp
      (setq org-agenda-remove-tags nil)
    #+end_src

    Start the week on a weekday (aka Monday).

    #+begin_src emacs-lisp
      (setq org-agenda-start-on-weekday nil)
    #+end_src

    Use the current window for showing the agenda.

    #+begin_src emacs-lisp
      (setq org-agenda-window-setup 'current-window)
    #+end_src

    Define additional commands for agenda views.

    #+begin_src emacs-lisp
      (setq org-agenda-custom-commands
            `(("d" . "Completed / archived items")
              ("dt" "[t]oday"
               tags "ARCHIVE_TIME>=\"<today>\""
               ((org-agenda-archives-mode t)))
              ("dy" "[y]esterday"
               tags "ARCHIVE_TIME>=\"<-1d>\"&ARCHIVE_TIME<\"<today>\""
               ((org-agenda-archives-mode t)))
              ("dw" "[w]eek"
               tags "ARCHIVE_TIME>=\"<-1w>\""
               ((org-agenda-archives-mode t)))
              ;; match those tagged with :inbox:, are not scheduled, are not DONE.
              ("ii" "[i]nbox tagged tasks" tags "+inbox+TODO=\"TODO\"-SCHEDULED={.+}")
              ("iw" "inbox tagged [w]ork tasks" tags "+inbox+TODO=\"TODO\"-SCHEDULED={.+}"
               ((org-agenda-files ',c/work-org-agenda-files)))
              ("n" "Find a TAGged note" tags "" ((org-agenda-archives-mode t)))
              ("w" "Show work related tasks only" agenda ""
               ((org-agenda-files ',c/work-org-agenda-files)))))
    #+end_src

    Define the sorting order

    #+begin_src emacs-lisp
      (setq org-agenda-sorting-strategy '((agenda habit-down time-up todo-state-down)))
    #+end_src

*** Clock

    Enable persisting the history and clock values across emacs sessions.

    #+begin_src emacs-lisp
      (setq org-clock-persist t)
      (org-clock-persistence-insinuate)
    #+end_src

    Enable the resuming of tasks when clocking in.

    #+begin_src emacs-lisp
      (setq org-clock-in-resume t)
    #+end_src

    When clocking into a task, set to started state.

    #+begin_src emacs-lisp
      (setq org-clock-in-switch-to-state "STARTED")
    #+end_src

    Always maintain a logbook.

    #+begin_src emacs-lisp
      (setq org-clock-into-drawer t)
    #+end_src

    Cleanup empty clocking times.

    #+begin_src emacs-lisp
      (setq org-clock-out-remove-zero-time-clocks t)
    #+end_src

*** Capture

    Define additional capture templates for personal and work tasks.

    #+begin_src emacs-lisp
      (setq org-capture-templates
            `(("t" "Task"
               entry (file+olp ,org-default-notes-file "Tasks" "Inbox")
               "* TODO %?\n\n  %a\n  %i\n")
              ("w" "Work task"
               entry (file+olp ,c/work-org-default-notes-file "Tasks" "Inbox")
               "* TODO %?\n\n  %a\n  %i\n")
              ("n" "Note"
               entry (file+headline ,org-default-notes-file "Notes")
               "* %?\n\n  %a\n  %i\n")
              ))
    #+end_src

    Helper based on @jwiegley's dot-emacs to get the URL of the
    currently active Google Chrome tab/window.

    #+begin_src emacs-lisp
      (defun c/org-get-chrome-link ()
        (interactive)
        (let ((subject (do-applescript
                        (string-to-multibyte "tell application \"Google Chrome\"
              title of active tab of front window
      end tell")))
              (url (do-applescript
                    (string-to-multibyte "tell application \"Google Chrome\"
              URL of active tab of front window
      end tell"))))
          (insert (org-make-link-string (substring url 0 nil) (substring subject 0 nil)))
          (do-applescript
           (string-to-multibyte "tell application \"Google Chrome\"
              close active tab of front window
      end tell"))
          ))
    #+end_src

*** Refile

    Start refiling at file-level and set max nesting to 5 and go step-by-step.

    #+begin_src emacs-lisp
      (setq
       org-outline-path-complete-in-steps nil
       org-refile-use-outline-path 'file
       org-refile-targets  '((nil :maxlevel . 5) (org-agenda-files :maxlevel . 5))
       )
    #+end_src

*** Babel

    Fontify source code in "native" block.

    #+begin_src emacs-lisp
      (setq org-src-fontify-natively t)
    #+end_src

*** Habits

    Low noise settings for habits.

    #+begin_src emacs-lisp
      (setq org-habit-preceding-days 7)
      (setq org-habit-show-habits-only-for-today t)
      (setq org-habit-completed-glyph ?.)
      (setq org-habit-today-glyph ?o)
      (setq org-habit-graph-column 60)
    #+end_src

* Notifications
** todochiku

   No default message when compilation is finished.

   #+begin_src emacs-lisp
     (setq todochiku-compile-message nil)
   #+end_src

   Add custom notification.

   #+begin_src emacs-lisp
     (defun c/notify-finished-compilation (buf msg)
       (todochiku-message
        (format "Compilation in %s:" buf)
        msg
        (if (string-match "finished[[:space:]]*" msg) (todochiku-icon 'check) (todochiku-icon 'alert))))
     (add-hook 'compilation-finish-functions 'c/notify-finished-compilation)
   #+end_src

   Use the notification center, rather than growl [16]. Requires
   terminal-notifier [17].

   #+begin_src emacs-lisp
     (setq c/terminal-notifier-path
           "/Applications/terminal-notifier.app/Contents/MacOS/terminal-notifier")

     (defadvice todochiku-get-arguments (around todochiku-nc)
       (setq ad-return-value
             (list "-title" title "-message" message "-activate" "org.gnu.Emacs")))

     (when (file-executable-p c/terminal-notifier-path)
       (setq todochiku-command c/terminal-notifier-path)
       (ad-activate 'todochiku-get-arguments))

     (when (file-executable-p c/terminal-notifier-path)
       (defadvice todochiku-get-arguments (around todochiku-terminal-notifier activate)
         (setq ad-return-value
               (list "-title" title "-message" message "-activate" "org.gnu.Emacs")))
       (setq todochiku-command c/terminal-notifier-path))
   #+end_src

* Email
** Mailcap

   #+begin_src emacs-lisp
     ;; use open for PDFs (rather than gv) and images (rather than display)
     (setcdr (assoc 'viewer (cdr (assoc "pdf" (assoc "application"  mailcap-mime-data))))
             "open %s")
     (setcdr (assoc 'viewer (cdr (assoc ".*" (assoc "image"  mailcap-mime-data))))
             "open %s")
     (setcdr (assoc 'test (cdr (assoc ".*" (assoc "image"  mailcap-mime-data))))
             'window-system)
   #+end_src

** Notmuch

   Helper

   #+begin_src emacs-lisp
     (defun c/notmuch-archive-all-and-quit ()
       (interactive)
       (notmuch-search-tag-all '(("-unread" "-inbox" "-w/inbox")))
       (notmuch-search-quit)
       (c/notmuch-jump-back-to-saved-searches))

     (defun c/notmuch-archive ()
       (interactive)
       (notmuch-search-tag '("-unread" "-inbox" "-w/inbox"))
       (notmuch-search-refresh-view))

     (defun c/notmuch-jump-back-to-saved-searches ()
       (interactive)
       (goto-line 4))

     (defun c/notmuch-hello-update-and-jump-back-to-saved-searches ()
       (interactive)
       (notmuch-hello-update)
       (c/notmuch-jump-back-to-saved-searches))

     (defun c/notmuch-hello-offlineimap-update-and-jump-back-to-saved-searches ()
       (interactive)
       (shell-command "offlineimap")
       (notmuch-hello-update)
       (c/notmuch-jump-back-to-saved-searches))
   #+end_src

   Settings

   #+begin_src emacs-lisp
     (setq
      notmuch-fcc-dirs nil
      notmuch-mua-user-agent-function 'notmuch-mua-user-agent-emacs
      notmuch-search-oldest-first nil
      notmuch-show-logo nil
      notmuch-show-indent-messages-width 0
      notmuch-crypto-process-mime t
      notmuch-search-line-faces nil
      notmuch-show-all-multipart/alternative-parts nil
      notmuch-show-insert-text/plain-hook '(
                                            notmuch-wash-tidy-citations
                                            notmuch-wash-elide-blank-lines
                                            notmuch-wash-excerpt-citations
                                            notmuch-wash-convert-inline-patch-to-part
                                            )
      )
     (defun c/truncate-long-lines () (toggle-truncate-lines -1))
     (eval-after-load 'notmuch
       '(progn
          (add-hook 'notmuch-show-hook 'notmuch-show-turn-on-visual-line-mode)
          (add-hook 'notmuch-show-hook 'c/truncate-long-lines)
          (add-hook 'notmuch-search-hook 'notmuch-hl-line-mode)))
   #+end_src

   Define what sections should be shown in the 'hello' overview.
   Don't show search fields and the footer.

   #+begin_src emacs-lisp
     (setq notmuch-hello-sections
           '(
             notmuch-hello-insert-header
             notmuch-hello-insert-saved-searches
             notmuch-hello-insert-alltags
             ))
   #+end_src

   Show all tags in the 'hello' overview.

   #+begin_src emacs-lisp
     (setq notmuch-show-all-tags-list t)
   #+end_src

   Saved searches.

   #+begin_src emacs-lisp
     (setq notmuch-saved-searches
           '(
             ("inbox" . "tag:inbox")
             ("w/inbox" . "tag:w/inbox")
             ("w/commits" . "tag:unread  and tag:w/commit and not \"via pb\"")
             ("ml/emacs*" . "tag:unread and tag:ml/emacs")
             ("ml/org" . "tag:unread and (tag:ml/org)")
             ("ml/cedet" . "tag:unread and (tag:ml/cedet)")
             ("ml/notmuch" . "tag:unread and (tag:ml/notmuch)")
             ))
   #+end_src

** Message

   Helper

   #+begin_src emacs-lisp
     (defun c/insert-message-sign-pgpmime ()
       (interactive)
       (save-excursion
         (beginning-of-buffer)
         (re-search-forward "--text follows this line--" (point-max) t)
         (end-of-line)
         (newline)
         (insert "<#secure method=pgpmime mode=sign>")
         (newline)))

     (defun c/goto-message-body ()
       (interactive)
       (message-goto-body)
       (if (re-search-forward "sign>" (point-max) t)
           (newline)))
   #+end_src


   #+begin_src emacs-lisp
     (eval-after-load 'message
       '(progn
          (setq
           message-kill-buffer-on-exit t
           message-send-mail-partially-limit nil
           send-mail-function 'sendmail-send-it
           mail-from-style 'angles
           ;; http://notmuchmail.org/emacstips/#index12h2
           mail-specify-envelope-from t
           message-sendmail-envelope-from 'header
           mail-envelope-from 'header
           gnus-inhibit-images t
           user-full-name "Felix Geller"
           user-mail-address "fgeller@gmail.com"
           message-signature "Felix Geller"
           )
          (add-hook 'message-setup-hook 'c/insert-message-sign-pgpmime)
          ))
   #+end_src

   Buffer-specific customization.

   #+begin_src emacs-lisp
     (defun c/message-mode-customization ()
       (turn-on-auto-fill))
     (add-hook 'message-mode-hook 'c/message-mode-customization)
   #+end_src

* IRC

  Who will I be?

  #+begin_src emacs-lisp
    (setq erc-nick "fg")
  #+end_src

  Reduce the noise by ignoring status information.

  #+begin_src emacs-lisp
    (setq erc-hide-list '("NICK"))
  #+end_src

  Get notifications when receiving private messages.

  #+begin_src emacs-lisp
    (defun c/notify-privmsg (proc parsed)
      (let ((nick (car (erc-parse-user (erc-response.sender parsed))))
            (target (car (erc-response.command-args parsed)))
            (msg (erc-response.contents parsed)))
        (when (and (erc-current-nick-p target)
                   (not (erc-is-message-ctcp-and-not-action-p msg)))
          (todochiku-message (format "ERC message from: %s" nick)
                             msg
                             (todochiku-icon 'irc)
                             nil)))
      nil)
    (setq erc-server-PRIVMSG-functions '(c/notify-privmsg erc-server-PRIVMSG))
  #+end_src

  Notification when my nick is mentioned.

  #+begin_src emacs-lisp
    (defun c/notify-nick-mentioned (match-type nick msg)
      (let ((short-nick (car (split-string nick "!"))))
        (when (and
               (eq match-type 'current-nick)
               (not (string= short-nick "localhost"))
               (not (string-match "Server:.+" short-nick))
               (not (string= short-nick erc-nick)))
          (todochiku-message
           (format "%s mentioned your nick." short-nick) msg (todochiku-icon 'irc) t))))
    (add-hook 'erc-text-matched-hook 'c/notify-nick-mentioned)
  #+end_src

* Server

  Start the server so that we can connect via emacsclient from other
  shells.

  #+begin_src emacs-lisp
    (require 'server)
    (unless (server-running-p)
      (server-start))
  #+end_src

* I18n

  Prefer UTF-8 (mac) wherever possible, and disable cjk. We want this to
  override most other settings, therefore add it close to the end.

  #+begin_src emacs-lisp
    (setq utf-translate-cjk-mode nil)
    (set-language-environment 'utf-8)
    (set-keyboard-coding-system 'utf-8-mac)
    (setq locale-coding-system 'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)
  #+end_src

* Start buffer

  Load an org-file, rather than the =*scratch*= buffer, as most doodles
  are useful at some point in the future.

  #+begin_src emacs-lisp
    (find-file (expand-file-name (concat org-directory "/scratch.org")))
  #+end_src

  Automatically save it before killing Emacs. Even when I don't want
  to.

  #+begin_src emacs-lisp
    (add-hook
     'kill-emacs-hook
     (lambda ()
       (with-current-buffer "scratch.org"
         (save-buffer))))
  #+end_src

  Helper to quickly switch to the scratch buffer.

  #+begin_src emacs-lisp
    (defun c/switch-to-scratch-buffer ()
      (interactive)
      (switch-to-buffer "scratch.org"))
  #+end_src

* Footnotes

[1] http://www.gnu.org/software/tramp/#Frequently-Asked-Questions

[2] http://emacs-fu.blogspot.com/2011/08/customizing-mode-line.html

[3] http://groups.google.com/group/gnu.emacs.help/browse_thread/thread/44728fda08f1ec8f?hl=en&tvc=2

[4] http://www.emacswiki.org/emacs/ZapToISearch

[5] http://www.emacswiki.org/emacs/ZapToISearch

[6] http://emacswiki.org/emacs/SearchAtPoint#toc6

[7] http://github.com/defunkt/emacs

[8] http://www.emacswiki.org/emacs/AnythingSources#toc14

[9] http://www.masteringemacs.org/articles/2010/12/13/complete-guide-mastering-eshell/

[10] http://dorophone.blogspot.com/2011/11/how-to-make-emacs-scratch-buffer.html

[11] https://github.com/purcell/emacs.d

[12] http://www.emacswiki.org/

[14] https://github.com/technomancy/emacs-starter-kit/

[15] http://www.emacswiki.org/emacs/EmacsSession

[13] http://www.emacswiki.org/emacs/ZapUpToChar

[16] https://github.com/purcell/emacs.d/pull/42#issuecomment-7355387

[17] https://github.com/alloy/terminal-notifier

[18] http://emacswiki.org/emacs/TransposeWindows

[19] https://github.com/magnars/.emacs.d/blob/master/setup-magit.el

  [20] http://emacswiki.org/emacs/GnuGlobal
