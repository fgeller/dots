#+TITLE: god-mode configuration
#+STARTUP: hideblocks
* god-mode

#+begin_src emacs-lisp
  (use-package dash 
               :ensure dash)
  (use-package nlinum 
               :ensure nlinum 
               :init (global-nlinum-mode 1))
  (use-package key-chord 
               :ensure key-chord 
               :init (key-chord-mode 1) 
               :config (setq key-chord-two-keys-delay 0.075))
#+end_src
  
#+begin_src emacs-lisp
(use-package god-mode
 :ensure god-mode
 :init (progn
    (define-global-minor-mode global-god-mode 
      god-local-mode god-mode-maybe-activate)
    (global-god-mode 1)
   (key-chord-define-global "oe" 'god-mode-all)
 ))

  #+end_src
  
  Promote =god-mode-map= to =emulation-mode-map-alists= for higher priority and
  bind basic characters manually to =god-mode-self-insert= to enable god-mode
  more reliably in special modes like dired and magit.

  #+begin_src emacs-lisp
    (defvar c/god-mode-map
      (let ((map (make-sparse-keymap)))
        ;; manually insert bindings for what is usually `self-insert-command' as
        ;; special-mode would not map most of them.
        (let ((char-count 40))
          (while (< char-count 127)
            (define-key map (kbd (char-to-string char-count)) 'god-mode-self-insert)
            (setq char-count  (1+ char-count))))
        (suppress-keymap map t)
        (define-key map [remap self-insert-command] 'god-mode-self-insert)
        map))

    (defvar c/god-mode-map-alist `((god-local-mode . ,c/god-mode-map)))

    (defun c/god-mode-add-emulation-keymap ()
      (unless (memq 'c/god-mode-map-alist emulation-mode-map-alists)
        (setq emulation-mode-map-alists (cons 'c/god-mode-map-alist emulation-mode-map-alists))))

    (defun c/god-mode-remove-emulation-keymap ()
      (setq emulation-mode-map-alists (delete 'c/god-mode-map-alist emulation-mode-map-alists)))

    (add-hook 'god-mode-enabled-hook 'c/god-mode-add-emulation-keymap)
    (add-hook 'god-mode-disabled-hook 'c/god-mode-remove-emulation-keymap)
  #+end_src

  Helper for editing source code blocks.

  #+begin_src emacs-lisp
    (defun c/toggle-org-src-edit ()
      (interactive)
      (cond
       ((eq major-mode 'org-mode) (call-interactively 'org-edit-src-code))
       ((-contains? minor-mode-list 'org-src-mode) (org-edit-src-exit))
       (t (message "Ignoring: Neither editing nor in org-mode"))))
  #+end_src

   Visual feedback that god-mode is enabled.

   #+begin_src emacs-lisp
     (defun c/god-mode-update-cursor ()
       (let ((faces-to-toggle '(fringe mode-line mode-line-inactive header-line linum))
             (enabled-color (if (or terminal-p (not (boundp 'flatui-colors-alist))) "gray" (cdr (assoc  "asbestos" flatui-colors-alist))))
             (disabled-color (if (or terminal-p (not (boundp 'flatui-colors-alist))) "green" (cdr (assoc "sun-flower" flatui-colors-alist)))))
         (cond
          (god-local-mode
           (-each faces-to-toggle (lambda (face) (set-face-background face enabled-color))))
          (t
           (-each faces-to-toggle (lambda (face)  (set-face-background face disabled-color)))))))

     (add-hook 'god-mode-enabled-hook 'c/god-mode-update-cursor)
     (add-hook 'god-mode-disabled-hook 'c/god-mode-update-cursor)
  #+end_src

   Manually control where god-mode is enabled.

   #+begin_src emacs-lisp
     (setq god-exempt-major-modes '()
           god-exempt-predicates '())
     (god-mode-all)
   #+end_src

   #+begin_src emacs-lisp
     (global-set-key (kbd "C-x C-1") 'delete-other-windows)
     (global-set-key (kbd "C-x C-2") 'split-window-below)
     (global-set-key (kbd "C-x C-3") 'split-window-right)
     (global-set-key (kbd "C-x C-0") 'delete-window)
     (global-set-key (kbd "C-x C-o") 'other-window)
   #+end_src



