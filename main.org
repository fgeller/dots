* Emacs Initialization

  Predicates for host operating system and windowing system.

  #+begin_src emacs-lisp
    (setq mac-p (eq system-type 'darwin))
    (setq linux-p (eq system-type 'gnu/linux))
    (setq terminal-p (not window-system))
  #+end_src

  Don't use the FQDN on a Mac

  #+begin_src emacs-lisp
    (when mac-p
      (setq system-name (car (split-string system-name "\\."))))
  #+end_src

  Set default editor in (e)shell to emacsclient.

  #+begin_src emacs-lisp
    (setenv "EDITOR" "emacsclient")
  #+end_src

  Default to cat, i.e., no paging.

  #+begin_src emacs-lisp
    (setenv "PAGER" "cat")
  #+end_src

  Custom site-lisp directory.

  #+begin_src emacs-lisp
    (setq custom-site-lisp-directory (expand-file-name "~/.emacs.d/site-lisp"))
  #+end_src

  Where to find Emacs' sources.

  #+begin_src emacs-lisp
    (setq find-function-C-source-directory
          (expand-file-name (concat custom-site-lisp-directory "emacs-sources")))
  #+end_src

  The load path is augmented by the custom site-lisp directory and all direct
  children folders.

  #+begin_src emacs-lisp
    (mapcar (lambda (addition) 
              (add-to-list 'load-path addition)
              (let ((default-directory addition))
                (normal-top-level-add-subdirs-to-load-path)))
            `(,custom-site-lisp-directory))
  #+end_src

  Add a local themes directory.

  #+begin_src emacs-lisp
    (let ((themes-directory (expand-file-name (concat custom-site-lisp-directory "/themes"))))
      (mapcar (lambda (file)
                (let ((expanded-file (expand-file-name file themes-directory)))
                  (when (file-directory-p expanded-file)
                    (add-to-list 'custom-theme-load-path expanded-file))))
              (directory-files themes-directory)))
  #+end_src

  Set custom path for custom variables.

  #+begin_src emacs-lisp
    (setq-default custom-file (expand-file-name "~/.emacs.d/custom.el"))
  #+end_src

  We load a set of libraries that are generally desirable.

  #+begin_src emacs-lisp
    (require 'cl)
    (require 'package)
    (require 'uniquify)
  #+end_src

  Custom path to install packages to.

  #+begin_src emacs-lisp
    (setq package-user-dir (expand-file-name (concat custom-site-lisp-directory "/elpa")))
  #+end_src

  Configure ELPA package handling.

  #+begin_src emacs-lisp
    (setq package-archives '(("melpa" . "http://melpa.milkbox.net/packages/")
                              ("gnu" . "http://elpa.gnu.org/packages/")))
    (when (not package-archive-contents) (package-refresh-contents))
    (package-initialize)
   #+end_src

  Now we're ready to ask for use-package:

  #+begin_src emacs-lisp
    (require 'use-package)
  #+end_src

  Use helper package to set environment variables.

  #+begin_src emacs-lisp
    (use-package exec-path-from-shell
      :ensure exec-path-from-shell
      :init (when (memq window-system '(mac ns))
              (exec-path-from-shell-initialize)))
  #+end_src

  Turn off automatic saving.

  #+begin_src emacs-lisp
    (setq auto-save-default nil)
  #+end_src

  Enable automatic reverting of buffers.

  #+begin_src emacs-lisp
    (global-auto-revert-mode 1)
    (setq global-auto-revert-non-file-buffers t)
    (setq auto-revert-verbose nil)
  #+end_src

  Don't make backup files when renaming files.

  #+begin_src emacs-lisp
    (setq make-backup-files nil)
  #+end_src

  y should be enough.

  #+begin_src emacs-lisp
    (defalias 'yes-or-no-p 'y-or-n-p)
  #+end_src

  Show the key strokes while typing them.

  #+begin_src emacs-lisp
    (setq echo-keystrokes 0.01)
  #+end_src

  Set the fill column to 80 characters globally.

  #+begin_src emacs-lisp
    (setq-default fill-column 80)
  #+end_src

  Default whitespace visualization style.

  #+begin_src emacs-lisp
    (setq-default whitespace-style '(face tabs spaces trailing lines space-before-tab newline indentation::space empty space-after-tab space-mark tab-mark newline-mark))
  #+end_src

  Helper to guard whitespace-cleanup. Control it via variable in directory or
  file local variable.

  #+begin_src emacs-lisp
    (defun maybe-cleanup-whitespace ()
      (interactive)
      (when (and (boundp 'should-cleanup-whitespace)
                 should-cleanup-whitespace)
        (whitespace-cleanup)))
  #+end_src

  Require a newline at the end of files.

  #+begin_src emacs-lisp
    (setq-default require-final-newline t)
  #+end_src

  More descriptive unique names.

  #+begin_src emacs-lisp
    (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
    (setq uniquify-after-kill-buffer-p t)
    (setq uniquify-ignore-buffers-re "^\\*")
  #+end_src

  Try to be smart about target directory for dired operations.

  #+begin_src emacs-lisp
    (setq dired-dwim-target t)
  #+end_src

* Load modules

  More configuration split into org files.

  #+begin_src emacs-lisp
    (org-babel-load-file (expand-file-name "~/.emacs.d/helm.org"))
    (org-babel-load-file (expand-file-name "~/.emacs.d/fingers.org"))
    (org-babel-load-file (expand-file-name "~/.emacs.d/appearance.org"))
    (org-babel-load-file (expand-file-name "~/.emacs.d/org.org"))
    (org-babel-load-file (expand-file-name "~/.emacs.d/vc.org"))
    (org-babel-load-file (expand-file-name "~/.emacs.d/search.org"))
    (org-babel-load-file (expand-file-name "~/.emacs.d/emacs-lisp.org"))
    (org-babel-load-file (expand-file-name "~/.emacs.d/eshell.org"))
    (org-babel-load-file (expand-file-name "~/.emacs.d/yasnippet.org"))
    (org-babel-load-file (expand-file-name "~/.emacs.d/global.org"))
    (org-babel-load-file (expand-file-name "~/.emacs.d/scala.org"))
    (org-babel-load-file (expand-file-name "~/.emacs.d/php.org"))
    (org-babel-load-file (expand-file-name "~/.emacs.d/go.org"))
  #+end_src
